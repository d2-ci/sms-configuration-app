{"version":3,"sources":["D2App/App.module.css","D2App/headline/PageHeadline.module.css","D2App/forms/FormRow.module.css","D2App/gateways/GatewayKeyValuePair.module.css","D2App/gateways/GatewayList.module.css","D2App/dataList/ListActions.module.css","D2App/views/gateway_configuration/GatewayConfigList.module.css","D2App/views/received_sms_list/Filter.module.css","D2App/views/received_sms_list/Pagination.module.css","D2App/views/received_sms_list/SmsTable.module.css","D2App/views/received_sms_list/ReceivedSmsList.module.css","D2App/smsCommandFields/FieldDataElementWithCategoryOptionCombo.module.css","D2App/smsCommandFields/DataElementTimesCategoryOptionCombos.module.css","D2App/smsCommandFields/FieldCommandSpecialCharacter.module.css","D2App/views/sms_commands/SmsCommandList.module.css","D2App/views/sent_sms_list/Pagination.module.css","D2App/views/sent_sms_list/SmsTable.module.css","D2App/views/sent_sms_list/SentSmsList.module.css","D2App/notifications/AlertContext.js","D2App/dataTest/dataTest.js","D2App/notifications/AlertHandler.js","D2App/notifications/useCriticalNotification.js","D2App/headline/PageHeadline.js","D2App/views/Home.js","D2App/views/NoMatch.js","D2App/locales/index.js","D2App/gateways/DeleteGatewaysConfirmationDialog.js","D2App/gateways/FieldGatewayAuthToken.js","D2App/gateways/FieldGatewayName.js","D2App/gateways/FieldGatewayPassword.js","D2App/gateways/FieldGatewayUrlTemplate.js","D2App/gateways/FieldGatewayUsername.js","D2App/gateways/GatewayAddKeyValuePair.js","D2App/forms/FormRow.js","D2App/gateways/GatewayBulkSMSForm.js","D2App/gateways/GatewayClickatellForm.js","D2App/gateways/GatewayGenericForm.js","D2App/gateways/GatewayKeyValuePair.js","D2App/views/gateway_configuration/GatewayConfigFormEdit.js","D2App/gateways/GatewaysTable.js","D2App/gateways/getTypeLabelByType.js","D2App/gateways/GatewayList.js","D2App/gateways/gatewayTypes.js","D2App/gateways/useCreateBulkSMSGatewayMutation.js","D2App/gateways/useCreateClickatellGatewayMutation.js","D2App/gateways/useCreateGenericGatewayMutation.js","D2App/gateways/useDeleteGatewaysMutation.js","D2App/gateways/useReadGatewayQuery.js","D2App/gateways/useReadGatewaysQuery.js","D2App/gateways/useSetDefaultGatewayMutation.js","D2App/gateways/useUpdateGatewayMutation.js","D2App/gateways/useUpdateBulkSMSGatewayMutation.js","D2App/gateways/useUpdateClickatellGatewayMutation.js","D2App/gateways/useUpdateGenericGatewayMutation.js","D2App/views/gateway_configuration/GatewayConfigFormNew.js","D2App/dataList/ListActions.js","D2App/views/gateway_configuration/GatewayConfigList.js","D2App/views/received_sms_list/config.js","D2App/views/received_sms_list/useQueryParams.js","D2App/views/received_sms_list/createSearchString.js","D2App/views/received_sms_list/Filter.js","D2App/views/received_sms_list/DeleteSelectedButton.js","D2App/views/received_sms_list/Pagination.js","D2App/views/received_sms_list/DeleteSmsButton.js","D2App/views/received_sms_list/SmsTable.js","D2App/views/received_sms_list/SmsTableLoader.js","D2App/views/received_sms_list/SmsTableError.js","D2App/views/received_sms_list/ReceivedSmsList.js","D2App/smsCommandFields/fieldNames.js","D2App/smsCommandFields/CommandsAddSpecialCharacters.js","D2App/smsCommandFields/completenessMethods.js","D2App/dataSet/FieldDataSet.js","D2App/dataSet/useReadDataSetsQuery.js","D2App/dataSet/FieldDataSetWithAutoLoad.js","D2App/dataSet/useReadDataSetQuery.js","D2App/dataElement/useReadDataElementsQuery.js","D2App/dataElement/useReadDataElementsOfDataSetQuery.js","D2App/smsCommandFields/FieldDataElementWithCategoryOptionComboFormula.js","D2App/utils/get.js","D2App/smsCommandFields/FieldDataElementWithCategoryOptionCombo.js","D2App/smsCommandFields/DataElementTimesCategoryOptionCombos.js","D2App/smsCommandFields/FieldCommandCompletenessMethod.js","D2App/smsCommandFields/FieldCommandConfirmMessage.js","D2App/smsCommandFields/FieldCommandDefaultMessage.js","D2App/smsCommandFields/FieldCommandMoreThanOneOrgUnitMessage.js","D2App/smsCommandFields/FieldCommandName.js","D2App/smsCommandFields/FieldCommandNoUserMessage.js","D2App/smsCommandFields/parserTypes.js","D2App/smsCommandFields/FieldCommandParser.js","D2App/smsCommandFields/FieldCommandSeparator.js","D2App/smsCommandFields/FieldCommandSmsCode.js","D2App/smsCommandFields/FieldCommandSpecialCharacter.js","D2App/smsCommandFields/FieldCommandSuccessMessage.js","D2App/smsCommandFields/FieldCommandUseCurrentPeriodForReporting.js","D2App/smsCommandFields/FieldCommandWrongFormatMessage.js","D2App/smsCommandFields/ProgramStageDataElements.js","D2App/smsCommand/DE_COC_toFormName.js","D2App/smsCommand/DeleteCommandsConfirmationDialog.js","D2App/smsCommand/SaveCommandButton.js","D2App/smsCommand/SubmitErrors.js","D2App/smsCommand/isParserType.js","D2App/smsCommand/useCreateSmsCommandMutation.js","D2App/smsCommand/useDeleteSmsCommandMutation.js","D2App/smsCommand/useReadSmsCommandParserTypeQuery.js","D2App/smsCommand/useReadSmsCommandsQuery.js","D2App/smsCommand/useUpdateCommand.js","D2App/userGroup/FieldUserGroup.js","D2App/userGroup/useReadUserGroupsQuery.js","D2App/userGroup/FieldUserGroupWithAutoLoad.js","D2App/smsCommandUnregisteredParser/CommandEditUnregisteredParserForm.js","D2App/program/FieldProgram.js","D2App/program/useReadProgramsQuery.js","D2App/program/FieldProgramWithAutoLoad.js","D2App/smsCommandTrackedEntityRegistrationParser/CommandEditTrackedEntityRegistrationParserForm.js","D2App/programStage/FieldProgramStage.js","D2App/programStage/useReadProgramStagesQuery.js","D2App/programStage/FieldProgramStageWithAutoLoad.js","D2App/smsCommandProgramStageDataEntryParser/useReadSmsCommandProgramStageDataEntryParserQuery.js","D2App/smsCommandProgramStageDataEntryParser/CommandEditProgramStageDataEntryParserForm.js","D2App/smsCommandWithDataSet/useReadSmsCommandWithDataSetQuery.js","D2App/smsCommandWithDataSet/CommandEditWithDataSetForm.js","D2App/smsCommand/getSmsCodeDuplicates.js","D2App/smsCommandKeyValueParser/CommandEditKeyValueParserForm.js","D2App/smsCommandJ2MEParser/CommandEditJ2MEParserForm.js","D2App/smsCommandEventRegistrationParser/useReadSmsCommandEventRegistrationParserQuery.js","D2App/smsCommandEventRegistrationParser/CommandEditEventRegistrationParserForm.js","D2App/smsCommandAlertParser/CommandEditAlertParserForm.js","D2App/views/sms_commands/SmsCommandFormEdit.js","D2App/views/sms_commands/SmsCommandFormNew.js","D2App/views/sms_commands/SmsCommandList.js","D2App/smsCommand/getLabelByParserType.js","D2App/views/sent_sms_list/translations.js","D2App/views/sent_sms_list/RefetchSms.js","D2App/views/sent_sms_list/DeleteButton.js","D2App/views/sent_sms_list/SmsTableItem.js","D2App/views/sent_sms_list/Pagination.js","D2App/views/sent_sms_list/SmsTable.js","D2App/views/sent_sms_list/StatusFilter.js","D2App/views/sent_sms_list/selectors.js","D2App/views/sent_sms_list/DeleteSelectedButton.js","D2App/views/sent_sms_list/SentSmsList.js","D2App/views/sent_sms_list/handlers.js","D2App/navigation/NavigationItem.js","D2App/navigation/Navigation.js","D2App/App.js"],"names":["module","exports","AlertContext","createContext","addAlert","Error","dataTest","name","prefix","AlertHandler","children","alerts","setAlerts","useState","Provider","value","alert","map","message","type","key","useCriticalNotification","error","useContext","useEffect","PageHeadline","className","styles","headline","data-test","Home","NoMatch","i18n","addResources","enTranslations","DeleteGatewaysConfirmationDialog","onCancelClick","onDeleteClick","t","secondary","onClick","destructive","Field","ReactFinalForm","FieldGatewayAuthToken","required","label","component","InputFieldFF","validate","composeValidators","string","hasValue","FieldGatewayName","FieldGatewayPassword","FieldGatewayUrlTemplate","url","FieldGatewayUsername","useForm","GatewayAddKeyValuePair","change","getState","parameters","values","header","encode","confidential","FormRow","cx","formRow","Form","GatewayBulkSMSForm","onSubmit","initialValues","submitText","handleSubmit","submitting","primary","icon","small","disabled","defaultProps","GatewayClickatellForm","GatewayGenericForm","_","index","GatewayKeyValuePair","isStringWithLengthAtLeastOne","textInputs","keyInput","valueInput","checkboxGroup","checkbox","CheckboxFieldFF","slice","removeKeyValueFromFormState","GATEWAY_CONFIG_FORM_EDIT_PATH","GatewayConfigFormEdit","history","useHistory","id","useParams","loading","loadError","data","jsonData","useReadGatewayQuery","saveGenericGateway","saveGenericGatewayError","useUpdateGenericGatewayMutation","saveBulkSMSGateway","saveBulkSMSGatewayError","useUpdateBulkSMSGatewayMutation","saveClickatellGateway","saveClickatellGatewayError","useUpdateClickatellGatewayMutation","saveError","msg","title","gateway","JSON","parse","gatewayType","async","formValues","uid","GENERIC_FORM","BULK_SMS_FORM","CLICKATELL_FORM","push","GATEWAY_CONFIG_LIST_PATH","e","Promise","reject","data-gateway-id","GatewaysTable","allGatewaysChecked","checkedGateways","gateways","onGatewayToggle","onToggleAll","onMakeDefaultClick","onChange","checked","includes","isDefault","GatewayList","setCheckedGateways","processing","length","container","processingMessage","loadingContainer","findIndex","curId","newCheckedGateways","allGatewayIds","CREATE_BULK_SMS_GATEWAY_MUTATION","resource","username","password","CREATE_CLICKATELL_GATEWAY_MUTATION","authtoken","urlTemplate","CREATE_GENERIC_GATEWAY_MUTATION","DELETE_GATEWAY_MUTATION","useDeleteGatewaysMutation","setLoading","setError","idToMutationRequest","engine","variables","mutate","idToMutationRequestFactory","useDataEngine","onDone","response","onError","ids","all","then","catch","GATEWAY_QUERY","useDataQuery","GATEWAYS_QUERY","params","fields","filter","SET_DEFAULT_GATEWAY_MUTATION","useUpdateGatewayMutation","query","updatedQuery","UPDATE_BULK_SMS_GATEWAY_MUTATION","UPDATE_CLICKATELL_GATEWAY_MUTATION","UPDATE_GENERIC_GATEWAY_MUTATION","GatewayConfigFormNew","visibleForm","setVisibleForm","useDataMutation","selected","passwordRequired","ListActions","addLabel","deleteLabel","dataTestProp","onAddClick","disableAdd","disableDelete","GatewayConfigList","showDeleteDialog","setShowDeleteDialog","loadingReadGateways","errorReadGateways","refetch","refetchReadGateways","join","rest","parsedData","useReadGatewaysQuery","deleteCheckedGateways","loadingDelete","errorDelete","makeGatewayDefault","loadingSetDefault","errorSetDefault","RECEIVED_SMS_LIST_LABEL","STATUS_FILTER_OPTIONS","useQueryParams","searchParams","URLSearchParams","useLocation","search","status","get","phoneNumber","page","parseInt","pageSize","createSearchString","queryString","Object","keys","reduce","acc","paramKey","paramValue","Filter","pristine","inputStrip","SingleSelectFieldFF","options","inputWidth","phoneNumberField","large","mutation","DeleteSelectedButton","selectedIds","onComplete","PAGE_LENGTHS","Pagination","pageCount","total","firstItem","Math","min","lastItem","availablePages","Array","from","_x","i","toString","navigateToPage","newPage","verticalAlign","dense","select","summary","buttonPrevious","availablePage","buttonNext","DeleteSmsButton","SmsTable","messages","pager","refetchList","setSelectedIds","selectedIdSet","Set","allSelected","toggle","has","delete","add","colSpan","noResults","bind","text","originator","smsstatus","user","userCredentials","moment","receivedDate","format","SmsTableLoader","SmsTableError","inboundSms","ReceivedSmsList","called","lazy","topBar","inboundsmss","FIELD_COMMAND_COMPLETENESS_METHOD_NAME","FIELD_COMMAND_DEFAULT_MESSAGE_NAME","FIELD_COMMAND_ID_NAME","FIELD_COMMAND_MORE_THAN_ONE_ORG_UNIT_MESSAGE_NAME","FIELD_COMMAND_NAME_NAME","FIELD_COMMAND_NO_USER_MESSAGE_NAME","FIELD_COMMAND_PARSER_NAME","FIELD_COMMAND_PROGAM_NAME","FIELD_COMMAND_PROGAM_STAGE_NAME","FIELD_COMMAND_SEPARATOR_NAME","FIELD_COMMAND_SMS_CODES_NAME","FIELD_COMMAND_SPECIAL_CHARS_NAME","FIELD_COMMAND_SUCCESS_MESSAGE_NAME","FIELD_COMMAND_USE_CURRENT_PERIOD_FOR_REPORTING_NAME","FIELD_COMMAND_WRONG_FORMAT_MESSAGE_NAME","FIELD_COMMAND_CONFIRM_MESSAGE_NAME","CommandsAddSpecialCharacters","newSpecialChars","ALL_DATAVALUE","AT_LEAST_ONE_DATAVALUE","DO_NOT_MARK_COMPLETE","FieldDataSet","dataSets","DATA_SETS_QUERY","paging","FieldDataSetWithAutoLoad","showLoadingStatus","displayName","DATA_SET_QUERY","dataSet","DATA_ELEMENTS_QUERY","dataElements","queryDataElements","code","replace","queryDataElementsOfDataSet","nextVariables","queryDataSet","dataSetElements","dataElement","dataElementIds","useFormState","FieldDataElementWithCategoryOptionComboFormula","targetFieldName","onClose","form","dataSetId","setData","finally","useReadDataElementsOfDataSetQuery","initialFormula","path","object","segments","split","cur","nextObject","operator","useMemo","dataElementCode","onRemove","newFormula","event","stopPropagation","initialValue","FieldDataElementWithCategoryOptionCombo","categoryOptionCombo","showFormula","setShowFormula","baseName","DE_COC_toFormName","formulaName","field","subscription","invalid","touched","input","meta","formula","FormSpy","DataElementTimesCategoryOptionCombos","DE_COC_combinations","errors","smsCodeErrors","globalError","global","allRequired","completenessMethods","FieldCommandCompletenessMethod","FieldCommandConfirmMessage","TextAreaFieldFF","FieldCommandDefaultMessage","FieldCommandMoreThanOneOrgUnitMessage","FieldCommandName","FieldCommandNoUserMessage","KEY_VALUE_PARSER","J2ME_PARSER","ALERT_PARSER","UNREGISTERED_PARSER","TRACKED_ENTITY_REGISTRATION_PARSER","PROGRAM_STAGE_DATAENTRY_PARSER","EVENT_REGISTRATION_PARSER","commandTypes","sort","a","b","FieldCommandParser","FieldCommandSeparator","FieldCommandSmsCode","valueType","smsCode","nextCode","trackedEntityAttribute","FieldCommandSpecialCharacter","button","specialChars","FieldCommandSuccessMessage","FieldCommandUseCurrentPeriodForReporting","FieldCommandWrongFormatMessage","ProgramStageDataElements","programStageDataElements","smsCodes","currentValue","dataElementId","cocCode","DeleteCommandsConfirmationDialog","commands","command","SaveCommandButton","submitError","hasSubmitErrors","SubmitErrors","isParserType","parserType","parser","CREATE_SMS_COMMAND_MUTATION","dataset","userGroup","program","programStage","DELETE_SMS_COMMAND_MUTATION","useDeleteSmsCommandMutation","READ_SMS_COMMAND_PARSER_TYPE_QUERY","smsCommand","SMS_COMMANDS_QUERY","smsCommands","undefined","FORM_ERROR","FinalForm","identity","REPLACE_SMS_COMMAND_MUTATION","commandId","UPDATE_SMS_COMMAND_MUTATION","partial","useUpdateCommand","onAfterChange","formatCommand","allVariables","fallback","FieldUserGroup","userGroups","USER_GROUPS_QUERY","FieldUserGroupWithAutoLoad","CommandEditUnregisteredParserForm","updateCommand","receivedMessage","FieldProgram","programs","PROGRAMS_QUERY","registration","FieldProgramWithAutoLoad","useReadProgramsQuery","formatSmsCodes","updates","CommandEditTrackedEntityRegistrationParserForm","separator","defaultMessage","wrongFormatMessage","noUserMessage","moreThanOneOrgUnitMessage","successMessage","smsCodesOriginal","curSmsCodes","selectedProgramOption","dynamicFields","programTrackedEntityAttributes","merged","dynamicField","FieldProgramStage","programStages","PROGRAM_STAGES_QUERY","programId","FieldProgramStageWithAutoLoad","useReadProgramStagesQuery","READ_SMS_COMMAND_PROGRAM_STAGE_DATA_ENTRY_PARSER_QUERY","CommandEditProgramStageDataEntryParserForm","loadingCommandError","commandData","programStageId","getInitialFormState","selectedProgramStageOption","READ_SMS_COMMAND_KEY_VALUE_PARSER_QUERY","globalValidate","DE_COC_combination_data","hasErrors","completenessMethod","smsCodesFormState","smsCodesWithValue","entries","assign","duplicates","curDuplicates","potentialDuplicates","curCode","curIndex","newlyFoundDuplicates","curWithCodeDuplicates","curName","getSmsCodeDuplicates","duplicateErrors","forEach","duplicate","formattedSmsCodes","compulsory","optionId","formattedSmsCode","CommandEditWithDataSetForm","initialCompletenessMethod","selectedDataSetOption","useCurrentPeriodForReporting","specialCharacters","curCombinations","categoryCombo","combos","COC","CommandEditKeyValueParserForm","CommandEditJ2MEParserForm","READ_SMS_COMMAND_EVENT_REGISTRATION_PARSER_QUERY","CommandEditEventRegistrationParserForm","CommandEditAlertParserForm","SMS_COMMAND_FORM_EDIT_PATH","SmsCommandFormEdit","useReadSmsCommandParserTypeQuery","isParser","SMS_COMMAND_LIST_PATH","ActualForm","prevValues","setPrevValues","subscribe","batch","prevProgram","prevParserType","useResetFormFields","showDataSetField","showUserGroupField","showProgramField","showProgramStageField","SmsCommandFormNew","createSmsCommand","SMS_COMMAND_LIST_LABEL","SmsCommandList","checkedSmsCommands","setCheckedSmsCommands","showDeleteConfirmationDialog","setShowDeleteConfirmationDialog","loadingReadSmsCommands","errorReadSmsCommands","deleteSmsCommands","allChecked","find","checkedId","toggleSmsCommand","parserTypes","getLabelByParserTypes","editButtonCell","statusMap","DELIVERED","ERROR","FAILED","OUTBOUND","PENDING","SCHEDULED","SENT","throwError","RefetchSms","refetchAndClear","DeleteButton","cleanSelected","SmsTableItem","sms","toggleSelected","isSelected","date","recipients","pageSizes","changePage","s","left","size","right","amount","pageselection","smses","toggleAll","parseStatus","filterOptions","StatusFilter","setStatus","SENT_SMS_LIST_LABEL","base","SentSmsList","setSelected","allIds","outboundsmss","noIds","noLengthMatch","every","getAllSelected","filtered","current","createCleanSelectedHandler","createToggleAllHandler","currentId","createToggleHandler","context","headerRight","NavigationItem","exactMatch","active","routeMatch","useRouteMatch","isExact","useIsItemActive","defualtProps","Navigation","App","spacers","colors","sidebar","content","exact"],"mappings":"iHACAA,EAAOC,QAAU,CAAC,UAAY,uBAAuB,QAAU,qBAAqB,QAAU,uB,oBCA9FD,EAAOC,QAAU,CAAC,SAAW,iC,m8FCA7BD,EAAOC,QAAU,CAAC,QAAU,2B,oBCA5BD,EAAOC,QAAU,CAAC,WAAa,wCAAwC,SAAW,sCAAsC,WAAa,wCAAwC,cAAgB,2CAA2C,SAAW,wC,oBCAnPD,EAAOC,QAAU,CAAC,UAAY,+BAA+B,kBAAoB,uCAAuC,iBAAmB,wC,oBCA3ID,EAAOC,QAAU,CAAC,UAAY,iC,oBCA9BD,EAAOC,QAAU,CAAC,UAAY,qCAAqC,QAAU,qC,oBCA7ED,EAAOC,QAAU,CAAC,UAAY,0BAA0B,WAAa,6B,oBCArED,EAAOC,QAAU,CAAC,UAAY,8BAA8B,cAAgB,kCAAkC,OAAS,2BAA2B,eAAiB,mCAAmC,WAAa,+BAA+B,QAAU,8B,oBCA5PD,EAAOC,QAAU,CAAC,UAAY,8B,oBCA9BD,EAAOC,QAAU,CAAC,OAAS,kC,oBCA3BD,EAAOC,QAAU,CAAC,UAAY,2DAA2D,MAAQ,yD,oBCAjGD,EAAOC,QAAU,CAAC,QAAU,wD,oBCA5BD,EAAOC,QAAU,CAAC,UAAY,gDAAgD,MAAQ,4CAA4C,OAAS,+C,oBCA3ID,EAAOC,QAAU,CAAC,eAAiB,uCAAuC,SAAW,mC,oBCArFD,EAAOC,QAAU,CAAC,UAAY,8BAA8B,KAAO,yBAAyB,MAAQ,0BAA0B,OAAS,2BAA2B,cAAgB,oC,oBCAlLD,EAAOC,QAAU,CAAC,UAAY,8B,oBCA9BD,EAAOC,QAAU,CAAC,OAAS,4BAA4B,YAAc,mC,02GCA9D,MAAMC,EAAeC,wBAAc,CACxCC,SAAU,KACR,MAAM,IAAIC,MAAM,iDCFPC,EAAW,CAACC,EAAMC,EADT,2BACE,UAAqCA,EAArC,YAA+CD,GCI1DE,EAAe,EAC1BC,eAEA,MAAOC,EAAQC,GAAaC,mBAAS,IAIrC,OAAO,kBAACX,EAAaY,SAAd,CAAuBC,MAAO,CACnCX,SAHeY,GAASJ,EAAU,IAAID,EAAQK,MAKrCN,EAED,kBAAC,IAAD,CAAYJ,SAAUA,EAAS,+BAC1BK,EAAOM,IAAI,EACpBC,UACAC,UACI,kBAAC,IAAD,eAAUb,SAAUA,EAAS,uBAAwBc,IAAKF,GAAa,CAC3E,CAACC,IAAO,IAESD,OCjBZG,EAA0BC,IACrC,MAAM,SACJlB,GACEmB,qBAAWrB,GACfsB,oBAAU,KACJF,GACFlB,EAAS,CACPe,KAAM,WACND,QAASI,EAAMJ,WAGlB,CAACI,K,sBCdC,MAAMG,EAAe,EAC1Bf,cACI,wBAAIgB,UAAWC,IAAOC,SAAUC,YAAWvB,EAAS,0BACjDI,GCFIoB,EAAO,IACX,yBAAKD,YAAWvB,EAAS,eACtB,kBAACmB,EAAD,aACA,2CCNCM,EAAU,IAAM,yBAAKF,YAAWvB,EAAS,kBAC9C,oC,6BCQR0B,IAAKC,aAAa,KADA,UACiBC,GACpBF,QAAf,ECPO,MAAMG,EAAmC,EAC9CC,gBACAC,mBACI,kBAAC,IAAD,CAAO/B,SAAUA,EAAS,sCACxB,kBAAC,IAAD,KAAa0B,EAAKM,EAAE,qBACpB,kBAAC,IAAD,KACKN,EAAKM,EAAE,2DAEZ,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQC,WAAS,EAACC,QAASJ,EAAe9B,SAAUA,EAAS,6CAA7D,UAIA,kBAAC,IAAD,CAAQmC,aAAW,EAACD,QAASH,EAAe/B,SAAUA,EAAS,8CAA/D,cCfV,MACJoC,GACEC,IACSC,EAAwB,IAAM,kBAACF,EAAD,CAAOG,UAAQ,EAACvC,SAAUA,EAAS,kCAAmCC,KAAK,YAAYuC,MAAOd,EAAKM,EAAE,cAAeS,UAAWC,IAAcC,SAAUC,YAAkBC,IAAQC,QCF1NV,MADI,GAEFC,IACSU,EAAmB,IAAM,kBAAC,EAAD,CAAOR,UAAQ,EAACvC,SAAUA,EAAS,6BAA8BC,KAAK,OAAOuC,MAAOd,EAAKM,EAAE,QAASS,UAAWC,IAAcC,SAAUC,YAAkBC,IAAQC,QCFrMV,MADI,GAEFC,IACSW,EAAuB,IAAM,kBAAC,EAAD,CAAOT,UAAQ,EAACvC,SAAUA,EAAS,iCAAkCC,KAAK,WAAWuC,MAAOd,EAAKM,EAAE,YAAaS,UAAWC,IAAcC,SAAUC,YAAkBC,IAAQC,QCFrNV,MADI,GAEFC,IACSY,EAA0B,IAAM,kBAAC,EAAD,CAAOV,UAAQ,EAACvC,SAAUA,EAAS,oCAAqCC,KAAK,cAAcuC,MAAOd,EAAKM,EAAE,gBAAiBS,UAAWC,IAAcC,SAAUC,YAAkBM,IAAKJ,QCF/NV,MADI,GAEFC,IACSc,EAAuB,IAAM,kBAAC,EAAD,CAAOZ,UAAQ,EAACvC,SAAUA,EAAS,iCAAkCC,KAAK,WAAWuC,MAAOd,EAAKM,EAAE,aAAcS,UAAWC,IAAcC,SAAUC,YAAkBC,IAAQC,QCHlN,QACJM,GACEf,IACSgB,EAAyB,KACpC,MAAM,OACJC,EADI,SAEJC,GACEH,IAeJ,OAAO,kBAAC,IAAD,CAAQlB,QAbgB,KAC7B,MAAM,WACJsB,GACED,IAAWE,OACfH,EAAO,aAAc,IAAIE,EAAY,CACnCE,QAAQ,EACRC,QAAQ,EACR7C,IAAK,GACLL,MAAO,GACPmD,cAAc,MAI8B5D,SAAUA,EAAS,oCACxD0B,EAAKM,EAAE,wB,sCCtBb,MAAM6B,EAAU,EACrBzD,WACAgB,eACI,yBAAKA,UAAW0C,IAAGzC,IAAO0C,QAAS3C,GAAYG,YAAWvB,EAAS,kBAChEI,ICFH,KACJ4D,GACE3B,IACS4B,EAAqB,EAChCC,WACAC,oBAEA,MAAMC,EAAaD,EAAgBzC,EAAKM,EAAE,gBAAkBN,EAAKM,EAAE,eACnE,OAAO,kBAACgC,EAAD,CAAME,SAAUA,EAAUC,cAAeA,GACrC,EACPE,eACAC,gBACI,0BAAMJ,SAAUG,EAAc9C,YAAWvB,EAAS,gCACxC,kBAAC6D,EAAD,KACI,kBAACd,EAAD,OAGJ,kBAACc,EAAD,KACI,kBAACV,EAAD,OAGJ,kBAACU,EAAD,KACI,kBAACb,EAAD,OAGJ,kBAAC,IAAD,CAAQuB,SAAO,EAAC1D,KAAK,SAAS2D,KAAMF,EAAa,kBAAC,IAAD,CAAgBG,OAAK,IAAM,KAAMC,SAAUJ,EAAYtE,SAAUA,EAAS,oCACtHoE,MAKzBH,EAAmBU,aAAe,CAChCR,cAAe,IChCjB,MACEH,KADI,GAEF3B,IACSuC,EAAwB,EACnCV,WACAC,oBAEA,MAAMC,EAAaD,EAAgBzC,EAAKM,EAAE,gBAAkBN,EAAKM,EAAE,eACnE,OAAO,kBAAC,EAAD,CAAMkC,SAAUA,EAAUC,cAAeA,GACrC,EACPE,eACAC,gBACI,0BAAMJ,SAAUG,EAAc9C,YAAWvB,EAAS,mCACxC,kBAAC6D,EAAD,KACI,kBAACd,EAAD,OAGJ,kBAACc,EAAD,KACI,kBAACV,EAAD,OAGJ,kBAACU,EAAD,KACI,kBAACvB,EAAD,OAGJ,kBAACuB,EAAD,KACI,kBAACZ,EAAD,OAGJ,kBAAC,IAAD,CAAQsB,SAAO,EAAC1D,KAAK,SAAS2D,KAAMF,EAAa,kBAAC,IAAD,CAAgBG,OAAK,IAAM,KAAMC,SAAUJ,EAAYtE,SAAUA,EAAS,uCACtHoE,MAKzBQ,EAAsBD,aAAe,CACnCR,cAAe,ICpCjB,MACEH,KADI,GAEF3B,IACSwC,EAAqB,EAChCX,WACAC,oBAEA,MAAMC,EAAaD,EAAgBzC,EAAKM,EAAE,gBAAkBN,EAAKM,EAAE,eACnE,OAAO,kBAAC,EAAD,CAAMkC,SAAUA,EAAUC,cAAeA,GACrC,EACPE,eACAZ,SACAa,gBACI,0BAAMJ,SAAUG,EAAc9C,YAAWvB,EAAS,gCACxC,kBAAC6D,EAAD,KACI,kBAACd,EAAD,OAGJ,kBAACc,EAAD,KACI,kBAACZ,EAAD,OAGHQ,EAAOD,WAAW7C,IAAI,CAACmE,EAAGC,IAAU,kBAACC,GAAD,CAAqBD,MAAOA,EAAOjE,IAAKiE,KAE7E,kBAAClB,EAAD,KACI,kBAAC,IAAD,KACKnC,EAAKM,EAAE,4FAIhB,kBAAC6B,EAAD,KACI,kBAACR,EAAD,OAGJ,kBAAC,IAAD,CAAQkB,SAAO,EAAC1D,KAAK,SAASb,SAAUA,EAAS,mCAAoC0E,SAAUJ,EAAYE,KAAMF,EAAa,kBAAC,IAAD,CAAgBG,OAAK,IAAM,MACpJL,MAKzBS,EAAmBF,aAAe,CAChCR,cAAe,CACbX,WAAY,K,sBC1ChB,MACEpB,MADI,EAEJgB,QAFI,GAGFf,IACE4C,GAA+BrC,YAAkBC,IAAQC,KAClDkC,GAAsB,EACjCD,YAEA,MAAM,OACJzB,EADI,SAEJC,GACEH,IAcJ,OAAO,yBAAK7B,YAAWvB,EAAS,iCACtB,kBAAC6D,EAAD,KACI,yBAAKzC,UAAWC,IAAO6D,YACnB,kBAAC,EAAD,CAAOlF,SAAUA,EAAS,oCAAqCoB,UAAWC,IAAO8D,SAAUlF,KAAI,qBAAgB8E,EAAhB,SAA8BvC,MAAOd,EAAKM,EAAE,OAAQS,UAAWC,IAAcC,SAAUsC,KAEtL,kBAAC,EAAD,CAAOjF,SAAUA,EAAS,sCAAuCoB,UAAWC,IAAO+D,WAAYnF,KAAI,qBAAgB8E,EAAhB,WAAgCvC,MAAOd,EAAKM,EAAE,SAAUS,UAAWC,IAAcC,SAAUsC,MAGlM,yBAAK7D,UAAWC,IAAOgE,eACnB,kBAAC,EAAD,CAAOrF,SAAUA,EAAS,yCAA0CoB,UAAWC,IAAOiE,SAAUzE,KAAK,WAAWZ,KAAI,qBAAgB8E,EAAhB,YAAiCvC,MAAOd,EAAKM,EAAE,kBAAmBS,UAAW8C,MAEjM,kBAAC,EAAD,CAAOvF,SAAUA,EAAS,0CAA2CoB,UAAWC,IAAOiE,SAAUzE,KAAK,WAAWZ,KAAI,qBAAgB8E,EAAhB,YAAiCvC,MAAOd,EAAKM,EAAE,UAAWS,UAAW8C,MAE1L,kBAAC,EAAD,CAAOvF,SAAUA,EAAS,+CAAgDoB,UAAWC,IAAOiE,SAAUzE,KAAK,WAAWZ,KAAI,qBAAgB8E,EAAhB,kBAAuCvC,MAAOd,EAAKM,EAAE,gBAAiBS,UAAW8C,OAG/M,kBAAC,IAAD,CAAQvF,SAAUA,EAAS,uCAAwCkC,QAAS,IA5BtD6C,KAClC,MAAM,WACJvB,GACED,IAAWE,OAGbH,EAAO,aADK,IAAVyB,EACmBvB,EAAWgC,MAAM,GAEjB,IAAIhC,EAAWgC,MAAM,EAAGT,MAAWvB,EAAWgC,MAAMT,EAAQ,MAoBWU,CAA4BV,IACzGrD,EAAKM,EAAE,6B,aCzCrB,MACM0D,GAA6B,UADU,oBACV,QAC7BC,GAAwB,KAAO,IAAD,EACzC,MAAMC,EAAUC,eACV,GACJC,GACEC,eACE,QACJC,EACAhF,MAAOiF,EACPC,KAAMC,GACJC,GAAoBN,IACjBO,GACLrF,MAAOsF,IACJC,MACEC,GACLxF,MAAOyF,IACJC,MACEC,GACL3F,MAAO4F,IACJC,KACCC,EAAYR,GAA2BG,GAA2BG,EAExE,GAAIZ,EACF,OAAO,oCACK,kBAAC7E,EAAD,KAAeO,EAAKM,EAAE,SACtB,kBAAC,IAAD,KACI,kBAAC,IAAD,QAKlB,GAAIiE,EAAW,CACb,MAAMc,EAAMrF,EAAKM,EAAE,gDACnB,OAAO,oCACK,kBAACb,EAAD,KAAeO,EAAKM,EAAE,SACtB,kBAAC,IAAD,CAAWhB,OAAK,EAACgG,MAAOD,GACnBd,EAAUrF,UAK7B,MAAMsF,EAMNC,GAAwC,kBAArBA,EAASc,QAAuB,CACjDA,QAASC,KAAKC,MAAMhB,EAASc,UAC3Bd,EACEiB,EAAW,OAAGlB,QAAH,IAAGA,GAAH,UAAGA,EAAMe,eAAT,aAAG,EAAepG,KAE7BqD,EAAWmD,UACf,MAAM5D,EAAM,6BAAQ6D,GAAR,IACVxB,GAAII,EAAKe,QAAQM,MAGnB,IACM9D,EAAO5C,OAAS2G,UACZnB,EAAmB5C,GAGvBA,EAAO5C,OAAS4G,UACZjB,EAAmB/C,GAGvBA,EAAO5C,OAAS6G,UACZf,EAAsBlD,GAG9BmC,EAAQ+B,KAAKC,IACb,MAAOC,GACP,OAAOC,QAAQC,OAAOF,KAI1B,OAAO,yBAAKtG,YAAWvB,EAAS,gCACtB,kBAACmB,EAAD,KAAeO,EAAKM,EAAE,kBACjB,OAAJkE,QAAI,IAAJA,OAAA,EAAAA,EAAMe,UAAW,yBAAK1F,YAAWvB,EAAS,6CAA8CgI,kBAAiB9B,EAAKe,QAAQM,KAC9GT,GAAa,kBAAC,IAAD,CAAW9F,OAAK,EAACgG,MAAOtF,EAAKM,EAAE,gDACpC8E,EAAUlG,SAGlBwG,IAAgBI,IAAgB,kBAAC3C,EAAD,CAAoBV,cAAe+B,EAAKe,QAAS/C,SAAUA,IAE3FkD,IAAgBK,IAAiB,kBAACxD,EAAD,CAAoBE,cAAe+B,EAAKe,QAAS/C,SAAUA,IAE5FkD,IAAgBM,IAAmB,kBAAC9C,EAAD,CAAuBT,cAAe+B,EAAKe,QAAS/C,SAAUA,OCxFzG+D,GAAgB,EAC3BC,qBACAC,kBACAC,WACAC,kBACAC,cACAC,yBAEA,MAAM3C,EAAUC,cAChB,OAAO,kBAAC,IAAD,CAAO7F,SAAUA,EAAS,2BACvB,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAeA,SAAUA,EAAS,oCAC9B,kBAAC,IAAD,CAAUwI,SAAUF,EAAaG,QAASP,KAE9C,kBAAC,IAAD,KAAgBxG,EAAKM,EAAE,SACvB,kBAAC,IAAD,KAAgBN,EAAKM,EAAE,SACvB,kBAAC,IAAD,KAAgBN,EAAKM,EAAE,oBACvB,kBAAC,IAAD,QAIR,kBAAC,IAAD,KACKoG,EAASzH,IAAIsG,IAAW,yBAAC,IAAD,CAAUnG,IAAKmG,EAAQM,IAAKvH,SAAUA,EAAS,+BAChE,kBAAC,IAAD,CAAWA,SAAUA,EAAS,oCAC1B,kBAAC,IAAD,CAAUS,MAAOwG,EAAQM,IAAKiB,SAAU,IAAMH,EAAgBpB,EAAQM,KAAMkB,QAASN,EAAgBO,SAASzB,EAAQM,KAAMvH,SAAUA,EAAS,gCAGnJ,kBAAC,IAAD,CAAWA,SAAUA,EAAS,gCACzBiH,EAAQhH,MAGb,kBAAC,IAAD,CAAWD,SAAUA,EAAS,gCCjCvC,aADmBa,EDmCcoG,EAAQpG,MCjC7Ca,EAAKM,EAAE,WAGH,eAATnB,EACKa,EAAKM,EAAE,cAGH,SAATnB,GAAoBA,EAIjBA,EAHEa,EAAKM,EAAE,YD4BM,kBAAC,IAAD,CAAWhC,SAAUA,EAAS,qCACzBiH,EAAQ0B,UAAYjH,EAAKM,EAAE,OAASN,EAAKM,EAAE,OAGhD,kBAAC,IAAD,CAAWhC,SAAUA,EAAS,mCAC1B,kBAAC,IAAD,MACMiH,EAAQ0B,WAAa,kBAAC,IAAD,CAAQ3I,SAAUA,EAAS,sCAAuCkC,QAAS,IAAMqG,EAAmBtB,EAAQM,MAC1H7F,EAAKM,EAAE,iBAGhB,kBAAC,IAAD,CAAQhC,SAAUA,EAAS,+BAAgCkC,QAAS,KACtF0D,EAAQ+B,KAAR,UD/CsC,oBC+CtC,YAAwDV,EAAQM,QAEzC7F,EAAKM,EAAE,YCnDVnB,W,yBCA3B,MAAM+H,GAAc,EACzBT,kBACAC,WACAS,qBACAN,qBACAO,iBAEA,MAAMZ,EAAqBC,EAAgBY,SAAWX,EAASW,OAuB/D,OAAO,yBAAK3H,UAAWC,KAAO2H,UAAWzH,YAAWvB,EAAS,yBAClD8I,GAAc,yBAAK1H,UAAWC,KAAO4H,mBAC9B,yBAAK7H,UAAWC,KAAO6H,kBACnB,kBAAC,IAAD,QAIZ,kBAACjB,GAAD,CAAeC,mBAAoBA,EAAoBE,SAAUA,EAAUD,gBAAiBA,EAAiBE,gBA5BjGvC,IACpB,GAAIqC,EAAgBO,SAAS5C,GAAK,CAChC,MAAMf,EAAQoD,EAAgBgB,UAAUC,GAASA,IAAUtD,GACrDuD,EAA+B,IAAVtE,EAAcoD,EAAgB3C,MAAM,GAAK,IAAI2C,EAAgB3C,MAAM,EAAGT,MAAWoD,EAAgB3C,MAAMT,EAAQ,IAC1I8D,EAAmBQ,QAEnBR,EAAmB,IAAIV,EAAiBrC,KAsB2GyC,mBAAoBA,EAAoBD,YAlB7K,KAChB,GAAKJ,EAMHW,EAAmB,QANI,CACvB,MAAMS,EAAgBlB,EAASzH,IAAI,EACjC4G,SACIA,GACNsB,EAAmBS,SC9BZ9B,GAAe,OACfC,GAAgB,UAChBC,GAAkB,a,YCDxB,MAAM6B,GAAmC,CAC9CC,SAAU,WACV3I,KAAM,SACNqF,KAAM,EACJjG,OACAwJ,WACAC,eAHI,CAKJ7I,KAAM,UACNZ,OACAwJ,WACAC,cCXSC,GAAqC,CAChDH,SAAU,WACV3I,KAAM,SACNqF,KAAM,EACJjG,OACAwJ,WACAG,YACAC,kBAJI,CAMJhJ,KAAM,aACNZ,OACAwJ,WACAG,YACAC,iBCmBSC,GAAkC,CAC7CN,SAAU,WACV3I,KAAM,SACNqF,KAd8B,EAC9BjG,OACA4J,cACArG,iBAH8B,CAK9B3C,KAAM,OACNZ,OACA4J,cACArG,gBC5BWuG,GAA0B,CACrCP,SAAU,WACV3I,KAAM,SACNiF,GAAI,EACFA,QACIA,GAYKkE,GAA4B,KACvC,MAAOhE,EAASiE,GAAc1J,oBAAS,IAChCS,EAAOkJ,GAAY3J,mBAAS,MAE7B4J,EAb2BC,IAAUtE,IAC3C,MAAMuE,EAAY,CAChBvE,MAEF,OAAOsE,EAAOE,OAAOP,GAAyB,CAC5CM,eAQ0BE,CADbC,gBAKTC,EAASC,IACbT,GAAW,GACJS,GAGHC,EAAU3J,IACdkJ,EAASlJ,GACTiJ,GAAW,IAUb,MAAO,CAPQ,EACbW,UAboBX,GAAW,GAgBxBnC,QAAQ+C,IAAID,EAAIjK,IAAIwJ,IAAsBW,KAAKL,GAAQM,MAAMJ,IAGtD,CACd3E,UACAhF,WCnCSgK,GAAgB,CAC3B/D,QAAS,CACPuC,SAAU,WACV1D,GAAI,EACFA,QACIA,IAGGM,GAAsBN,GAAMmF,aAAaD,GAAe,CACnEX,UAAW,CACTvE,Q,cCVG,MAAMoF,GAAiB,CAC5B9C,SAAU,CACRoB,SAAU,gBACV2B,OAAQ,EACNC,SACAC,aAEA,MAAMF,EAAS,GAUf,OARIC,IACFD,EAAOC,OAASA,GAGdC,IACFF,EAAOE,OAASA,GAGXF,KC3BAG,GAA+B,CAC1C9B,SAAU,mBACV3I,KAAM,UACNiF,GAAI,EACFA,QACIA,GCMKyF,GAA2BC,IACtC,MAAOxF,EAASiE,GAAc1J,oBAAS,IAChCS,EAAOkJ,GAAY3J,mBAAS,MAC7B6J,EAASI,eAoBf,MAAO,CAlBSH,IACd,MAAMoB,EAAY,6BAAQD,GAAR,IAChB1F,GAAIuE,EAAUvE,KAIhB,OAFAmE,GAAW,GACXC,EAAS,MACFE,EAAOE,OAAOmB,EAAc,CACjCpB,cACCS,KAAK5E,IACN+D,GAAW,GACJ/D,IACN6E,MAAM/J,IAGP,MAFAiJ,GAAW,GACXC,EAASlJ,GACHA,KAIO,CACfgF,UACAhF,WCpCS0K,GAAmC,CAC9ClC,SAAU,WACV1D,GAAI,EACFA,QACIA,EACNjF,KAAM,SACNqF,KAAM,EACJjG,OACAwJ,WACAC,eAHI,CAKJ7I,KAAM,UACNZ,OACAwJ,WACAC,cAGShD,GAAkC,IAAM6E,GAAyBG,ICjBjEC,GAAqC,CAChDnC,SAAU,WACV1D,GAAI,EACFA,QACIA,EACNjF,KAAM,SACNqF,KAAM,EACJjG,OACAwJ,WACAG,YACAC,kBAJI,CAMJhJ,KAAM,aACNZ,OACAwJ,WACAG,YACAC,iBAGShD,GAAqC,IAAM0E,GAAyBI,ICapEC,GAAkC,CAC7CpC,SAAU,WACV1D,GAAI,EACFA,QACIA,EACNjF,KAAM,UACNqF,KAjB8B,EAC9BjG,OACA4J,cACArG,iBAH8B,CAK9B3C,KAAM,OACNZ,OACA4J,cACArG,gBAWW+C,GAAkC,IAAMgF,GAAyBK,IC7BjEC,GAAuB,KAClC,MAAMjG,EAAUC,eACTiG,EAAaC,GAAkBxL,mBAASiH,KACxCnB,GACLrF,MAAOsF,ITsB0C0F,aAAgBlC,ISpBnE/I,EAAwBuF,GACxB,MAAOE,GACLxF,MAAOyF,IXL0CuF,aAAgBzC,IWOnExI,EAAwB0F,GACxB,MAAOE,GACL3F,MAAO4F,IVP6CoF,aAAgBrC,IUStE5I,EAAwB6F,GAExB,MAAM1C,EAAWmD,UACf,IACMyE,IAAgBtE,UACZnB,EAAmB5C,GAGvBqI,IAAgBrE,UACZjB,EAAmB/C,GAGvBqI,IAAgBpE,UACZf,EAAsBlD,GAG9BmC,EAAQ+B,KAAKC,IACb,MAAOC,GACP,OAAOC,QAAQC,OAAOF,KAI1B,OAAO,yBAAKtG,YAAWvB,EAAS,+BACtB,kBAACmB,EAAD,KAAeO,EAAKM,EAAE,gBAEtB,kBAAC6B,EAAD,KACI,kBAAC,IAAD,CAAmBrB,MAAOd,EAAKM,EAAE,QAASwG,SAAU,EAC5DyD,cACIF,EAAeE,GAAWA,SAAUH,EAAa9L,SAAUA,EAAS,2CAC5D,kBAAC,IAAD,CAAoBS,MAAO+G,GAAchF,MAAOd,EAAKM,EAAE,aAEvD,kBAAC,IAAD,CAAoBvB,MAAOgH,GAAejF,MAAOd,EAAKM,EAAE,aAExD,kBAAC,IAAD,CAAoBvB,MAAOiH,GAAiBlF,MAAOd,EAAKM,EAAE,kBAIlE,kBAAC6B,EAAD,KACKiI,IAAgBtE,IAAgB,kBAAC3C,EAAD,CAAoBX,SAAUA,IAE9D4H,IAAgBrE,IAAiB,kBAACxD,EAAD,CAAoBC,SAAUA,EAAUgI,kBAAkB,IAE3FJ,IAAgBpE,IAAmB,kBAAC9C,EAAD,CAAuBV,SAAUA,EAAUgI,kBAAkB,O,yBC/D1G,MAAMC,GAAc,EACzBC,WACAC,cACArM,SAAUsM,EACVC,aACAxK,gBACAyK,aACAC,mBAEO,yBAAKrL,UAAWC,KAAO2H,WACpB,kBAAC,IAAD,CAAazH,YAAWvB,EAAS,GAAD,OAAIsM,EAAJ,cAC5B,kBAAC,IAAD,CAAQ/H,SAAO,EAACrC,QAASqK,EAAY7H,SAAU8H,EAAYxM,SAAUA,EAAS,GAAD,OAAIsM,EAAJ,UACxEF,GAGL,kBAAC,IAAD,CAAQjK,aAAW,EAACD,QAASH,EAAe2C,SAAU+H,EAAezM,SAAUA,EAAS,GAAD,OAAIsM,EAAJ,aAClFD,K,yBCXd,MAAMzE,GAA2B,eAE3B8E,GAAoB,KAAO,IAAD,EACrC,MAAM9G,EAAUC,eAITsC,EAAiBU,GAAsBtI,mBAAS,KAChDoM,EAAkBC,GAAuBrM,oBAAS,IAEvDyF,QAAS6G,EACT7L,MAAO8L,EAFH,KAGJ5G,EACA6G,QAASC,GRcuBpC,KAAQ,IAAD,EAQ7B,wBAAaA,QAAb,IAAaA,OAAb,EAAaA,EAAKqC,KAAK,KAAvB,KAAZ,MACM5C,EAEF,GAEE,EAGFY,aAAaC,GAAgB,CAC/Bb,eAHAnE,KAAMC,GADR,EAEK+G,EAFL,yBAMMC,EAMNhH,GAAyC,kBAAtBA,EAASiC,SAAwB,CAClDA,SAAUlB,KAAKC,MAAMhB,EAASiC,WAC5BjC,EACED,EAAO0E,IAAG,OAAIuC,QAAJ,IAAIA,GAAJ,UAAIA,EAAY/E,gBAAhB,aAAI,EAAsBA,UAAW,CACnDA,SAAU,CACRA,SAAU+E,EAAW/E,SAASA,SAASiD,OAAO,EAC5C9D,SACIqD,EAAIlC,SAASnB,MAEnB4F,EACJ,OAAO,cACLjH,QACGgH,IQlDDE,IACGC,GACLrH,QAASsH,EACTtM,MAAOuM,IACJvD,MACEwD,GACLxH,QAASyH,EACTzM,MAAO0M,IPvBuC1B,aAAgBV,IOyC1DtF,EAAU6G,GAAuBS,GAAiBG,EAExD,GAAIzH,EACF,OAAO,oCACK,kBAAC7E,EAAD,KA1CyB,yBA2CzB,kBAAC,IAAD,KACI,kBAAC,IAAD,QAKlB,MAAMH,EAAQ8L,GAAqBS,GAAeG,EAElD,GAAI1M,EAAO,CACT,MAAM+F,EAAMrF,EAAKM,EAAE,kEACnB,OAAO,oCACK,kBAACb,EAAD,KAtDyB,yBAuDzB,kBAAC,IAAD,CAAWH,OAAK,EAACgG,MAAOD,GACnB/F,EAAMJ,UAKzB,OAAO,yBAAKQ,UAAWC,KAAO2H,UAAWzH,YAAWvB,EAAS,4BACnD,kBAACmB,EAAD,KA9D6B,yBAgE7B,2BACKO,EAAKM,EAAE,wQAGZ,kBAACmK,GAAD,CAAaC,SAAU1K,EAAKM,EAAE,eAAgBqK,YAAa3K,EAAKM,EAAE,mBAAoBhC,SAAS,0BAA0BuM,WAhEzG,IAAM3G,EAAQ+B,KFJE,oBEoEwH5F,cAAe,IAAM6K,GAAoB,GAAOJ,WAAYc,EAAeb,eAAgBtE,EAAgBY,QAAUuE,KAExQ,OAAJpH,QAAI,IAAJA,GAAA,UAAAA,EAAMkC,gBAAN,eAAgBA,WAAY,kBAACQ,GAAD,CAAaE,WAAY9C,EAASmC,gBAAiBA,EAAiBU,mBAAoBA,EAAoBT,SAAUlC,EAAKkC,SAASA,SAAUG,mBAvC1JzC,IAIzB0H,EAHkB,CAChB1H,OAE4BgF,KAAKkC,MAqC1BL,GAAoB,kBAAC9K,EAAD,CAAkCC,cAAe,IAAM8K,GAAoB,GAAQ7K,cAjD5F,KAIpBsL,EAHkB,CAChBzC,IAAKzC,IAE0B2C,KAAKkC,GACtCJ,GAAoB,Q,YCtCjB,MAAMe,GAA0BjM,IAAKM,EAAE,YAIjC4L,GAAwB,CAAC,CACpCnN,MAHwB,MAIxB+B,MAAOd,IAAKM,EAAE,QACb,CACDvB,MAAO,SACP+B,MAAOd,IAAKM,EAAE,WACb,CACDvB,MAAO,WACP+B,MAAOd,IAAKM,EAAE,aACb,CACDvB,MAAO,YACP+B,MAAOd,IAAKM,EAAE,cACb,CACDvB,MAAO,aACP+B,MAAOd,IAAKM,EAAE,eACb,CACDvB,MAAO,OACP+B,MAAOd,IAAKM,EAAE,SACb,CACDvB,MAAO,YACP+B,MAAOd,IAAKM,EAAE,eCvBH6L,GAAiB,KAC5B,MAAMC,EAAe,IAAIC,gBAAgBC,cAAcC,QACvD,MAAO,CACLC,OAAQJ,EAAaK,IAAI,WDFH,MCGtBC,YAAaN,EAAaK,IAAI,gBAAkB,GAChDE,KAAMC,SAASR,EAAaK,IAAI,SAAW,GAC3CI,SAAUD,SAASR,EAAaK,IAAI,aAAe,MCP1CK,GAAqBhD,IAChC,MAAMiD,EAAcC,OAAOC,KAAKnD,GAAOoD,OAAO,CAACC,EAAKC,KAClD,MAAMC,EAAavD,EAAMsD,GAOzB,OAJIC,KAFiC,WAAbD,GFDF,QEC2BC,IAG/CF,EAAIlH,KAAJ,UAAYmH,EAAZ,YAAwBC,IAGnBF,GACN,IAAI5B,KAAK,KACZ,MAAM,IAAN,OAAWwB,I,yBCFb,MACEzK,KADI,GAEJ5B,MAFI,IAGFC,IAEE2M,GAAS,EACbhJ,cAEA,MAAM,OACJkI,EADI,YAEJE,EAFI,SAGJG,GACEV,KACE1J,EAAgB,CACpB+J,SACAE,eAEIxI,EAAUC,cAgBhB,OAAO,yBAAKtE,YAAWvB,EAAS,4BAA6BoB,UAAWC,KAAO2H,WACrE,kBAAC,GAAD,CAAM9E,SAfc,EAC5BgK,SACAE,kBAEAxI,EAAQ+B,KAAK,CACXsG,OAAQO,GAAmB,CACzBN,SACAE,cACAG,WACAF,KAAM,OAMqClK,cAAeA,GACjD,EACTE,eACA4K,cACI,0BAAM/K,SAAUG,EAAcjD,UAAWC,KAAO6N,YACpC,kBAAC,GAAD,CAAOjP,KAAK,SAASwC,UAAW0M,IAAqBC,QAASxB,GAAuBpL,MAAOd,IAAKM,EAAE,oBAAqBqN,WAAW,UACnI,kBAAC,GAAD,CAAOpP,KAAK,cAAcwC,UAAWC,IAAcF,MAAOd,IAAKM,EAAE,0BAA2BZ,UAAWC,KAAOiO,iBAAkBD,WAAW,UAC3I,kBAAC,IAAD,CAAQE,OAAK,EAAC1O,KAAK,SAAS6D,SAAUsB,GAAWiJ,GAC5CvN,IAAKM,EAAE,eC9C9BwN,GAAW,CACfhG,SAAU,cACV3I,KAAM,SACNsK,OAAQ,EACNP,UADM,CAGNA,SAIE6E,GAAuB,EAC3BC,cACAC,iBAEA,MAAM,SACJ7P,GACEmB,qBAAWrB,IACR0K,GAAU0B,aAAgBwD,GAAU,CACzCG,aACAhF,QAAS3J,IACPlB,EAAS,CACPe,KAAM,WACND,QAASI,EAAMJ,aAIrB,OAAO,kBAAC,IAAD,CAAQuB,aAAW,EAACD,QAAS,IAAMoI,EAAO,CAC/CM,IAAK8E,EAAYzC,SACfvI,SAAiC,IAAvBgL,EAAY3G,QACfrH,IAAKM,EAAE,qB,6CC3BpB,MAAM4N,GAAe,CAAC,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,OAExDC,GAAa,EACjBxB,OACAyB,YACAvB,WACAwB,YAEA,MAAMC,EAAYC,KAAKC,KAAK7B,EAAO,GAAKE,EAAW,EAAGwB,GAChDI,EAAWF,KAAKC,IAAIF,EAAYzB,EAAW,EAAGwB,GAC9CK,EAAiBC,MAAMC,KAAK,CAChCvH,OAAQ+G,GACP,CAACS,EAAIC,KAAOA,EAAI,GAAGC,aAChB,OACJvC,EADI,YAEJE,GACEP,KACEjI,EAAUC,cAEV6K,EAAiBC,IACrB/K,EAAQ+B,KAAK,CACXsG,OAAQO,GAAmB,CACzBN,SACAE,cACAG,WACAF,KAAMsC,OAkBZ,OAAO,yBAAKvP,UAAWC,KAAO2H,WACpB,yBAAK5H,UAAWC,KAAOuP,eAClBlP,IAAKM,EAAE,QACR,kBAAC,IAAD,CAAc6O,OAAK,EAAC5E,SAAUsC,EAASkC,WAAYjI,SAhBnC,EAC5ByD,eAEArG,EAAQ+B,KAAK,CACXsG,OAAQO,GAAmB,CACzBN,SACAE,cACAG,SAAUtC,EACVoC,KAAM,OAQsFjN,UAAWC,KAAOyP,QACjGlB,GAAajP,IAAIoI,GAAU,kBAAC,IAAD,CAAoBjI,IAAKiI,EAAQtI,MAAOsI,EAAQvG,MAAOuG,MAEtFrH,IAAKM,EAAE,aAGZ,yBAAKZ,UAAWC,KAAOuP,eACnB,0BAAMxP,UAAWC,KAAO0P,SACnBrP,IAAKM,EAAE,kDAAmD,CACrEgO,YACAG,WACAJ,WAGM,kBAAC,IAAD,CAAQ3O,UAAWC,KAAO2P,eAAgBvM,OAAK,EAACC,SAAmB,IAAT2J,EAAYnM,QAAS,IAAMwO,EAAerC,EAAO,IACtG3M,IAAKM,EAAE,aAEZ,8BAAON,IAAKM,EAAE,SACd,kBAAC,IAAD,CAAc6O,OAAK,EAACxB,WAAW,QAAQpD,SAAUoC,EAAKoC,WAAYjI,SAAU,EACpFyD,cACIyE,EAAezE,GAAW7K,UAAWC,KAAOyP,QACnCV,EAAezP,IAAIsQ,GAAiB,kBAAC,IAAD,CAAoBnQ,IAAKmQ,EAAexQ,MAAOwQ,EAAezO,MAAOyO,MAE9G,8BAAOvP,IAAKM,EAAE,mBAAoB,CACxC8N,eAEM,kBAAC,IAAD,CAAQ1O,UAAWC,KAAO6P,WAAYzM,OAAK,EAACC,SAAU2J,IAASyB,EAAW5N,QAAS,IAAMwO,EAAerC,EAAO,IAC1G3M,IAAKM,EAAE,Y,yBC3E5B,MAAMwN,GAAW,CACfhG,SAAU,cACV1D,GAAI,EACFA,QACIA,EACNjF,KAAM,UAGFsQ,GAAkB,EACtBrL,KACA6J,iBAEA,MAAM,SACJ7P,GACEmB,qBAAWrB,IACR0K,GAAQ,QACbtE,EADa,MAEbhF,IACGgL,aAAgBwD,GAAU,CAC7BG,aACAhF,QAAS3J,IACPlB,EAAS,CACPe,KAAM,WACND,QAASI,EAAMJ,WAGnByJ,UAAW,CACTvE,QAGJ,OAAO,kBAAC,IAAD,CAAQrB,OAAK,EAACtC,aAAW,EAACD,QAASoI,EAAQ5F,SAAUsB,GAAWhF,GAC5DU,IAAKM,EAAE,YC5BdoP,GAAW,EACfC,WACAC,QACAC,cACA7B,cACA8B,qBAEA,MAAMC,EAAgB,IAAIC,IAAIhC,GACxBiC,EAAcN,EAAStI,OAAS,GAAK2G,EAAY3G,SAAWsI,EAAStI,OAErE6I,EAAS9L,IACT2L,EAAcI,IAAI/L,GACpB2L,EAAcK,OAAOhM,GAErB2L,EAAcM,IAAIjM,GAGpB0L,EAAenB,MAAMC,KAAKmB,KAa5B,OAAO,kBAAC,IAAD,KACG,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUhJ,QAASkJ,EAAanJ,SAdpC,KAEdgJ,EADEG,EACa,GAEAN,EAAS1Q,IAAI,EAC1BmF,QACIA,QAUQ,kBAAC,IAAD,KAAgBpE,IAAKM,EAAE,YACvB,kBAAC,IAAD,KAAgBN,IAAKM,EAAE,iBACvB,kBAAC,IAAD,KAAgBN,IAAKM,EAAE,WACvB,kBAAC,IAAD,KAAgBN,IAAKM,EAAE,WACvB,kBAAC,IAAD,KAAgBN,IAAKM,EAAE,SACvB,kBAAC,IAAD,KAAgBN,IAAKM,EAAE,aAG/B,kBAAC,IAAD,KACyB,IAApBqP,EAAStI,OAAe,kBAAC,IAAD,KACjB,kBAAC,IAAD,CAAWiJ,QAAQ,IAAI5Q,UAAWC,KAAO4Q,WACpCvQ,IAAKM,EAAE,yBAEFqP,EAAS1Q,IAAIC,GAAW,kBAAC,IAAD,CAAUE,IAAKF,EAAQkF,IACrD,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAU2C,QAASgJ,EAAcI,IAAIjR,EAAQkF,IAAK0C,SAAUoJ,EAAOM,KAAK,KAAMtR,EAAQkF,OAE1F,kBAAC,IAAD,KAAYlF,EAAQuR,MACpB,kBAAC,IAAD,KAAYvR,EAAQwR,YACpB,kBAAC,IAAD,KAAYxR,EAAQyR,WACpB,kBAAC,IAAD,KACKzR,EAAQ0R,KAAO1R,EAAQ0R,KAAKC,gBAAgB9I,SAAW/H,IAAKM,EAAE,YAEnE,kBAAC,IAAD,KACKwQ,KAAO5R,EAAQ6R,cAAcC,OAAO,4BAEzC,kBAAC,IAAD,KACI,kBAACvB,GAAD,CAAiBhP,aAAW,EAACsC,OAAK,EAACkL,WAAY4B,EAAazL,GAAIlF,EAAQkF,IAAxE,cAMpB,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAWkM,QAAQ,KACf,kBAACnC,GAAeyB,QC9ElCqB,GAAiB,IAAM,kBAAC,IAAD,KACrB,kBAAC,IAAD,KACI,kBAAC,IAAD,QCANC,GAAgB,EACpBhS,aACI,kBAAC,IAAD,CAAWI,OAAK,EAACgG,MAAOtF,IAAKM,EAAE,0CAC5BpB,G,yBCIT,MAAM4K,GAAQ,CACZqH,WAAY,CACVrJ,SAAU,cACV2B,OAAQ,EACNkD,OACAE,WACAH,cACAF,aAJM,CAMNG,OACAE,WACAH,cACAF,SACA9C,OAAQ,CAAC,KAAM,OAAQ,aAAc,YAAa,kCAClD,oBAKA0H,GAAkB,KACtB,MAAOpD,EAAa8B,GAAkBjR,mBAAS,KACzC,KACJ8N,EADI,SAEJE,EAFI,YAGJH,EAHI,OAIJF,GACEL,MACE,OACJkF,EADI,QAEJ/M,EAFI,MAGJhF,EAHI,KAIJkF,EAJI,QAKJ6G,GACE9B,aAAaO,GAAO,CACtBwH,MAAM,IAgBR,OARA9R,oBAAU,KACR6L,EAAQ,CACNsB,OACAE,WACAH,cACAF,YAED,CAACG,EAAME,EAAUH,EAAaF,IAC1B,yBAAK3M,YAAWvB,EAAS,0BACtB,kBAACmB,EAAD,KAAewM,IACf,yBAAKvM,UAAWC,KAAO4R,QACnB,kBAACjE,GAAD,CAAQhJ,QAASA,IACjB,kBAACyJ,GAAD,CAAsBE,WAjBZ,KACtB5C,IACAyE,EAAe,KAegD9B,YAAaA,KAEpE,8BACM1J,IAAY+M,IAAW,kBAACJ,GAAD,MACxB3R,IAAUgF,GAAW,kBAAC4M,GAAD,CAAehS,QAASI,EAAMJ,UACnDsF,GAAQ,kBAACkL,GAAD,CAAUC,SAAUnL,EAAK2M,WAAWK,YAAa5B,MAAOpL,EAAK2M,WAAWvB,MAAO5B,YAAaA,EAAa8B,eAAgBA,EAAgBD,YAAaxE,OCvElKoG,GAAyC,qBACzCC,GAAqC,iBACrCC,GAAwB,KACxBC,GAAoD,4BACpDC,GAA0B,OAC1BC,GAAqC,gBACrCC,GAA4B,aAC5BC,GAA4B,UAC5BC,GAAkC,eAClCC,GAA+B,YAC/BC,GAA+B,WAC/BC,GAAmC,oBACnCC,GAAqC,iBACrCC,GAAsD,gCACtDC,GAA0C,qBAC1CC,GAAqC,mBCRhD9Q,QADI,IAEFf,IACS8R,GAA+B,KAC1C,MAAM,OACJ7Q,EADI,SAEJC,GACEH,KAWJ,OAAO,kBAACS,EAAD,KACG,kBAAC,IAAD,CAAQ3B,QAVqB,KACrC,MACMkS,EAAkB,IADH7Q,IAAWE,OAAOqQ,IACG,CACxC7T,KAAM,GACNQ,MAAO,KAET6C,EAAOwQ,GAAkCM,IAIgBpU,SAAUA,EAAS,uCAC/D0B,EAAKM,EAAE,4BCzBXqS,GAAgB,CAC3B5T,MAAO,gBACP+B,MAAOd,EAAKM,EAAE,2BAEHsS,GAAyB,CACpC7T,MAAO,yBACP+B,MAAOd,EAAKM,EAAE,oCAEHuS,GAAuB,CAClC9T,MAAO,uBACP+B,MAAOd,EAAKM,EAAE,6BCLdI,MADI,IAEFC,IAOSmS,GAAe,EAC1BC,WACAzO,UACAzD,WACAmC,cACI,kBAAC,GAAD,CAAOA,SAAUA,EAAUnC,SAAUA,EAAUyD,QAASA,EAAShG,SAAUA,EAAS,sBAAuBC,KAN9E,UAMyGuC,MAAOd,EAAKM,EAAE,WAAYS,UAAW0M,IAAqBC,QAASqF,EAAU9R,SAAUG,IAAU4P,OAAQjS,IAAc,OAALA,QAAK,IAALA,OAAA,EAAAA,EAAOqF,KAAM,KAAMqB,MAAOrB,IAAE,CACxRA,SAEF0O,GAAa7P,aAAe,CAC1BD,UAAU,EACVsB,SAAS,EACTzD,UAAU,GCxBL,MAAMmS,GAAkB,CAC7BD,SAAU,CACRjL,SAAU,WACV2B,OAAQ,CACNC,OAAQ,CAAC,KAAM,eACfuJ,OAAQ,WCDDC,GAA2B,EACtCrS,eAEA,MAAM,QACJyD,EADI,MAEJhF,EAFI,KAGJkF,GDDsC+E,aAAayJ,ICKrD,GAFA3T,EAAwBC,GAEpBgF,EACF,OAAO,kBAACwO,GAAD,CAAcxO,SAAO,EAAC6O,mBAAiB,EAACtS,SAAUA,EAAUkS,SAAU,KAG/E,GAAIzT,EACF,OAAO,kBAACwT,GAAD,CAAcjS,SAAUA,EAAUmC,UAAQ,EAAC+P,SAAU,KAG9D,MAAM,SACJA,GACEvO,EAAKuO,SACHrF,EAAUqF,EAAS9T,IAAI,EAC3BmF,KACAgP,kBAF2B,CAI3BtS,MAAOsS,EACPrU,MAAOqF,KAET,OAAO,kBAAC0O,GAAD,CAAcjS,SAAUA,EAAUkS,SAAUrF,KAErDwF,GAAyBjQ,aAAe,CACtCpC,UAAU,GCnCL,MAAMwS,GAAiB,CAC5BC,QAAS,CACPxL,SAAU,WACV1D,GAAI,EACFA,QACIA,EACNqF,OAAQ,EACNC,SAAS,CAAC,KAAM,gBACd,MAFI,CAGNA,aCRO6J,GAAsB,CACjCC,aAAc,CACZ1L,SAAU,eACV2B,OAAQ,EACNP,UADM,CAGNS,OAAO,UAAD,OAAYT,EAAIqC,KAAK,KAArB,KACN7B,OAAQ,oCACRuJ,OAAQ,YAIDQ,GAAoB,CAAC/K,EAAQC,IAAcD,EAAOoB,MAAMyJ,GAAqB,CACxF5K,cACCS,KAAK5E,GAAI,6BAAUA,GAAV,IACVgP,aAAa,6BAAMhP,EAAKgP,cAAZ,IACVA,aAAchP,EAAKgP,aAAaA,aAAavU,IAAK,IAAD,IAAC,KAChDyU,GAD+C,EAE5ClI,EAF4C,6CAAC,gBAGtCA,GAHqC,IAK/CkI,KAAMA,EAAKC,QAAQ,MAAO,aCnBnBC,GAA6B,CAAClL,EAAQC,KACjD,MAAMkL,EAAa,6BAAQlL,GAAR,IACjBe,OAAQ,oBAEV,MFM0B,EAAChB,EAAQC,IAAcD,EAAOoB,MAAMuJ,GAAgB,CAC9E1K,cEPOmL,CAAapL,EAAQmL,GAAezK,KAAKJ,IAC9C,MAAM+J,EAAW/J,EAASsK,SACpB,gBACJS,GACEhB,EAIJ,OAHuBgB,EAAgB9U,IAAI,EACzC+U,iBACIA,EAAY5P,MAEjBgF,KAAK6K,IACN,IAAKA,EAAe5M,OAAQ,MAAO,GAInC,OAAOoM,GAAkB/K,EAHI,CAC3BQ,IAAK+K,QCVTvT,MADI,GAEJ4B,KAFI,GAGJZ,QAHI,gBAIJwS,IACEvT,IACSwT,GAAiD,EAC5DC,kBACAC,cAEA,MAAMC,EAAO5S,MACP,OACJK,GACEmS,MAEF9P,GAAImQ,GACFxS,EAAM,SACJ,QACJuC,EADI,MAEJhF,EAFI,KAGJkF,GDJ6C+P,KAC/C,MAAOjQ,EAASiE,GAAc1J,oBAAS,IAChCS,EAAOkJ,GAAY3J,mBAAS,OAC5B2F,EAAMgQ,GAAW3V,mBAAS,MAC3B6J,EAASI,eAETuC,EAAU1C,IACdJ,GAAW,GACXC,EAAS,MACFoL,GAA2BlL,EAAQC,GAAWS,KAAKoL,GAASnL,MAAMb,GAAUiM,QAAQ,IAAMlM,GAAW,KAS9G,OALA/I,oBAAU,KACR6L,EAAQ,CACNjH,GAAImQ,KAEL,IACI,CACLjQ,UACAhF,QACAkF,OACA6G,YCjBEqJ,CAAkCH,GACtClV,EAAwBC,GAGxB,MAAMqV,EClCW,EAACC,EAAMC,KACxB,IAAI9V,EAAQ,KACZ,MAAM+V,EAAWF,EAAKG,MAAM,KAE5B,KAAMF,aAAkB7H,QACtB,OAAOjO,EAGT,IAAK,IAAI+P,EAAI,EAAGkG,EAAMH,EAAQ/F,EAAIgG,EAASzN,SAAUyH,EAAG,CACtD,MAAMmG,EAAaD,EAAIF,EAAShG,IAChC,IAAKmG,EAAY,MAEjB,GAAInG,IAAMgG,EAASzN,OAAS,EAAG,CAC7BtI,EAAQkW,EACR,MAGFD,EAAMC,EAGR,OAAOlW,GDcgB0N,CAAI2H,EAAiBrS,GAGtCU,EAAgB,CACpByS,SAHsBC,kBAAQ,IAAMR,EAAiBA,EAAe,GAAK,IAAK,IAI9ES,gBAH6BD,kBAAQ,IAAMR,EAAiBA,EAAe7Q,MAAM,GAAK,GAAI,KAM5F,GAAIQ,EACF,OAAO,kBAAC,IAAD,KACK,kBAAC,IAAD,OAIVhF,GACF+U,IAGF,MAAM3G,EAAUlJ,EAAKgP,aAAaA,aAAavU,IAAI+U,IACjD,MAAM,KACJN,EADI,YAEJN,GACEY,EACJ,MAAO,CACLjV,MAAO2U,EACP5S,MAAOsS,KAULiC,EAAW,KACff,EAAK1S,OAAOwS,EAAiB,MAC7BC,KAGF,OAAO,kBAAC,GAAD,CAAM7R,SAXIT,IACf,MAAMuT,EAAU,UAAMvT,EAAOmT,UAAb,OAAwBnT,EAAOqT,iBAC/Cd,EAAK1S,OAAOwS,EAAiBkB,GAC7BjB,KAQ+B5R,cAAeA,GACrC,EACPE,kBACI,kBAAC,IAAD,KACU,kBAAC,IAAD,KAAa3C,EAAKM,EAAE,KAEpB,kBAAC,IAAD,KACI,0BAAMkC,SAAU+S,IAC9BA,EAAMC,kBACN7S,EAAa4S,KAEK,kBAACpT,EAAD,KACI,kBAAC,GAAD,CAAOtB,UAAQ,EAACtC,KAAK,kBAAkBuC,MAAOd,EAAKM,EAAE,gBAAiBS,UAAW0M,IAAqBC,QAASA,EAASzM,SAAUG,OAGtI,kBAACe,EAAD,KACI,kBAAC,GAAD,CAAOtB,UAAQ,EAACtC,KAAK,WAAWuC,MAAOd,EAAKM,EAAE,oBAAqBS,UAAW0M,IAAqBgI,aAAa,IAAI/H,QAAS,CAAC,CAChJ3O,MAAO,IACP+B,MAAO,KACN,CACD/B,MAAO,IACP+B,MAAO,SAIO,kBAACqB,EAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQhD,KAAK,SAAS0D,SAAO,GACxB7C,EAAKM,EAAE,SAGZ,kBAAC,IAAD,CAAQE,QAAS6T,GACZrU,EAAKM,EAAE,WAGZ,kBAAC,IAAD,CAAQE,QAAS6U,GACZrV,EAAKM,EAAE,kB,yBEtGhD,MACEI,MADI,IAEFC,IACS+U,GAA0C,EACrD1B,cACA2B,0BAEA,MAAOC,EAAaC,GAAkBhX,oBAAS,GACzCiC,EAAQ6U,EAAmB,UAAM3B,EAAYZ,YAAlB,YAAiCuC,EAAoBvC,aAArD,UAAwEY,EAAYZ,YAApF,YAAmGpT,EAAKM,EAAE,YACrIwV,EAAWC,GAAkB/B,EAAa2B,GAC1CpX,EAAI,UAAMuX,EAAN,SACJE,EAAW,UAAMF,EAAN,YACjB,OAAO,yBAAKpW,UAAWC,KAAO2H,WACpB,kBAAC,GAAD,CAAO5H,UAAWC,KAAOsW,MAAOnV,MAAOA,EAAOvC,KAAMA,EAAM2X,aAAc,CAC9EnX,OAAO,EACPO,OAAO,EACP6W,SAAS,EACTC,SAAS,IAEG,IAIL,IAJK,MACVC,EADU,KAEVC,GAEI,EADD9K,EACC,iCACJ,MAAMkI,EAAO2C,EAAMtX,MACnB,OAAO,oCACa,kBAACoD,EAAD,KACI,kBAAC,IAAD,iBAAkBqJ,EAAlB,CAAwB6K,MAAOA,EAAOC,KAAMA,EAAMhX,QAASgX,EAAKhX,UAGnEoU,GAAQ,oCACD,kBAAC,IAAD,CAAQlT,QAAS,IAAMqV,GAAe,IACjC7V,EAAKM,EAAE,mBAGXsV,GAAe,kBAACzB,GAAD,CAAgDC,gBAAiB4B,EAAa3B,QAAS,IAAMwB,GAAe,WAOhKH,GAAwCzS,aAAe,CACrD0S,oBAAqB,KACrBY,QAAS,I,yBC5CX,MAAM,QACJC,IACE7V,IACS8V,GAAuC,EAClDC,yBACI,6BACE,4BAAK1W,EAAKM,EAAE,sCAEZ,kBAACkW,GAAD,CAASN,aAAc,CAC3BS,QAAQ,EACRpJ,UAAU,IAED,EACPoJ,SACApJ,eAEA,GAAIA,EAAU,OAAO,+BACrB,MAAMqJ,EAAgBD,EAAOxE,IACvB0E,EAAW,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAeE,OACnC,OAAO,oCACYD,GAAe,kBAAC1U,EAAD,KACR,kBAAC,IAAD,CAAW7C,OAAK,EAACgG,MAAOtF,EAAKM,EAAE,uDAC1BuW,OAO7B,6BACKH,EAAoBzX,IAAI,EAC/B+U,cACA2B,yBAEO,kBAACxT,EAAD,CAASzC,UAAWC,KAAO0C,QAASjD,IAAK4U,EAAY5P,IAAZ,OAAiBuR,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAqBvR,KACpE,kBAACsR,GAAD,CAAyC1B,YAAaA,EAAa2B,oBAAqBA,QAKhHc,GAAqCxT,aAAe,CAClD8T,aAAa,GC3Cf,MACErW,MADI,IAEFC,IACE+M,GAAUV,OAAOjL,OAAOiV,GACjBC,GAAiC,IAAM,kBAAC,GAAD,CAAO3Y,SAAUA,EAAS,sBAAuBC,KAAMkT,GAAwC3Q,MAAOd,EAAKM,EAAE,uBAAwBS,UAAW0M,IAAqBC,QAASA,MCJhOhN,MADI,IAEFC,IACSuW,GAA6B,IAAM,kBAAC,GAAD,CAAO5Y,SAAUA,EAAS,uCAAwCC,KAAMiU,GAAoC1R,MAAOd,EAAKM,EAAE,mBAAoBS,UAAWoW,OCFvMzW,MADI,IAEFC,IACSyW,GAA6B,IAAM,kBAAC,GAAD,CAAO9Y,SAAUA,EAAS,oCAAqCC,KAAMmT,GAAoC5Q,MAAOd,EAAKM,EAAE,yDAA0DS,UAAWoW,OCF1OzW,MADI,IAEFC,IACS0W,GAAwC,IAAM,kBAAC,GAAD,CAAO/Y,SAAUA,EAAS,+CAAgDC,KAAMqT,GAAmD9Q,MAAOd,EAAKM,EAAE,iCAAkCS,UAAWoW,OCFvPzW,MADI,IAEFC,IACS2W,GAAmB,IAAM,kBAAC,GAAD,CAAOzW,UAAQ,EAACvC,SAAUA,EAAS,6BAA8BC,KAAMsT,GAAyB/Q,MAAOd,EAAKM,EAAE,QAASS,UAAWC,IAAcC,SAAUC,YAAkBC,IAAQC,QCFxNV,MADI,IAEFC,IACS4W,GAA4B,IAAM,kBAAC,GAAD,CAAOjZ,SAAUA,EAAS,mCAAoCC,KAAMuT,GAAoChR,MAAOd,EAAKM,EAAE,mBAAoBS,UAAWoW,MCPvLK,GAAmB,CAC9BzY,MAAO,mBACP+B,MAAOd,EAAKM,EAAE,qBAMHmX,GAAc,CACzB1Y,MAAO,cACP+B,MAAOd,EAAKM,EAAE,gBAEHoX,GAAe,CAC1B3Y,MAAO,eACP+B,MAAOd,EAAKM,EAAE,iBAEHqX,GAAsB,CACjC5Y,MAAO,sBACP+B,MAAOd,EAAKM,EAAE,wBAEHsX,GAAqC,CAChD7Y,MAAO,qCACP+B,MAAOd,EAAKM,EAAE,uCAEHuX,GAAiC,CAC5C9Y,MAAO,iCACP+B,MAAOd,EAAKM,EAAE,oCAEHwX,GAA4B,CACvC/Y,MAAO,4BACP+B,MAAOd,EAAKM,EAAE,+BCvBdI,MADI,IAEFC,IACE+M,GAAUV,OAAOjL,OAAOgW,GAAcC,KAAK,CAACC,EAAGC,IAC/CD,EAAEnX,MAAQoX,EAAEpX,OACN,EAGNmX,EAAEnX,MAAQoX,EAAEpX,MACP,EAGF,GAEIqX,GAAqB,EAChCnV,cACI,kBAAC,GAAD,CAAOA,SAAUA,EAAU1E,SAAUA,EAAS,4BAA6BC,KAAMwT,GAA2BjR,MAAOd,EAAKM,EAAE,UAAWS,UAAW0M,IAAqBC,QAASA,KACpLyK,GAAmBlV,aAAe,CAChCD,UAAU,GCpBZ,MACEtC,MADI,IAEFC,IACSyX,GAAwB,IAAM,kBAAC,GAAD,CAAO9Z,SAAUA,EAAS,+BAAgCC,KAAM2T,GAA8BpR,MAAOd,EAAKM,EAAE,mBAAoBS,UAAWC,OCHpLN,MADI,GAEJwT,aAFI,IAGFvT,IACEuV,GAAe,CACnBnU,QAAQ,GAEGsW,GAAsB,EACjCjU,KACAgP,cACAkF,gBAEA,MAAM,OACJvW,GACEmS,GAAa,CACfgC,kBAEIqC,EAAUxW,EAAOoQ,IAA8B/N,GASrD,OAAO,kBAAC,GAAD,CAAOvD,UAAQ,EAACtC,KAAI,UAAK4T,GAAL,YAAqC/N,GAAMtD,MAAOsS,EAAarS,UAAWC,IAAcgQ,OAAQ0C,IAAY,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAMA,OAAQ,GAAIjO,MAAO+S,GAAaD,EAAD,6BAO/JA,GAP+J,IAQtK7E,KAAM8E,IAR2K,CACjL9E,KAAM8E,EACNC,uBAAwB,CACtBrU,KACAgP,cACAkF,iB,yBC5BN,MACE5X,MADI,GAEJgB,QAFI,IAGFf,IACS+X,GAA+B,EAC1CrV,YAEA,MAAM,OACJzB,EADI,SAEJC,GACEH,KAQJ,OAAO,yBAAKtC,IAAKiE,EAAO3D,UAAWC,KAAO2H,WAChC,kBAAC,GAAD,CAAOzG,UAAQ,EAACnB,UAAWC,KAAOsW,MAAO3X,SAAUA,EAAS,SAAUwC,MAAOd,EAAKM,EAAE,0BAA2B/B,KAAI,UAAK6T,GAAL,YAAyC/O,EAAzC,UAAwDtC,UAAWC,IAAcC,SAAUG,MAE9M,kBAAC,GAAD,CAAOP,UAAQ,EAACnB,UAAWC,KAAOsW,MAAO3X,SAAUA,EAAS,SAAUwC,MAAOd,EAAKM,EAAE,2BAA4B/B,KAAI,UAAK6T,GAAL,YAAyC/O,EAAzC,WAAyDtC,UAAWC,IAAcC,SAAUG,MAEhN,kBAAC,IAAD,CAASN,MAAM,QACX,kBAAC,IAAD,CAAQpB,UAAWC,KAAOgZ,OAAQnY,QAZJ,KAC1C,MAAMoY,EAAe/W,IAAWE,OAAOqQ,IACjCM,EAAkB,IAAIkG,EAAa9U,MAAM,EAAGT,MAAWuV,EAAa9U,MAAMT,EAAQ,IACxFzB,EAAOwQ,GAAkCM,KAUxB1S,EAAKM,EAAE,eC1B1BI,MADI,IAEFC,IACSkY,GAA6B,IAAM,kBAAC,GAAD,CAAOva,SAAUA,EAAS,oCAAqCC,KAAM8T,GAAoCvR,MAAOd,EAAKM,EAAE,mBAAoBS,UAAWoW,OCFpMzW,MADI,IAEFC,IACSmY,GAA2C,IAAM,kBAAC,GAAD,CAAO3Z,KAAK,WAAWb,SAAUA,EAAS,2CAA4CC,KAAM+T,GAAqDxR,MAAOd,EAAKM,EAAE,oCAAqCS,UAAW8C,OCF3QnD,MADI,IAEFC,IACSoY,GAAiC,IAAM,kBAAC,GAAD,CAAOza,SAAUA,EAAS,wCAAyCC,KAAMgU,GAAyCzR,MAAOd,EAAKM,EAAE,wBAAyBS,UAAWoW,OCHtNzW,MADI,IAEFC,IACSqY,GAA2B,EACtCC,2BACAC,cAEO,oCACID,EAAyBha,IAAI,EACpC+U,iBACI,kBAAC,GAAD,CAAO5U,IAAK4U,EAAY5P,GAAI7F,KAAI,UAAK4T,GAAL,YAAqC6B,EAAY5P,IAAMtD,MAAOkT,EAAYZ,YAAarS,UAAWC,IAAcgQ,OAAQjS,IAAc,OAALA,QAAK,IAALA,OAAA,EAAAA,EAAO2U,OAAQ,KAAMjO,MAAOiO,IACjM,MAAMyF,EAAeD,EAASlF,EAAY5P,IAK1C,OAJc,6BAAQ+U,GAAR,IACZzF,KAAMA,GAAQ,GACdM,qBCjBK+B,GAAoB,CAAC/B,EAAa2B,KAC7C,MAAMyD,EAAgBpF,EAAY5P,GAC5BiV,EAAO,OAAG1D,QAAH,IAAGA,OAAH,EAAGA,EAAqBjC,KAGrC,OAAK2F,GAFyB,YAAZA,EAGV,GAAN,OAAUlH,GAAV,YAA0CiH,GAGtC,GAAN,OAAUjH,GAAV,YAA0CiH,EAA1C,YAA2DC,ICLhDC,GAAmC,EAC9CC,WACAnZ,gBACAC,mBAEO,kBAAC,IAAD,CAAO/B,SAAUA,EAAS,sCACvB,kBAAC,IAAD,KAAa0B,EAAKM,EAAE,wBACpB,kBAAC,IAAD,KACKiZ,GAAY,kBAAC,IAAD,KACL,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KAAgBvZ,EAAKM,EAAE,WAI/B,kBAAC,IAAD,KACKiZ,EAASta,IAAIua,GAAW,kBAAC,IAAD,CAAUpa,IAAKoa,EAAQpV,IACxC,kBAAC,IAAD,KAAYoV,EAAQpG,kBAK5C,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQ7S,WAAS,EAACC,QAASJ,EAAe9B,SAAUA,EAAS,6CACxD0B,EAAKM,EAAE,WAGZ,kBAAC,IAAD,CAAQuC,SAAO,EAACrC,QAASH,EAAe/B,SAAUA,EAAS,8CACtD0B,EAAKM,EAAE,sCC9B9B4T,aADI,IAEFvT,IACEuV,GAAe,CACnBtT,YAAY,EACZ2K,UAAU,GAECkM,GAAoB,KAC/B,MAAM,WACJ7W,EADI,SAEJ2K,GACE2G,GAAa,CACfgC,aADe,KAGjB,OAAO,kBAAC,IAAD,CAAQrT,SAAO,EAAC1D,KAAK,SAAS6D,SAAUuK,GAAY3K,EAAYE,KAAMF,EAAa,kBAAC,IAAD,CAAgBG,OAAK,IAAM,MAC1G/C,EAAKM,EAAE,mBCblB4T,aADI,IAEFvT,IACEuV,GAAe,CACnBwD,aAAa,EACbC,iBAAiB,GAENC,GAAe,KAC1B,MAAM,YACJF,EADI,gBAEJC,GACEzF,GAAa,CACfgC,aADe,KAGjB,OAAKyD,EACE,kBAACxX,EAAD,KACG,kBAAC,IAAD,CAAW7C,OAAK,EAACgG,MAAOtF,EAAKM,EAAE,oDAC1BoZ,IAHc,MCZlBG,GAAe,CAACC,EAAYC,IAAWD,IAAeC,EAAOhb,MCJ7Dib,GAA8B,CACzClS,SAAU,cACV3I,KAAM,SAYNqF,KAAM,EACJsV,aACAvb,OACA0b,UACAC,YACAC,UACAC,mBAEA,GAAIN,IAAetC,GAAiBzY,OAAS+a,IAAerC,GAAY1Y,MACtE,MAAO,CACL+a,aACAvb,OACA0b,WAIJ,GAAIH,IAAepC,GAAa3Y,OAAS+a,IAAenC,GAAoB5Y,MAC1E,MAAO,CACL+a,aACAvb,OACA2b,UAAW,CACT9V,GAAI8V,IAKV,GAAIJ,IAAelC,GAAmC7Y,OAAS+a,IAAehC,GAA0B/Y,MACtG,MAAO,CACL+a,aACAvb,OACA4b,WAIJ,GAAIL,IAAejC,GAA+B9Y,MAChD,MAAO,CACL+a,aACAvb,OACA4b,UACAC,gBAIJ,MAAM,IAAI/b,MAAJ,mDAAsDyb,EAAtD,QCzDGO,GAA8B,CACzCvS,SAAU,cACV3I,KAAM,SACNiF,GAAI,EACFA,QACIA,GAYKkW,GAA8B,KACzC,MAAOhW,EAASiE,GAAc1J,oBAAS,IAChCS,EAAOkJ,GAAY3J,mBAAS,MAE7B4J,EAb2BC,IAAUtE,IAC3C,MAAMuE,EAAY,CAChBvE,MAEF,OAAOsE,EAAOE,OAAOyR,GAA6B,CAChD1R,eAQ0BE,CADbC,gBAKTC,EAASC,IACbT,GAAW,GACJS,GAGHC,EAAU3J,IACdkJ,EAASlJ,GACTiJ,GAAW,IAUb,MAAO,CAPQ,EACbW,UAboBX,GAAW,GAgBxBnC,QAAQ+C,IAAID,EAAIjK,IAAIwJ,IAAsBW,KAAKL,GAAQM,MAAMJ,IAGtD,CACd3E,UACAhF,WC7CSib,GAAqC,CAChDC,WAAY,CACV1S,SAAU,cACV1D,GAAI,EACFA,QACIA,EACNqF,OAAQ,CACNC,OAAQ,aACRuJ,OAAQ,WCRDwH,GAAqB,CAChCC,YAAa,CACX5S,SAAU,cACV8H,OAAO,EACPnG,OAAQ,EACNP,OACE,MAFI,CAIN+J,OAAQ,QACRvJ,OAAQ,IACRC,OAAQT,EAAG,kBAAcA,EAAIqC,KAAK,KAAvB,UAAiCoP,OCN5C,WACJC,IACEC,IAEEC,GAAWzE,GAASA,EAEb0E,GAA+B,CAC1CjT,SAAU,cACV3I,KAAM,SACNiF,GAAI,EACF4W,eACIA,EAINxW,KAAO,IAAD,IAAC,UACLwW,GADI,yCAKKC,GAA2B,6BAAQF,IAAR,IACtCG,SAAS,IAEEC,GAAmB,EAC9BC,gBACAJ,YACAK,gBAAgBP,GAChBnH,WAAU,MAEV,MAAM,SACJvV,GACEmB,qBAAWrB,GACTwK,EAASI,eACf,OAAOH,IACL,MAAM2S,EAAe,CACnB3S,UAAU,6BAAM0S,EAAc1S,IAArB,IACPqS,eAGElN,EAAW6F,EAAUsH,GAA8BF,GACzD,OAAOrS,EAAOE,OAAOkF,EAAUwN,GAAclS,KAAKgS,GAAe/R,MAAM/J,IAGrE,GAFyC,WAAfA,EAAMH,KAET,CACrB,MAAMoc,EAAW,gCACXrc,EAAUI,EAAMJ,SAAWc,EAAKM,EAAEib,GACxC,MAAO,CACL,CAACX,IAAa1b,GAKlBd,EAAS,CACPe,KAAM,WACND,QAASI,EAAMJ,eCrDrBwB,MADI,IAEFC,IAES6a,GAAiB,EAC5BC,aACAnX,UACAzD,WACAmC,cACI,kBAAC,GAAD,CAAOA,SAAUA,EAAUnC,SAAUA,EAAUyD,QAASA,EAAShG,SAAUA,EAAS,wBAAyBC,KAN9E,YAM2GuC,MAAOd,EAAKM,EAAE,aAAcS,UAAW0M,IAAqBC,QAAS+N,EAAYxa,SAAUJ,GAAYO,MACvPoa,GAAevY,aAAe,CAC5BD,UAAU,EACVsB,SAAS,EACTzD,UAAU,GCjBL,MAAM6a,GAAoB,CAC/BD,WAAY,CACV3T,SAAU,aACV2B,OAAQ,CACNwJ,OAAQ,WCAD0I,GAA6B,EACxC9a,eAEA,MAAM,QACJyD,EADI,MAEJhF,EAFI,KAGJkF,GDFwC+E,aAAamS,ICMvD,GAFArc,EAAwBC,GAEpBgF,EACF,OAAO,kBAACkX,GAAD,CAAgB3a,SAAUA,EAAUyD,SAAO,EAAC6O,mBAAiB,EAACsI,WAAY,KAGnF,GAAInc,EACF,OAAO,kBAACkc,GAAD,CAAgB3a,SAAUA,EAAUmC,UAAQ,EAACyY,WAAY,KAGlE,MAAM,WACJA,GACEjX,EAAKiX,WACH/N,EAAU+N,EAAWxc,IAAI,EAC7BmF,KACAgP,kBAF6B,CAI7BtS,MAAOsS,EACPrU,MAAOqF,KAET,OAAO,kBAACoX,GAAD,CAAgB3a,SAAUA,EAAU4a,WAAY/N,KAEzDiO,GAA2B1Y,aAAe,CACxCpC,UAAU,GC1BZ,MACEyB,KADI,IAEF3B,IACEmJ,GAAQ,CACZ0Q,WAAY,CACV1S,SAAU,cACV1D,GAAI,EACF4W,eACIA,EACNvR,OAAQ,CACNC,OAAQ,CAAC,OAAQ,aAAc,kBAAmB,yBAI3CkS,GAAoC,EAC/CZ,YACAI,oBAEA,MAAMS,EAAgBV,GAAiB,CACrCH,YACAI,gBACAzH,SAAS,KAEL,QACJrP,EADI,MAEJhF,EAFI,KAGJkF,GACE+E,aAAaO,GAAO,CACtBnB,UAAW,CACTqS,eAIJ,GAAI1W,EACF,OAAO,kBAAC,IAAD,KACK,kBAAC,IAAD,OAId,GAAIhF,EAAO,CACT,MAAM+F,EAAMrF,EAAKM,EAAE,uDACnB,OAAO,kBAAC,IAAD,CAAWhB,OAAK,EAACgG,MAAOD,GAClB/F,EAAMJ,SAIrB,MAAM,KACJX,EADI,WAEJub,EAFI,gBAGJgC,EAHI,UAIJ5B,GACE1V,EAAKgW,WACH/X,EAAgB,CACpBlE,OACAub,aACAgC,kBACA5B,UAAWA,EAAU9V,IAEjBqX,EAAa,CAAC,CAClB1c,MAAOmb,EAAU9V,GACjBtD,MAAOoZ,EAAU3b,OAEnB,OAAO,kBAAC,GAAD,CAAMiE,SAAUqZ,EAAepZ,cAAeA,GAC1C,EACPE,kBACI,0BAAMH,SAAUG,EAAc9C,YAAWvB,EAAS,2CACxC,kBAAC6D,EAAD,KACI,kBAACmV,GAAD,OAGJ,kBAACnV,EAAD,KACI,kBAACgW,GAAD,CAAoBnV,UAAQ,KAGhC,kBAACb,EAAD,KACI,kBAACqZ,GAAD,CAAgBxY,UAAQ,EAACyY,WAAYA,KAGzC,kBAACtZ,EAAD,KACI,kBAAC+U,GAAD,OAGJ,kBAAC0C,GAAD,MACA,kBAACH,GAAD,UCvFlB/Y,MADI,IAEFC,IAESob,GAAe,EAC1BC,WACA1X,UACAzD,WACAmC,cACI,kBAAC,GAAD,CAAOA,SAAUA,EAAUnC,SAAUA,EAAUyD,QAASA,EAAShG,SAAUA,EAAS,sBAAuBC,KAN/E,UAMyGuC,MAAOd,EAAKM,EAAE,WAAYS,UAAW0M,IAAqBC,QAASsO,EAAU/a,SAAUJ,GAAYO,IAAU4P,OAAQjS,IAAc,OAALA,QAAK,IAALA,OAAA,EAAAA,EAAOqF,KAAM,KAAMqB,MAAOrB,IAAE,CACnSA,SAEF2X,GAAa9Y,aAAe,CAC1BD,UAAU,EACVsB,SAAS,EACTzD,UAAU,GCnBL,MAAMob,GAAiB,CAC5BD,SAAU,CACRlU,SAAU,WACV2B,OAAQ,EACNyS,mBAEA,MAAMzS,EAAS,CACbwJ,OAAQ,SAGV,GAA4B,qBAAjBiJ,EAA8B,CACvC,MAAMvS,EAASuS,EAAe,mCAAqC,sCACnEzS,EAAOE,OAASA,EAGlB,OAAOF,KCXA0S,GAA2B,EACtCtb,WACAqb,mBAEA,MAAMvT,EAAY,CAChBuT,iBAEI,QACJ5X,EADI,MAEJhF,EAFI,KAGJkF,GDKgC0X,IAAgB3S,aAAa0S,GAAgB,CAC/EtT,UAAW,CACTuT,kBCNEE,CAAqB,CACvBzT,cAIF,GAFAtJ,EAAwBC,GAEpBgF,EACF,OAAO,kBAACyX,GAAD,CAAclb,SAAUA,EAAUyD,SAAO,EAAC6O,mBAAiB,EAAC6I,SAAU,KAG/E,GAAI1c,EACF,OAAO,kBAACyc,GAAD,CAAclb,SAAUA,EAAUmC,UAAQ,EAACgZ,SAAU,KAG9D,MAAM,SACJA,GACExX,EAAKwX,SACHtO,EAAUsO,EAAS/c,IAAI,EAC3BmF,KACAgP,kBAF2B,CAI3BtS,MAAOsS,EACPrU,MAAOqF,KAET,OAAO,kBAAC2X,GAAD,CAAclb,SAAUA,EAAUmb,SAAUtO,KAErDyO,GAAyBlZ,aAAe,CACtCpC,UAAU,EAEVqb,kBAAcvB,GCnChB,MACErY,KADI,IAEF3B,IAEE0b,GAAiBC,GAAO,6BAAUA,GAAV,IAC5B,CAACnK,IAA+BnF,OAAOjL,OAAOua,EAAQnK,OAGlDrI,GAAQ,CACZ0Q,WAAY,CACV1S,SAAU,cACV1D,GAAI,EACF4W,eACIA,EACNvR,OAAQ,CACNC,OAAQ,CAAC,OAAQ,aAAc,YAAa,iBAAkB,qBAAsB,gBAAiB,4BAA6B,iBAClI,sGAAuG,sEAIhG6S,GAAiD,EAC5DvB,YACAI,oBAEA,MAAMS,EAAgBV,GAAiB,CACrCH,YACAI,gBACAC,cAAegB,MAGX,QACJ/X,EADI,MAEJhF,EAFI,KAGJkF,GACE+E,aAAaO,GAAO,CACtBnB,UAAW,CACTqS,eAIJ,GAAI1W,EACF,OAAO,kBAAC,IAAD,KACK,kBAAC,IAAD,OAId,GAAIhF,EAAO,CACT,MAAM+F,EAAMrF,EAAKM,EAAE,uDACnB,OAAO,kBAAC,IAAD,CAAWhB,OAAK,EAACgG,MAAOD,GAClB/F,EAAMJ,SAIrB,MAAM,KACJX,EADI,WAEJub,EAFI,QAGJK,EAHI,UAIJqC,EAJI,eAKJC,EALI,mBAMJC,EANI,cAOJC,EAPI,0BAQJC,EARI,eASJC,EACA3D,SAAU4D,GACRtY,EAAKgW,WACHtB,EAAW4D,EAAiB5P,OAAO,CAAC6P,EAAaxE,IAAd,aAAC,gBAA+BwE,GAAhC,IACvC,CAACxE,EAAQE,uBAAuBrU,IAAKmU,IACnC,IACE9V,EAAgB,CACpBlE,OACAub,aACAK,UACAqC,YACAC,iBACAC,qBACAC,gBACAC,4BACAC,iBACA3D,YAEI8D,EAAwB,CAC5Bje,MAAOob,EAAQ/V,GACftD,MAAOqZ,EAAQ/G,aAWX6J,EAJ0B9C,EAAQ+C,+BAA+Bje,IAAI,EACzEwZ,4BACIA,GAEwCxZ,IAAIwZ,IAChD,MAAM,GACJrU,EADI,YAEJgP,EAFI,UAGJkF,GACEG,EACE0E,EAAS,CACb/Y,KACAgP,cACAkF,aAEIC,EAAUW,EAAS9U,GAOzB,OALImU,IAEF4E,EAAO1H,aAAe8C,EAAQ7E,MAGzByJ,IAET,OAAO,kBAAC,GAAD,CAAM3a,SAAUqZ,EAAepZ,cAAeA,GAC1C,EACPE,kBACI,0BAAMH,SAAUG,GACN,kBAACR,EAAD,KACI,kBAACmV,GAAD,OAGJ,kBAACnV,EAAD,KACI,kBAACgW,GAAD,CAAoBnV,UAAQ,KAGhC,kBAACb,EAAD,KACI,kBAAC4Z,GAAD,CAAc/Y,UAAQ,EAACgZ,SAAU,CAACgB,MAGtC,kBAAC7a,EAAD,KACI,kBAACiW,GAAD,OAGJ,kBAACjW,EAAD,KACI,kBAACiV,GAAD,OAGJ,kBAACjV,EAAD,KACI,kBAAC4W,GAAD,OAGJ,kBAAC5W,EAAD,KACI,kBAACoV,GAAD,OAGJ,kBAACpV,EAAD,KACI,kBAACkV,GAAD,OAGJ,kBAAClV,EAAD,KACI,kBAAC0W,GAAD,OAGJ,4BAAK7Y,EAAKM,EAAE,6BAEX2c,EAAche,IAAIme,GAIxB,kBAACjb,EAAD,CAAS/C,IAAKge,EAAahZ,IACV,kBAACiU,GAAD,CAAqBjU,GAAIgZ,EAAahZ,GAAIgP,YAAagK,EAAahK,YAAakF,UAAW8E,EAAa9E,cAIrH,kBAACsB,GAAD,MACA,kBAACH,GAAD,UCxKlB/Y,MADI,IAEFC,IAES0c,GAAoB,EAC/BC,gBACAta,WACAsB,UACAzD,cACI,kBAAC,GAAD,CAAOmC,SAAUA,EAAUnC,SAAUA,EAAUyD,QAASA,EAAShG,SAAUA,EAAS,2BAA4BC,KAN9E,eAM8GuC,MAAOd,EAAKM,EAAE,iBAAkBS,UAAW0M,IAAqBC,QAAS4P,EAAerc,SAAUJ,GAAYO,IAAU4P,OAAQjS,IAAc,OAALA,QAAK,IAALA,OAAA,EAAAA,EAAOqF,KAAM,KAAMqB,MAAOrB,IAAE,CACzTA,SAEFiZ,GAAkBpa,aAAe,CAC/BD,UAAU,EACVsB,SAAS,EACTzD,UAAU,GCnBL,MAAM0c,GAAuB,CAClCD,cAAe,CACbxV,SAAU,gBACV2B,OAAQ,EACN+T,gBADM,CAGNvK,OAAQ,QACRtJ,OAAQ6T,EAAS,wBAAoBA,QAAc7C,MCH5C8C,GAAgC,EAC3C5c,WACA2c,gBACK,IAAD,EACJ,MAAM,QACJlZ,EADI,MAEJhF,EAFI,KAGJkF,EAHI,QAIJ6G,GDDqC,GACvCmS,YACAlM,UACI/H,aAAagU,GAAsB,CACvC5U,UAAW,CACT6U,aAEFlM,SCLIoM,CAA0B,CAC5BpM,MAAM,IASR,GAPAjS,EAAwBC,GACxBE,oBAAU,KACJge,GAAWnS,EAAQ,CACrBmS,eAED,CAACA,IAEAlZ,EACF,OAAO,kBAAC+Y,GAAD,CAAmB/Y,SAAO,EAACzD,SAAUA,EAAUyc,cAAe,KAGvE,GAAIhe,EACF,OAAO,kBAAC+d,GAAD,CAAmBra,UAAQ,EAACnC,SAAUA,EAAUyc,cAAe,KAGxE,IAAKE,IAAchZ,EACjB,OAAO,kBAAC6Y,GAAD,CAAmBra,UAAQ,EAACnC,SAAUA,EAAUyc,cAAe,KAGxE,MACM5P,IADoB,OAAJlJ,QAAI,IAAJA,GAAA,UAAAA,EAAM8Y,qBAAN,eAAqBA,gBAAiB,IAC9Bre,IAAI,EAChCmF,KACAgP,kBAFgC,CAIhCtS,MAAOsS,EACPrU,MAAOqF,KAET,OAAO,kBAACiZ,GAAD,CAAmBxc,SAAUA,EAAUyc,cAAe5P,KAE/D+P,GAA8Bxa,aAAe,CAC3CpC,UAAU,GC9CZ,MAAM8c,GAAyD,CAC7DnD,WAAY,CACV1S,SAAU,cACV1D,GAAI,EACFA,QACIA,EACNqF,OAAQ,CACNC,OAAQ,CAAC,IAAK,0BAA2B,sFACzCuJ,OAAQ,YCGZ3Q,KADI,IAEF3B,IA8BE0b,GAAiBC,GAAO,6BAAUA,GAAV,IAC5B,CAACnK,IAA+BnF,OAAOjL,OAAOua,EAAQnK,OAG3CyL,GAA6C,EACxD5C,YACAI,oBAEA,MACE9b,MAAOue,EACPrZ,KAAMsZ,IDxCuDC,ECyCT/C,EDzC2BzR,aAAaoU,GAAwD,CACtJhV,UAAW,CACTvE,GAAI2Z,MAFyDA,MC0C/D,MAAMvE,EAAO,OAAGsE,QAAH,IAAGA,OAAH,EAAGA,EAAatD,WACvBvB,EAAwB,OAAGO,QAAH,IAAGA,OAAH,EAAGA,EAASY,aAAanB,yBACjD4C,EAAgBV,GAAiB,CACrCH,YACAI,gBACAC,cAAegB,KAGjB,GAAIwB,EAAqB,CACvB,MAAMxY,EAAMrF,EAAKM,EAAE,6DACnB,OAAO,kBAAC,IAAD,CAAWhB,OAAK,EAACgG,MAAOD,GAClBwY,EAAoB3e,SAInC,IAAKsa,EACH,OAAO,kBAAC,IAAD,KACK,kBAAC,IAAD,OAId,MAAM/W,EA7DoB+W,KAC1B,MAAMjb,EAAOib,EAAQ3H,IACfsI,EAAUX,EAAQxH,IAClBoI,EAAeZ,EAAQvH,IACvBuK,EAAYhD,EAAQtH,IACpBuK,EAAiBjD,EAAQ9H,IACzBgL,EAAqBlD,EAAQjH,IAC7BoK,EAAgBnD,EAAQ1H,IACxB8K,EAA4BpD,EAAQ5H,IACpCiL,EAAiBrD,EAAQnH,IACzB6G,EAAWM,EAAQrH,IAA8BjF,OAAO,CAAC6P,EAAaxE,IAAd,aAAC,gBAA+BwE,GAAhC,IAC5D,CAACxE,EAAQvE,YAAY5P,IAAKmU,IACxB,IACJ,MAAO,CACL,CAAC1G,IAA0BtT,EAC3B,CAACwT,IAA4B8F,GAA+B9Y,MAC5D,CAACiT,IAA4BmI,EAC7B,CAAClI,IAAkCmI,EACnC,CAAClI,IAA+BsK,EAChC,CAAC9K,IAAqC+K,EACtC,CAAClK,IAA0CmK,EAC3C,CAAC5K,IAAqC6K,EACtC,CAAC/K,IAAoDgL,EACrD,CAACvK,IAAqCwK,EACtC,CAAC1K,IAA+B+G,IAqCZ8E,CAAoBxE,GACpCwD,EAAwB,CAC5Bje,MAAOya,EAAQW,QAAQ/V,GACvBtD,MAAO0Y,EAAQW,QAAQ/G,aAEnB6K,EAA6B,CACjClf,MAAOya,EAAQY,aAAahW,GAC5BtD,MAAO0Y,EAAQY,aAAahH,aAE9B,OAAO,kBAAC,GAAD,CAAM5Q,SAAUqZ,EAAepZ,cAAeA,GAC1C,EACPE,eACAZ,YACI,0BAAMS,SAAUG,EAAc9C,YAAWvB,EAAS,wDACxC,kBAAC6D,EAAD,KACI,kBAACmV,GAAD,OAGJ,kBAACnV,EAAD,KACI,kBAACgW,GAAD,CAAoBnV,UAAQ,KAGhC,kBAACb,EAAD,KACI,kBAAC4Z,GAAD,CAAc/Y,UAAQ,EAACgZ,SAAU,CAACgB,MAGtC,kBAAC7a,EAAD,KACI,kBAACkb,GAAD,CAAmBra,UAAQ,EAACsa,cAAe,CAACW,MAGhD,kBAAC9b,EAAD,KACI,kBAACiW,GAAD,OAGJ,kBAACjW,EAAD,KACI,kBAACiV,GAAD,OAGJ,kBAACjV,EAAD,KACI,kBAAC4W,GAAD,OAGJ,kBAAC5W,EAAD,KACI,kBAACoV,GAAD,OAGJ,kBAACpV,EAAD,KACI,kBAACkV,GAAD,OAGJ,kBAAClV,EAAD,KACI,kBAAC0W,GAAD,OAGHI,GAA4B,kBAAC9W,EAAD,KACrB,4BAAKnC,EAAKM,EAAE,gCAEZ,kBAAC0Y,GAAD,CAA0BC,yBAA0BA,EAA0BC,SAAUnX,EAAOoQ,OAGvG,kBAACyH,GAAD,MACA,kBAACH,GAAD,SCnIPyE,GAA0C,CACrD1D,WAAY,CACV1S,SAAU,cACV1D,GAAI,EACFA,QACIA,EACNqF,OAAQ,CACNC,OAAQ,CAAC,IAAK,gIACduJ,OAAQ,YCJZ3Q,KADI,GAEJkU,QAFI,IAGF7V,IAwDEwd,GAAiBC,GAA2Brc,IAChD,IAAIsc,GAAY,EAChB,MAAM1H,EAAS,GACT2H,EAAqBvc,EAAO0P,IAC5B8M,EAAoBxc,EAAOoQ,IAE3BqM,GADWD,EAAoBvR,OAAOyR,QAAQF,GAAqB,IACtC5U,OAAO,EAAEvG,GAC1CsQ,WACKA,GAgBP,GAdI4K,IAAuB3L,GAAc5T,OAASyf,EAAkBnX,UAAlB,OAA6B+W,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAyB/W,SACtGgX,GAAY,EACZ1H,EAAOxE,IAAgCwE,EAAOxE,KAAiC,GAC/EwE,EAAOxE,IAAgC,CACrC2E,OAAQ9W,EAAKM,EAAL,oCAAoCqS,GAAc7R,MAAlD,4CAEDwd,IAAuB1L,GAAuB7T,OAAUyf,EAAkBnX,SACnFgX,GAAY,EACZ1H,EAAOxE,IAAgCwE,EAAOxE,KAAiC,GAC/EnF,OAAO0R,OAAO/H,EAAOxE,IAA+B,CAClD2E,OAAQ9W,EAAKM,EAAL,oCAAoCsS,GAAuB9R,MAA3D,iDAIR0d,EAAkBnX,OAAQ,CAC5B,MAAMsX,EC7F0BzF,IACfA,EAAShM,OAAO,CAAC0R,EAAerG,EAASlV,KAC1D,MAAO9E,EAAMmV,GAAQ6E,EAGrB,GAF4BqG,EAAc5X,SAASzI,GAGjD,OAAOqgB,EAGT,MAAMC,EAAsB3F,EAASvP,OACrC,EAAEvG,EAAG0b,GAAUC,IACND,EAAQpL,OAASA,EAAKA,MAAQqL,IAAa1b,GAIpD,IAFsBwb,EAAoBxX,OAGxC,OAAOuX,EAGT,MAAMI,EAAuBH,EAAoB3R,OAAO,CAAC+R,GAAwBC,KACxE,IAAID,EAAuBC,GACjC,CAAC3gB,IACJ,MAAO,IAAIqgB,KAAkBI,IAC5B,IDsEkBG,CAAqBX,GAExC,GAAIG,EAAWtX,OAAQ,CACrBgX,GAAY,EACZ,MAAMe,EAAkB,GACxBT,EAAWU,QAAQC,IACjBF,EAAgBE,GAAa,CAC3B5L,KAAM1T,EAAKM,EAAE,uBAGjBqW,EAAOxE,IAAgCwE,EAAOxE,KAAiC,GAC/EnF,OAAO0R,OAAO/H,EAAOxE,IAA+BiN,IAIxD,OAAOf,EAAY1H,OAASgE,GAGxB0B,GAAiBC,IACrB,MAAMpD,EAAWoD,EAAQnK,IACnBoN,EAAoBvS,OAAOyR,QAAQvF,GAAUja,IAAI,EAAEmF,GACvDsP,OACA6C,UACAiJ,aACAC,gBAEA,MAAOrG,GAAiBhV,EAAG2Q,MAAM,KAC3B2K,EAAmB,CACvBhM,OACA8L,aACAxL,YAAa,CACX5P,GAAIgV,IAYR,OARI7C,IACFmJ,EAAiBnJ,QAAUA,GAGzBkJ,IACFC,EAAiBD,SAAWA,GAGvBC,IAET,OAAO,6BAAKpD,GAAZ,IACE,CAACnK,IAA+BoN,KAIvBI,GAA6B,EACxC3E,YACAI,gBACA9c,WACAshB,gCAEA,MACEtgB,MAAOue,EACPrZ,KAAMsZ,IDrIuC1Z,ECsIT4W,EDtIezR,aAAa2U,GAAyC,CAC3GvV,UAAW,CACTvE,SAF6CA,MCuI/C,MAAMoV,EAAO,OAAGsE,QAAH,IAAGA,OAAH,EAAGA,EAAatD,WACvBqB,EAAgBV,GAAiB,CACrCH,YACAI,gBACAC,cAAegB,KAGjB,GAAIwB,EAAqB,CACvB,MAAMxY,EAAMrF,EAAKM,EAAE,6DACnB,OAAO,kBAAC,IAAD,CAAWhB,OAAK,EAACgG,MAAOD,GAClBwY,EAAoB3e,SAInC,IAAKsa,EACH,OAAO,kBAAC,IAAD,KACK,kBAAC,IAAD,OAId,MAAMqG,EAAwB,CAC5B9gB,MAAOya,EAAO,QAAsBpV,GACpCtD,MAAO0Y,EAAO,QAAsBpG,aAEhC3Q,EAnKoB,EAAC+W,EAASoG,KACpC,MAAMrhB,EAAOib,EAAQ3H,IACfiI,EAAatC,GAAiBzY,MAC9BwV,EAAY,CAChBnQ,GAAIoV,EAAO,QAAsBpV,IAE7BoY,EAAYhD,EAAQtH,IACpBoM,EAAqBsB,GAA6BpG,EAAQ/H,KAA2CkB,GAAc5T,MACnH+gB,EAA+BtG,EAAQlH,IACvCmK,EAAiBjD,EAAQ9H,IACzBgL,EAAqBlD,EAAQjH,IAC7BoK,EAAgBnD,EAAQ1H,IACxB8K,EAA4BpD,EAAQ5H,IACpCiL,EAAiBrD,EAAQnH,IACzB6G,EAAWM,EAAQrH,IAA8BjF,OAAO,CAACC,GAC7DuG,OACA8L,aACAjJ,UACAkJ,WACAzL,kBAEA,MAAM5U,EAAMqgB,EAAW,GAAKzL,EAAY5P,GAA5B,UAAoC4P,EAAY5P,GAAhD,YAAsDqb,GAC5DlH,EAAU,CACd7E,OACA8L,aACAC,YAOF,OAJIlJ,IACFgC,EAAQhC,QAAUA,GAGb,6BAAKpJ,GAAZ,IACE,CAAC/N,GAAMmZ,KAER,IACGwH,EAAoBvG,EAAQpH,KAAqC,GACvE,MAAO,CACL,CAACP,IAA0BtT,EAC3B,CAACwT,IAA4B+H,EAC7B,QAAuBvF,EACvB,CAACrC,IAA+BsK,EAChC,CAAC/K,IAAyC6M,EAC1C,CAAChM,IAAsDwN,EACvD,CAACpO,IAAqC+K,EACtC,CAAClK,IAA0CmK,EAC3C,CAAC5K,IAAqC6K,EACtC,CAAC/K,IAAoDgL,EACrD,CAACvK,IAAqCwK,EACtC3D,WACA6G,sBAiHoB/B,CAAoBxE,EAASoG,GAC7CxB,EAA0B5E,EAAQS,QAAQlG,gBAAgB7G,OAAO,CAAC8S,GACtEhM,kBACK,IAAD,EACJ,MAAM2B,EAAmB,UAAG3B,EAAYiM,qBAAf,aAAG,EAA2BtK,oBAEvD,IAAKA,EACH,MAAO,IAAIqK,EAAiB,CAC1BhM,gBAIJ,MAAMkM,EAASvK,EAAoB1W,IAAIkhB,IAAG,CACxCnM,cACA2B,oBAAqBwK,KAEvB,MAAO,IAAIH,KAAoBE,IAC9B,IACH,OAAO,kBAAC,GAAD,CAAM1d,SAAUqZ,EAAepZ,cAAeA,EAAexB,SAAUkd,GAAeC,GAA0BlI,aAAc,IAC1H,EACPvT,eACA2R,UACI,0BAAM9R,SAAUG,EAAc9C,YAAWvB,GAC/B,kBAAC6D,EAAD,KACI,kBAACmV,GAAD,OAGJ,kBAACnV,EAAD,KACI,kBAACgW,GAAD,CAAoBnV,UAAQ,KAGhC,kBAACb,EAAD,KACI,kBAAC2Q,GAAD,CAAc9P,UAAQ,EAAC+P,SAAU,CAAC8M,MAGtC,kBAAC1d,EAAD,KACI,kBAAC8U,GAAD,OAGJ,kBAAC9U,EAAD,KACI,kBAAC2W,GAAD,OAGJ,kBAAC3W,EAAD,KACI,kBAACiW,GAAD,OAGJ,kBAACjW,EAAD,KACI,kBAACiV,GAAD,OAGJ,kBAACjV,EAAD,KACI,kBAAC4W,GAAD,OAGJ,kBAAC5W,EAAD,KACI,kBAACoV,GAAD,OAGJ,kBAACpV,EAAD,KACI,kBAACkV,GAAD,OAGJ,kBAAClV,EAAD,KACI,kBAAC0W,GAAD,OAGHuF,GAA2B,kBAAC3H,GAAD,CAAsCC,oBAAqB0H,IAEvF,6BACI,kDAEA,kBAAC,GAAD,CAASlI,aAAc,CACrCnU,QAAQ,IAEW,EACjBA,YACI,oCACqBA,EAAOqQ,IAAkCnT,IAAI,CAACmE,EAAGC,IAAU,kBAAClB,EAAD,CAAS/C,IAAKiE,GAClE,kBAACqV,GAAD,CAA8BrV,MAAOA,QAKzD,kBAACoP,GAAD,MAEA,kBAACtQ,EAAD,KACI,+BAIR,kBAACyX,GAAD,MACA,kBAACH,GAAD,SEzQP2G,GAAgC,EAC3CpF,YACAI,mBACI,kBAACuE,GAAD,CAA4BrhB,SAAUA,EAAS,0DAA2D0c,UAAWA,EAAWI,cAAeA,ICFxIiF,GAA4B,EACvCrF,YACAI,mBACI,kBAACuE,GAAD,CAA4BrhB,SAAUA,EAAS,sDAAuD0c,UAAWA,EAAWI,cAAeA,EAAewE,0BAA2BhN,GAAuB7T,QCPrMuhB,GAAmD,CAC9D9F,WAAY,CACV1S,SAAU,cACV1D,GAAI,EACFA,QACIA,EACNqF,OAAQ,CACNC,OAAQ,CAAC,IAAK,0BAA2B,wFACzCuJ,OAAQ,YCEZ3Q,KADI,IAEF3B,IA8BE0b,GAAiBC,GAAO,6BAAUA,GAAV,IAC5B,CAACnK,IAA+BnF,OAAOjL,OAAOua,EAAQnK,OAG3CoO,GAAyC,EACpDvF,YACAI,oBAEA,MAAM,MACJ9b,EACAkF,MACEgW,WAAYhB,GACV,KDzCqDpV,EC0CT4W,ED1CezR,aAAa+W,GAAkD,CAChI3X,UAAW,CACTvE,SAFyDA,MC2C3D,MAAMyX,EAAgBV,GAAiB,CACrCH,YACAI,gBACAC,cAAegB,KAGjB,GAAI/c,EAAO,CACT,MAAM+F,EAAMrF,EAAKM,EAAE,6DACnB,OAAO,kBAAC,IAAD,CAAWhB,OAAK,EAACgG,MAAOD,GAClB/F,EAAMJ,SAIrB,IAAKsa,EACH,OAAO,kBAAC,IAAD,KACK,kBAAC,IAAD,OAId,MAAMwD,EAAwB,CAC5Bje,MAAOya,EAAQW,QAAQ/V,GACvBtD,MAAO0Y,EAAQW,QAAQ/G,aAEnB6K,EAA6B,CACjClf,MAAOya,EAAQY,aAAahW,GAC5BtD,MAAO0Y,EAAQY,aAAahH,aAExB6F,EAA2BO,EAAQY,aAAanB,yBAChDxW,EAtEoB+W,KAC1B,MAAMjb,EAAOib,EAAQ3H,IACfsI,EAAUX,EAAQxH,IAClBoI,EAAeZ,EAAQvH,IACvBuK,EAAYhD,EAAQtH,IACpBuK,EAAiBjD,EAAQ9H,IACzBgL,EAAqBlD,EAAQjH,IAC7BoK,EAAgBnD,EAAQ1H,IACxB8K,EAA4BpD,EAAQ5H,IACpCiL,EAAiBrD,EAAQnH,IACzB6G,EAAWM,EAAQrH,IAA8BjF,OAAO,CAAC6P,EAAaxE,IAAd,aAAC,gBAA+BwE,GAAhC,IAC5D,CAACxE,EAAQvE,YAAY5P,IAAKmU,IACxB,IACJ,MAAO,CACL,CAAC1G,IAA0BtT,EAC3B,CAACwT,IAA4B+F,GAA0B/Y,MACvD,CAACiT,IAA4BmI,EAC7B,CAAClI,IAAkCmI,EACnC,CAAClI,IAA+BsK,EAChC,CAAC9K,IAAqC+K,EACtC,CAAClK,IAA0CmK,EAC3C,CAAC5K,IAAqC6K,EACtC,CAAC/K,IAAoDgL,EACrD,CAACvK,IAAqCwK,EACtC,CAAC1K,IAA+B+G,IA8CZ8E,CAAoBxE,GAC1C,OAAO,kBAAC,GAAD,CAAM/W,cAAeA,EAAeD,SAAUqZ,GAC1C,EACPlZ,eACAZ,YAEO,0BAAMS,SAAUG,GACL,kBAACR,EAAD,KACI,kBAACmV,GAAD,OAGJ,kBAACnV,EAAD,KACI,kBAACgW,GAAD,CAAoBnV,UAAQ,KAGhC,kBAACb,EAAD,KACI,kBAAC4Z,GAAD,CAAc/Y,UAAQ,EAACgZ,SAAU,CAACgB,MAGtC,kBAAC7a,EAAD,KACI,kBAACkb,GAAD,CAAmBra,UAAQ,EAACsa,cAAe,CAACW,MAGhD,kBAAC9b,EAAD,KACI,kBAACiW,GAAD,OAGJ,kBAACjW,EAAD,KACI,kBAACiV,GAAD,OAGJ,kBAACjV,EAAD,KACI,kBAAC4W,GAAD,OAGJ,kBAAC5W,EAAD,KACI,kBAACoV,GAAD,OAGJ,kBAACpV,EAAD,KACI,kBAACkV,GAAD,OAGJ,kBAAClV,EAAD,KACI,kBAAC0W,GAAD,OAGHI,GAA4B,kBAAC9W,EAAD,KACrB,4BAAKnC,EAAKM,EAAE,gCAEZ,kBAAC0Y,GAAD,CAA0BC,yBAA0BA,EAA0BC,SAAUnX,EAAOoQ,OAGvG,kBAACyH,GAAD,MACA,kBAACH,GAAD,UC/HtBnX,KADI,IAEF3B,IACEmJ,GAAQ,CACZ0Q,WAAY,CACV1S,SAAU,cACV1D,GAAI,EACF4W,eACIA,EACNvR,OAAQ,CACNC,OAAQ,CAAC,OAAQ,aAAc,kBAAmB,yBAI3C8W,GAA6B,EACxCxF,YACAI,oBAEA,MAAMS,EAAgBV,GAAiB,CACrCH,YACAI,gBACAzH,SAAS,KAEL,QACJrP,EADI,MAEJhF,EAFI,KAGJkF,GACE+E,aAAaO,GAAO,CACtBnB,UAAW,CACTqS,eAIJ,GAAI1W,EACF,OAAO,kBAAC,IAAD,KACK,kBAAC,IAAD,OAId,GAAIhF,EAAO,CACT,MAAM+F,EAAMrF,EAAKM,EAAE,uDACnB,OAAO,kBAAC,IAAD,CAAWhB,OAAK,EAACgG,MAAOD,GAClB/F,EAAMJ,SAIrB,MAAM,KACJX,EADI,WAEJub,EAFI,gBAGJgC,EAHI,UAIJ5B,GACE1V,EAAKgW,WACH/X,EAAgB,CACpBlE,OACAub,aACAgC,kBACA5B,UAAWA,EAAU9V,IAEjBqX,EAAa,CAAC,CAClB1c,MAAOmb,EAAU9V,GACjBtD,MAAOoZ,EAAU3b,OAEnB,OAAO,kBAAC,GAAD,CAAMiE,SAAUqZ,EAAepZ,cAAeA,GAC1C,EACPE,kBACI,0BAAMH,SAAUG,EAAc9C,YAAWvB,EAAS,wCACxC,kBAAC6D,EAAD,KACI,kBAACmV,GAAD,OAGJ,kBAACnV,EAAD,KACI,kBAACgW,GAAD,CAAoBnV,UAAQ,KAGhC,kBAACb,EAAD,KACI,kBAACqZ,GAAD,CAAgBxY,UAAQ,EAACyY,WAAYA,KAGzC,kBAACtZ,EAAD,KACI,kBAAC+U,GAAD,OAGJ,kBAAC0C,GAAD,MACA,kBAACH,GAAD,SC7EPgH,GAA0B,UADU,mBACV,QAC1BC,GAAqB,KAChC,MAAMxc,EAAUC,eACV,GACJC,GACEC,eACE,QACJC,EADI,MAEJhF,EAFI,KAGJkF,GxBZ4CJ,IAAMmF,aAAagR,GAAoC,CACrG5R,UAAW,CACTvE,QwBWEuc,CAAiCvc,GAErC,GAAIE,EACF,OAAO,kBAAC,IAAD,KACK,kBAAC,IAAD,OAId,GAAIhF,EAAO,CACT,MAAM+F,EAAMrF,EAAKM,EAAE,gDACnB,OAAO,kBAAC,IAAD,CAAWhB,OAAK,EAACgG,MAAOD,GAClB/F,EAAMJ,SAIrB,MAAM4a,EAAU,OAAGtV,QAAH,IAAGA,OAAH,EAAGA,EAAMgW,WAAWzI,IAC9B6O,EAAW/G,GAAarJ,KAAK,KAAMsJ,GAEzC,OAAO,6BACG,kBAACra,EAAD,KAAeO,EAAKM,EAAE,iBAErBwZ,GAAc8G,EAASpJ,KAAqB,kBAAC4I,GAAD,CAA+BpF,UAAW5W,EAAIgX,cAAe,IAAMlX,EAAQ+B,KAAK4a,MAE5H/G,GAAc8G,EAASnJ,KAAgB,kBAAC4I,GAAD,CAA2BrF,UAAW5W,EAAIgX,cAAe,IAAMlX,EAAQ+B,KAAK4a,MAEnH/G,GAAc8G,EAASlJ,KAAiB,kBAAC8I,GAAD,CAA4BxF,UAAW5W,EAAIgX,cAAe,IAAMlX,EAAQ+B,KAAK4a,MAErH/G,GAAc8G,EAAS/I,KAAmC,kBAAC+F,GAAD,CAA4C5C,UAAW5W,EAAIgX,cAAe,IAAMlX,EAAQ+B,KAAK4a,MAEvJ/G,GAAc8G,EAASjJ,KAAwB,kBAACiE,GAAD,CAAmCZ,UAAW5W,EAAIgX,cAAe,IAAMlX,EAAQ+B,KAAK4a,MAEnI/G,GAAc8G,EAAS9I,KAA8B,kBAACyI,GAAD,CAAwCvF,UAAW5W,EAAIgX,cAAe,IAAMlX,EAAQ+B,KAAK4a,MAE9I/G,GAAc8G,EAAShJ,KAAuC,kBAAC2E,GAAD,CAAgDvB,UAAW5W,EAAIgX,cAAe,IAAMlX,EAAQ+B,KAAK4a,SC9C1Kve,KADI,GAEJZ,QAFI,IAGFf,IA6BEmgB,GAAa,EACjBne,eACAC,iBA5ByB,MACzB,MAAM0R,EAAO5S,MACNqf,EAAYC,GAAiBniB,mBAASyV,EAAKzS,WAAWE,QAC7DvC,oBAAU,IAAM8U,EAAK2M,UAAU,EAC7Blf,aAEAuS,EAAK4M,MAAM,KACT,MAAMpH,EAAa/X,EAAOgQ,IACpBoI,EAAUpY,EAAM,QAChBqY,EAAerY,EAAM,aACrBof,EAAcJ,EAAU,QACxBK,EAAiBL,EAAWhP,IAKlCqI,IAJuB+G,GAAehH,IAAYgH,GACxBC,GAAkBtH,IAAesH,IAIzD9M,EAAK1S,Od3B2B,ec2BM,QAG1Cof,EAAcjf,IACb,CACDA,QAAQ,IACN,CAACgf,KASLM,GACA,MAAM/M,EAAO5S,MACP,OACJK,GACEuS,EAAKzS,WACHiY,EAAa/X,EAAOgQ,IACpBoI,EAAUpY,EAAM,QAChBuf,EAAmBxH,IAAetC,GAAiBzY,OAAS+a,IAAerC,GAAY1Y,MACvFwiB,EAAqBzH,IAAepC,GAAa3Y,OAAS+a,IAAenC,GAAoB5Y,MAC7FyiB,EAAmB1H,IAAelC,GAAmC7Y,OAAS+a,IAAejC,GAA+B9Y,OAAS+a,IAAehC,GAA0B/Y,MAC9K0iB,EAAwB3H,IAAejC,GAA+B9Y,MACtEmd,EACNpC,IAAehC,GAA0B/Y,YAAgB4b,EACzD,OAAO,6BACG,kBAAClb,EAAD,KAAeO,EAAKM,EAAE,gBACtB,0BAAMkC,SAAUG,GACZ,kBAACR,EAAD,KACI,kBAACmV,GAAD,OAGJ,kBAACnV,EAAD,KACI,kBAACgW,GAAD,OAGHmJ,GAAoB,kBAACnf,EAAD,KACb,kBAAC+Q,GAAD,OAGPqO,GAAsB,kBAACpf,EAAD,KACf,kBAACwZ,GAAD,OAGP6F,GAAoB,kBAACrf,EAAD,KACb,kBAACga,GAAD,CAA0BD,aAAcA,KAG/CuF,GAAyB,kBAACtf,EAAD,KAClB,kBAACsb,GAAD,CAA+BD,UAAWrD,GAAW,MAG7D,kBAAC,IAAD,CAAQtX,SAAO,EAAC1D,KAAK,SAAS2D,KAAMF,EAAa,kBAAC,IAAD,CAAgBG,OAAK,IAAM,KAAMC,SAAUJ,GACvF5C,EAAKM,EAAE,mBAUfohB,GAAoB,KAC/B,MAAOC,G3BxCwCrX,aAAgB0P,I2B4C/D,OAAO,kBAAC,GAAD,CAAMxX,SAFIT,GAAU4f,EAAiB5f,IAGjC,EACPY,eACAC,gBACI,kBAACke,GAAD,CAAYne,aAAcA,EAAcC,WAAYA,M,yBCnGvD,MAAMgf,GAAyB5hB,EAAKM,EAAE,YAChCugB,GAAwB,cACxBgB,GAAiB,KAAO,IAAD,QAClC,MAAM3d,EAAUC,eAIT2d,EAAoBC,GAAyBljB,mBAAS,KACtDmjB,EAA8BC,GAAmCpjB,oBAAS,IAE/EyF,QAAS4d,EACT5iB,MAAO6iB,EAFH,KAGJ3d,EAHI,QAIJ6G,GzBTyC9B,aAAakR,KyBWjD2H,GACL9d,QAASsH,EACTtM,MAAOuM,IACJyO,KAEL,GAAI4H,EACF,OAAO,yBAAKriB,YAAWvB,EAAS,yBACpB,kBAACmB,EAAD,KAAemiB,IACf,kBAAC,IAAD,KACI,kBAAC,IAAD,QAKlB,MAAMtiB,EAAQ6iB,GAAwBtW,EAEtC,GAAIvM,EAAO,CACT,MAAM+F,EAAMrF,EAAKM,EAAE,kEACnB,OAAO,yBAAKT,YAAWvB,EAAS,yBACpB,kBAACmB,EAAD,KAAemiB,IACf,kBAAC,IAAD,CAAWtiB,OAAK,EAACgG,MAAOD,GACnB/F,EAAMJ,UAKzB,MAiDMmjB,EAAaP,EAAmBza,UAAnB,OAA8B7C,QAA9B,IAA8BA,GAA9B,UAA8BA,EAAMkW,mBAApC,iBAA8B,EAAmBA,mBAAjD,aAA8B,EAAgCrT,QACjF,OAAO,yBAAKxH,YAAWvB,EAAS,yBACtB,kBAACmB,EAAD,KAAemiB,IAEf,kBAACnX,GAAD,CAAaC,SAAU1K,EAAKM,EAAE,eAAgBqK,YAAa3K,EAAKM,EAAE,mBAAoBhC,SAAS,uBAAuBuM,WAzFtG,IAAM3G,EAAQ+B,KDAD,mBCyFwH5F,cAAe,IAAM4hB,GAAgC,GAAOnX,WAAYc,EAAeb,eAAgB+W,EAAmBza,QAAUuE,IAExRoW,GAAgC,kBAAC1I,GAAD,CAAkCC,SAAUuI,EAAoB1hB,cAAe,IAAM6hB,GAAgC,GAAQ5hB,cAlBlJsF,UACpB,MAAMuD,EAAM4Y,EAAmB7iB,IAAI,EACjCmF,QACIA,SACAge,EAAkB,CACtBlZ,QAEF6Y,EAAsB,IACtBE,GAAgC,GAChC5W,OAWQ,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUtE,QAASsb,EAAYvb,SA7D9B,KAAO,IAAD,EAC/B,MAAM4T,EAAW,OAAGlW,QAAH,IAAGA,GAAH,UAAGA,EAAMkW,mBAAT,aAAG,EAAmBA,YAElCA,IAIDoH,EAAmBza,SAAWqT,EAAYrT,OAC5C0a,EAAsB,IAEtBA,EAAsBrH,EAAYzb,IAAI,EACpCmF,KACAgP,kBAFoC,CAIpChP,KACAgP,uBAgDgB,kBAAC,IAAD,KAAgBpT,EAAKM,EAAE,gBACvB,kBAAC,IAAD,KAAgBN,EAAKM,EAAE,WACvB,kBAAC,IAAD,QAGR,kBAAC,IAAD,YACKkE,QADL,IACKA,GADL,UACKA,EAAMkW,mBADX,iBACK,EAAmBA,mBADxB,aACK,EAAgCzb,IAAI,EAC/CmF,KACAgP,cACA0G,gBACI,kBAAC,IAAD,CAAU1a,IAAKgF,GACG,kBAAC,IAAD,CAAW1E,UAAWC,KAAOiE,UACzB,kBAAC,IAAD,CAAUmD,UAAW+a,EAAmBQ,KAAK,EACnEle,GAAIme,KACAne,IAAOme,GAAYzb,SAAU,IAzDpB0T,KACvB,MAAM,GACJpW,GACEoW,EAEJ,GAAIsH,EAAmBQ,KAAK,EAC1Ble,GAAIme,KACAne,IAAOme,GAAY,CACvB,MAAMlf,EAAQye,EAAmBra,UAAU,EACzCrD,GAAIme,KACAne,IAAOme,GACb,OAAOR,EAAsB,IAAID,EAAmBhe,MAAM,EAAGT,MAAWye,EAAmBhe,MAAMT,EAAQ,KAG3G,OAAO0e,EAAsB,IAAID,EAAoBtH,KA2CJgI,CAAiB,CACxDpe,KACAgP,mBAIkB,kBAAC,IAAD,KAAYA,GAEZ,kBAAC,IAAD,KCxIK0G,KACnC,MAAM3a,EAAO6N,OAAOjL,OAAO0gB,GAAaH,KAAK,EAC3CvjB,WACIA,IAAU+a,GAChB,OAAW,OAAJ3a,QAAI,IAAJA,OAAA,EAAAA,EAAM2B,QAASgZ,GDqIa4I,CAAsB5I,IAG3B,kBAAC,IAAD,CAAWpa,UAAWC,KAAOgjB,gBACzB,kBAAC,IAAD,CAAQniB,QAAS,IAAM0D,EAAQ+B,KAAR,UF/HV,mBE+HU,YAAqD7B,KACvEpE,EAAKM,EAAE,gBE9InCsiB,GAAY,CACvBC,UAAW7iB,IAAKM,EAAE,aAClBwiB,MAAO9iB,IAAKM,EAAE,SACdyiB,OAAQ/iB,IAAKM,EAAE,UACf0iB,SAAUhjB,IAAKM,EAAE,YACjB2iB,QAASjjB,IAAKM,EAAE,WAChB4iB,UAAWljB,IAAKM,EAAE,aAClB6iB,KAAMnjB,IAAKM,EAAE,SCLT8iB,GAAa,KACjB,MAAM,IAAI/kB,MAHI,iEAWDglB,OAJIllB,wBAAc,CAC/BkN,QAAS+X,GACTE,gBAAiBF,KCHnB,MAAMtV,GAAW,CACfhG,SAAU,eACV2B,OAAQ,EACNP,UADM,CAGNA,QAEF/J,KAAM,UA4COokB,OAzCM,EACnBnf,KACAof,oBAEA,MAAM,SACJplB,GACEmB,qBAAWrB,IACT,QACJmN,GACE9L,qBAAW8jB,KACRza,GAAQ,QACbtE,IACGgG,aAAgBwD,GAAU,CAC7BG,WAAY,KACVuV,EAAcpf,GACdiH,KAEFpC,QAAS3J,IACPlB,EAAS,CACPe,KAAM,WACND,QAASI,EAAMJ,WAGnByJ,UAAW,CACTO,IAAK9E,KAQT,OAAO,kBAAC,IAAD,CAAQrB,OAAK,EAACtC,aAAW,EAACD,QAASoI,EAAQ5F,SAAUsB,GACjDtE,EAAKM,EAAE,YCILmjB,OA/CM,EACnBC,MACAC,iBACAC,aACAJ,oBAEA,MAAM,QACJtkB,EADI,OAEJsN,EAFI,KAGJqX,EAHI,GAIJzf,GACEsf,EAOEI,EAAgC,OAAnBJ,EAAII,WAAsB,GAAKJ,EAAII,WACtD,OAAO,kBAAC,IAAD,KACG,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUhd,SAAU,IAAM6c,EAAevf,GAAK2C,QAAS6c,KAE3D,kBAAC,IAAD,KAAY1kB,GACZ,kBAAC,IAAD,KAAY4kB,EAAWvY,KAAK,OAC5B,kBAAC,IAAD,KAAYqX,GAAUpW,IACtB,kBAAC,IAAD,KACKsE,KAAO+S,GAAM7S,OAAO,4BAEzB,kBAAC,IAAD,KACI,kBAAC,GAAD,CAAc5M,GAAIA,EAAIof,cAAeA,O,qBC/BrD,MAAMO,GAAY,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,OAkFlC5V,OAhFI,EACjByB,YAEA,MAAM,gBACJ0T,GACE/jB,qBAAW8jB,IAETW,EAAa/U,IACjBqU,EAAgB,CACd3W,KAAMsC,MAWJ,KACJtC,EADI,UAEJyB,EAFI,SAGJvB,EAHI,MAIJwB,GACEuB,EACEtB,EAAYC,KAAKC,KAAK7B,EAAO,GAAKE,EAAW,EAAGwB,GAChDI,EAAWF,KAAKC,IAAIF,EAAYzB,EAAW,EAAGwB,GAC9CK,EAAiBC,MAAMC,KAAK,CAChCvH,OAAQ+G,GACP,CAACS,EAAIC,KAAOA,EAAI,GAAGC,YACtB,OAAO,yBAAKrP,UAAWukB,KAAE3c,WACf,yBAAK5H,UAAWukB,KAAEC,MACd,8BAAOlkB,EAAKM,EAAE,SACd,kBAAC,IAAD,CAAc6O,OAAK,EAAC5E,SAAUsC,EAASkC,WAAYjI,SAAU,EACrEyD,eArBJ+Y,EAAgB,CACdzW,SAqBqBtC,EApBrBoC,KAAM,MAqBSoX,GAAU9kB,IAAIklB,GAAQ,kBAAC,IAAD,CAAoB/kB,IAAK+kB,EAAMplB,MAAOolB,EAAMrjB,MAAOqjB,MAE9E,8BAAOnkB,EAAKM,EAAE,cAElB,yBAAKZ,UAAWukB,KAAEG,OACd,yBAAK1kB,UAAWukB,KAAEI,QACbrkB,EAAKM,EAAE,kDAAmD,CACrEgO,YACAG,WACAJ,WAGM,kBAAC,IAAD,CAAQtL,OAAK,EAACC,SAAmB,IAAT2J,EAAYnM,QAAS,IAAMwjB,EAAWrX,EAAO,IAChE3M,EAAKM,EAAE,aAEZ,yBAAKZ,UAAWukB,KAAEK,eACd,6BAAMtkB,EAAKM,EAAE,SACb,kBAAC,IAAD,CAAc6O,OAAK,EAAC5E,SAAUoC,EAAKoC,WAAYjI,SAAU,EACnEyD,eAEAyZ,EAAWzZ,KAEImE,EAAezP,IAAI0N,GAAQ,kBAAC,IAAD,CAAoBvN,IAAKuN,EAAM5N,MAAO4N,EAAM7L,MAAO6L,MAEnF,6BAAM3M,EAAKM,EAAE,mBAAoB,CACzC8N,gBAGI,kBAAC,IAAD,CAAQrL,OAAK,EAACC,SAAU2J,IAASyB,EAAW5N,QAAS,IAAMwjB,EAAWrX,EAAO,IACxE3M,EAAKM,EAAE,Y,qBCnBboP,OA9CE,EACf6U,QACAf,gBACAG,iBACAa,YACAvU,cACA1F,WACAqF,WACI,kBAAC,IAAD,KACE,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAU5M,SAA2B,IAAjBuhB,EAAMld,OAAcP,SAAU0d,EAAWzd,QAASkJ,KAE1E,kBAAC,IAAD,KAAgBjQ,EAAKM,EAAE,YACvB,kBAAC,IAAD,KAAgBN,EAAKM,EAAE,eACvB,kBAAC,IAAD,KAAgBN,EAAKM,EAAE,WACvB,kBAAC,IAAD,KAAgBN,EAAKM,EAAE,SACvB,kBAAC,IAAD,KAAgBN,EAAKM,EAAE,aAG/B,kBAAC,IAAD,KACsB,IAAjBikB,EAAMld,OAAe,kBAAC,IAAD,KACd,kBAAC,IAAD,CAAWiJ,QAAQ,IAAI5Q,UAAWukB,KAAE1T,WAC/BvQ,EAAKM,EAAE,yBAEFikB,EAAMtlB,IAAIykB,GAAO,kBAAC,GAAD,CAActkB,IAAKskB,EAAItf,GAAIsf,IAAKA,EAAKE,WAAYrZ,EAASvD,SAAS0c,EAAItf,IAAKuf,eAAgBA,EAAgBH,cAAeA,MAElK,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAWlT,QAAQ,KACf,kBAAC,GAAD,CAAYV,MAAOA,QC5BhC,MAAM6U,GAAcjY,GACV,QAAXA,EACK,GAGFA,EAIHkY,GAAgB,CAAC,CACrB5jB,MAAOd,EAAKM,EAAE,OACdvB,MAAO,UAHQ,CAAC,YAAa,QAAS,SAAU,WAAY,UAAW,YAAa,QAK1EE,IAAIuN,IAAM,CACpB1L,MAAO8hB,GAAUpW,GACjBzN,MAAOyN,MAkCMmY,OA/BM,EACnBnY,SACAoY,gBAEA,MAAM,gBACJtB,GACE/jB,qBAAW8jB,IAaf,OAAO,kBAAC,IAAD,CAAmBviB,MAAOd,EAAKM,EAAE,oBAAqBqN,WAAW,QAAQ7G,SAX/D,EACfyD,eAEAqa,EAAUra,GACV+Y,EAAgB,CACd9W,OAAQiY,GAAYla,GAEpBoC,KAAM,KAI0FpC,SAAUiC,GACnGkY,GAAczlB,IAAI,EACzB6B,QACA/B,WACI,kBAAC,IAAD,CAAoBK,IAAK0B,EAAOA,MAAOA,EAAO/B,MAAOA,OCpDxD,MCMD+O,GAAW,CACfhG,SAAU,eACV2B,OAAQ,EACNP,UADM,CAGNA,QAEF/J,KAAM,UAqCO4O,OAlCc,EAC3BxD,eAEA,MAAMvH,EAA+B,IAApBuH,EAASlD,OACpB6B,EAAMqB,EAASgB,KAAK,MACpB,SACJnN,GACEmB,qBAAWrB,IACT,gBACJolB,GACE/jB,qBAAW8jB,KACRza,GAAQ,QACbtE,IACGgG,aAAgBwD,GAAU,CAC7BG,WAAY,KACVqV,KAEFra,QAAS3J,IACPlB,EAAS,CACPe,KAAM,WACND,QAASI,EAAMJ,aAIrB,OAAO,kBAAC,IAAD,CAAQuB,aAAW,EAACuC,SAAUA,GAAYsB,EAAS9D,QAAS,IAAMoI,EAAO,CAC9EM,SAESlJ,EAAKM,EAAE,qB,qBChCb,MAAMukB,GAAsB7kB,EAAKM,EAAE,QAuBpCwJ,GAAQ,CACZ4Z,IAAK,CACH5b,SAAU,eACV2B,OAvBgB,EAClB+C,SACAG,OACAE,eAEA,MAAMiY,EAAO,CACXjY,WACAF,OACAjD,OAAQ,CAAC,KAAM,UAAW,SAAU,OAAQ,eAG9C,OAAK8C,EAIE,6BAAKsY,GAAZ,IACEnb,OAAO,aAAD,OAAe6C,KAJdsY,KAcEC,GAAc,KACzB,MAAOxa,EAAUya,GAAenmB,mBAAS,KAClC2N,EAAQoY,GAAa/lB,mBAAS,QAC/B,QACJyF,EADI,MAEJhF,EAFI,KAGJkF,EAHI,QAIJ6G,GACE9B,aAAaO,GAAO,CACtBnB,UAAW,CACT6D,OAAQiY,GAAYjY,GACpBK,SAAU,GACVF,KAAM,KAIV,GAAIrI,EACF,OAAO,oCACK,kBAAC7E,EAAD,KAAeolB,IACf,kBAAC,IAAD,KACI,kBAAC,IAAD,QAKlB,GAAIvlB,EAAO,CACT,MAAM+F,EAAMrF,EAAKM,EAAE,kDACnB,OAAO,oCACK,kBAACb,EAAD,KAAeolB,IACf,kBAAC,IAAD,CAAWvlB,OAAK,EAACgG,MAAOD,GACnB/F,EAAMJ,UAMzB,MAAM+lB,EAAmBzgB,EAAKkf,IAAIwB,aF5EIjmB,IAAIykB,GAAOA,EAAItf,IE6ErD,MAAM6L,EF3EsB,EAACgV,EAAQ1a,KAErC,MAAM4a,EAA0B,IAAlBF,EAAO5d,OAEf+d,EAAgBH,EAAO5d,SAAWkD,EAASlD,OAEjD,OAAI8d,IAASC,GAINH,EAAOI,MAAMjhB,GAAMmG,EAASvD,SAAS5C,KEiExBkhB,CAAeL,EAAQ1a,GAErCiZ,ECrDkC,GACxCjZ,WACAya,iBACI5gB,IACJ,GAAImG,EAASvD,SAAS5C,GAAK,CACzB,MAAMmhB,EAAWhb,EAASZ,OAAO6b,GAAWA,GAAWphB,GACvD4gB,EAAYO,KD+CQE,CAA2B,CAC/Clb,WACAya,gBAEIR,ECrE8B,GACpCvU,cACA+U,cACAC,YACI,IAEKD,EADL/U,EACiB,GAGFgV,GD4DDS,CAAuB,CACvCzV,cACA+U,cACAC,WAEItB,ECxF2B,GACjCpZ,WACAya,iBACI5gB,IAGJ,GAFmBmG,EAASvD,SAAS5C,GAErB,CACd,MAAMmhB,EAAWhb,EAASZ,OAAOgc,GAAaA,IAAcvhB,GAC5D,OAAO4gB,EAAYO,GAGrB,OAAOP,EAAY,IAAIza,EAAUnG,KD6EVwhB,CAAoB,CACzCrb,WACAya,gBAGIa,EAAU,CACdxa,UACAiY,gBAAiB7Z,IACfub,EAAY,IACZ3Z,EAAQ5B,KAGZ,OAAO,kBAAC,GAAW3K,SAAZ,CAAqBC,MAAO8mB,GACzB,kBAACpmB,EAAD,KAAeolB,IACf,yBAAKnlB,UAAWukB,KAAEjiB,QACd,kBAAC,GAAD,CAAcwK,OAAQA,EAAQoY,UAAWA,IACzC,yBAAKllB,UAAWukB,KAAE6B,aACd,kBAAC,GAAD,CAAsBvb,SAAUA,MAGxC,kBAAC,GAAD,CAAUga,MAAO/f,EAAKkf,IAAIwB,aAAc1B,cAAeA,EAAevT,YAAaA,EAAa1F,SAAUA,EAAUoZ,eAAgBA,EAAgBa,UAAWA,EAAW5U,MAAOpL,EAAKkf,IAAI9T,UEhGzLmW,GAAiB,EAC5BjlB,QACA8T,OACAoR,iBAEA,MAAM9hB,EAAUC,cACV8hB,EAbgB,EAACrR,EAAMoR,KAC7B,MAAME,EAAaC,YAAcvR,GACjC,QAAKsR,KACDF,GAAmBE,EAAWE,UAUnBC,CAAgBzR,EAAMoR,GAIrC,OAAO,kBAAC,IAAD,CAAUxlB,QAFM,IAAM0D,EAAQ+B,KAAK2O,GAEAqR,OAAQA,EAAQnlB,MAAOA,EAAOxC,SAAUA,EAAS,gCAE7FynB,GAAeO,aAAe,CAC5BN,YAAY,GCrBP,MAAMO,GAAa,IAAM,kBAAC,IAAD,CAAMjoB,SAAUA,EAAS,0BACjD,kBAACynB,GAAD,CAAgBnR,KxHHC,IwHGgB9T,MxHFf,OwHEkCklB,YAAY,IAEhE,kBAACD,GAAD,CAAgBnR,KAAM1O,GAA0BpF,MvFGf,0BuFDjC,kBAACilB,GAAD,CAAgBnR,KAAMiM,GAAuB/f,MAAO8gB,KAEpD,kBAACmE,GAAD,CAAgBnR,KHCU,QGDgB9T,MAAO+jB,KAEjD,kBAACkB,GAAD,CAAgBnR,KtFZc,YsFYgB9T,MAAOmL,MC2C9Cua,UAhDH,IAAM,kBAAC/nB,EAAD,KACV,kBAAC,IAAD,CAAcgoB,SAAO,EAACC,QAAM,IAC5B,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAcA,QAAM,IACpB,yBAAKhnB,UAAWC,IAAO2H,UAAWzH,YAAWvB,EAAS,QAClD,yBAAKoB,UAAWC,IAAOgnB,SACnB,kBAACJ,GAAD,OAGJ,0BAAM7mB,UAAWC,IAAOinB,SACpB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACjS,KzHjBZ,IyHiB6B7T,UAAWjB,IAIvD,GACc,kBAAC,IAAD,CAAO+mB,OAAK,EAACjS,KAAM1O,GAA0BnF,UAAWiK,KAExD,kBAAC,IAAD,CAAO6b,OAAK,EAACjS,KAAM5Q,GAA+BjD,UAAWkD,KAE7D,kBAAC,IAAD,CAAO4iB,OAAK,EAACjS,K1FlBO,mB0FkB6B7T,UAAWoJ,KAI1E,GACc,kBAAC,IAAD,CAAO0c,OAAK,EAACjS,KAAMiM,GAAuB9f,UAAW8gB,KAErD,kBAAC,IAAD,CAAOgF,OAAK,EAACjS,KAAM6L,GAA4B1f,UAAW2f,KAE1D,kBAAC,IAAD,CAAOmG,OAAK,EAACjS,KhBtBI,kBgBsB6B7T,UAAW2gB,KAIvE,GACc,kBAAC,IAAD,CAAOmF,OAAK,EAACjS,KJ9BH,QI8B6B7T,UAAWgkB,KAIhE,GACc,kBAAC,IAAD,CAAO8B,OAAK,EAACjS,KvF9CC,YuF8C6B7T,UAAWqQ,KAEtD,kBAAC,IAAD,CAAOrQ,UAAWhB","file":"static/js/app.70c39ee7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2zgzu\",\"sidebar\":\"App_sidebar__10tAV\",\"content\":\"App_content__3I8HS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headline\":\"PageHeadline_headline__1llN5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formRow\":\"FormRow_formRow__3ALDU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textInputs\":\"GatewayKeyValuePair_textInputs__dJAb3\",\"keyInput\":\"GatewayKeyValuePair_keyInput__2WHV_\",\"valueInput\":\"GatewayKeyValuePair_valueInput__1uRVv\",\"checkboxGroup\":\"GatewayKeyValuePair_checkboxGroup__2k2Cu\",\"checkbox\":\"GatewayKeyValuePair_checkbox__2hg0g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"GatewayList_container__jCYee\",\"processingMessage\":\"GatewayList_processingMessage__1RE2H\",\"loadingContainer\":\"GatewayList_loadingContainer__7veW4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ListActions_container__2mPW8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"GatewayConfigList_container__3BZQo\",\"actions\":\"GatewayConfigList_actions__yMRge\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Filter_container__zWNRg\",\"inputStrip\":\"Filter_inputStrip__28I4q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Pagination_container__1oOhc\",\"verticalAlign\":\"Pagination_verticalAlign__2xbtG\",\"select\":\"Pagination_select__39auA\",\"buttonPrevious\":\"Pagination_buttonPrevious__SXF81\",\"buttonNext\":\"Pagination_buttonNext__1HLDE\",\"summary\":\"Pagination_summary__2dp6R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noResults\":\"SmsTable_noResults__1t04p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"topBar\":\"ReceivedSmsList_topBar__2qRs6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FieldDataElementWithCategoryOptionCombo_container__2h1m8\",\"field\":\"FieldDataElementWithCategoryOptionCombo_field__mnPuJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formRow\":\"DataElementTimesCategoryOptionCombos_formRow__TGwSL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FieldCommandSpecialCharacter_container__2Vgvs\",\"field\":\"FieldCommandSpecialCharacter_field__-1mZE\",\"button\":\"FieldCommandSpecialCharacter_button__2XK2-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"editButtonCell\":\"SmsCommandList_editButtonCell__1OBCC\",\"checkbox\":\"SmsCommandList_checkbox__1mJm5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Pagination_container__2LAE2\",\"left\":\"Pagination_left__1ff2z\",\"right\":\"Pagination_right__2Py4F\",\"amount\":\"Pagination_amount__19_-8\",\"pageselection\":\"Pagination_pageselection__27-Pj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noResults\":\"SmsTable_noResults__rTkg-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"SentSmsList_header__3biA5\",\"headerRight\":\"SentSmsList_headerRight__XinlM\"};","import { createContext } from 'react';\nexport const AlertContext = createContext({\n  addAlert: () => {\n    throw new Error('AlertContext has not been initialized yet!');\n  }\n});","const defaultPrefix = 'dhis2-smsconfiguration';\nexport const dataTest = (name, prefix = defaultPrefix) => `${prefix}-${name}`;","import { AlertBar, AlertStack } from '@dhis2/ui';\nimport React, { useState } from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { AlertContext } from './AlertContext';\nimport { dataTest } from '../dataTest';\nexport const AlertHandler = ({\n  children\n}) => {\n  const [alerts, setAlerts] = useState([]);\n\n  const addAlert = alert => setAlerts([...alerts, alert]);\n\n  return <AlertContext.Provider value={{\n    addAlert\n  }}>\n            {children}\n\n            <AlertStack dataTest={dataTest('notifications-alerthandler')}>\n                {alerts.map(({\n        message,\n        type\n      }) => <AlertBar dataTest={dataTest('notifications-alert')} key={message} {...{\n        [type]: true\n      }}>\n                        {message}\n                    </AlertBar>)}\n            </AlertStack>\n        </AlertContext.Provider>;\n};\nAlertHandler.propTypes = {\n  children: PropTypes.any\n};","import { useContext, useEffect } from 'react';\nimport { AlertContext } from './AlertContext';\n/**\n * @param {Error} error\n * @returns {void}\n */\n\nexport const useCriticalNotification = error => {\n  const {\n    addAlert\n  } = useContext(AlertContext);\n  useEffect(() => {\n    if (error) {\n      addAlert({\n        type: 'critical',\n        message: error.message\n      });\n    }\n  }, [error]);\n};","import { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\nimport styles from './PageHeadline.module.css';\nexport const PageHeadline = ({\n  children\n}) => <h1 className={styles.headline} data-test={dataTest('headline-pageheadline')}>\n        {children}\n    </h1>;\nPageHeadline.propTypes = {\n  children: PropTypes.string.isRequired\n};","import React from 'react';\nimport { PageHeadline } from '../headline';\nimport { dataTest } from '../dataTest';\nexport const HOME_PATH = '/';\nexport const HOME_LABEL = 'Home';\nexport const Home = () => {\n  return <div data-test={dataTest('views-home')}>\n            <PageHeadline>Home</PageHeadline>\n            <span>Content?</span>\n        </div>;\n};","import React from 'react';\nimport { dataTest } from '../dataTest';\nexport const NoMatch = () => <div data-test={dataTest('views-nomatch')}>\n        <h1>404</h1>\n    </div>;","//------------------------------------------------------------------------------\n// <auto-generated>\n// This code was generated by d2-i18n-generate.\n//\n// Changes to this file may cause incorrect behavior and will be lost if\n// the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\nimport i18n from '@dhis2/d2-i18n';\nimport enTranslations from './en/translations.json';\nconst namespace = 'default';\ni18n.addResources('en', namespace, enTranslations);\nexport default i18n;","import { Button, ButtonStrip, Modal, ModalActions, ModalContent, ModalTitle } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nexport const DeleteGatewaysConfirmationDialog = ({\n  onCancelClick,\n  onDeleteClick\n}) => <Modal dataTest={dataTest('gateways-deleteconfirmationdialog')}>\n        <ModalTitle>{i18n.t('Confirm deletion')}</ModalTitle>\n        <ModalContent>\n            {i18n.t('Are you sure you want to delete the selected gateways?')}\n        </ModalContent>\n        <ModalActions>\n            <ButtonStrip>\n                <Button secondary onClick={onCancelClick} dataTest={dataTest('gateways-deleteconfirmationdialog-cancel')}>\n                    Cancel\n                </Button>\n\n                <Button destructive onClick={onDeleteClick} dataTest={dataTest('gateways-deleteconfirmationdialog-confirm')}>\n                    Delete\n                </Button>\n            </ButtonStrip>\n        </ModalActions>\n    </Modal>;\nDeleteGatewaysConfirmationDialog.propTypes = {\n  onCancelClick: PropTypes.func.isRequired,\n  onDeleteClick: PropTypes.func.isRequired\n};","import { InputFieldFF, ReactFinalForm, composeValidators, hasValue, string } from '@dhis2/ui';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FieldGatewayAuthToken = () => <Field required dataTest={dataTest('gateways-fieldgatewayauthtoken')} name=\"authtoken\" label={i18n.t('Auth token')} component={InputFieldFF} validate={composeValidators(string, hasValue)} />;","import { InputFieldFF, ReactFinalForm, composeValidators, hasValue, string } from '@dhis2/ui';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FieldGatewayName = () => <Field required dataTest={dataTest('gateways-fieldgatewayname')} name=\"name\" label={i18n.t('Name')} component={InputFieldFF} validate={composeValidators(string, hasValue)} />;","import { InputFieldFF, ReactFinalForm, composeValidators, hasValue, string } from '@dhis2/ui';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FieldGatewayPassword = () => <Field required dataTest={dataTest('gateways-fieldgatewaypassword')} name=\"password\" label={i18n.t('Password')} component={InputFieldFF} validate={composeValidators(string, hasValue)} />;","import { InputFieldFF, ReactFinalForm, composeValidators, hasValue, url } from '@dhis2/ui';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FieldGatewayUrlTemplate = () => <Field required dataTest={dataTest('gateways-fieldgatewayurltemplate')} name=\"urlTemplate\" label={i18n.t('Url template')} component={InputFieldFF} validate={composeValidators(url, hasValue)} />;","import { InputFieldFF, ReactFinalForm, composeValidators, hasValue, string } from '@dhis2/ui';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FieldGatewayUsername = () => <Field required dataTest={dataTest('gateways-fieldgatewayusername')} name=\"username\" label={i18n.t('User name')} component={InputFieldFF} validate={composeValidators(string, hasValue)} />;","import { Button, ReactFinalForm } from '@dhis2/ui';\nimport React from 'react';\nimport i18n from '../locales';\nimport { dataTest } from '../dataTest';\nconst {\n  useForm\n} = ReactFinalForm;\nexport const GatewayAddKeyValuePair = () => {\n  const {\n    change,\n    getState\n  } = useForm();\n\n  const addKeyValueToFormState = () => {\n    const {\n      parameters\n    } = getState().values;\n    change('parameters', [...parameters, {\n      header: false,\n      encode: false,\n      key: '',\n      value: '',\n      confidential: false\n    }]);\n  };\n\n  return <Button onClick={addKeyValueToFormState} dataTest={dataTest('gateways-gatewayaddkeyvaluepair')}>\n            {i18n.t('Add key value pair')}\n        </Button>;\n};","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport cx from 'classnames';\nimport { dataTest } from '../dataTest';\nimport styles from './FormRow.module.css';\nexport const FormRow = ({\n  children,\n  className\n}) => <div className={cx(styles.formRow, className)} data-test={dataTest('forms-formrow')}>\n        {children}\n    </div>;\nFormRow.propTypes = {\n  children: PropTypes.any.isRequired,\n  className: PropTypes.string\n};","import { Button, ReactFinalForm, CircularLoader } from '@dhis2/ui';\nimport React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { FormRow } from '../forms';\nimport { FieldGatewayName, FieldGatewayUsername, FieldGatewayPassword } from '../gateways';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Form\n} = ReactFinalForm;\nexport const GatewayBulkSMSForm = ({\n  onSubmit,\n  initialValues\n}) => {\n  const submitText = initialValues ? i18n.t('Save gateway') : i18n.t('Add gateway');\n  return <Form onSubmit={onSubmit} initialValues={initialValues}>\n            {({\n      handleSubmit,\n      submitting\n    }) => <form onSubmit={handleSubmit} data-test={dataTest('gateways-gatewaybulksmsform')}>\n                    <FormRow>\n                        <FieldGatewayName />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldGatewayUsername />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldGatewayPassword />\n                    </FormRow>\n\n                    <Button primary type=\"submit\" icon={submitting ? <CircularLoader small /> : null} disabled={submitting} dataTest={dataTest('forms-gatewaybulksmsform-submit')}>\n                        {submitText}\n                    </Button>\n                </form>}\n        </Form>;\n};\nGatewayBulkSMSForm.defaultProps = {\n  initialValues: {}\n};\nGatewayBulkSMSForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  initialValues: PropTypes.object\n};","import { Button, ReactFinalForm, CircularLoader } from '@dhis2/ui';\nimport React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { FormRow } from '../forms';\nimport { FieldGatewayAuthToken, FieldGatewayName, FieldGatewayUrlTemplate, FieldGatewayUsername } from '../gateways';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Form\n} = ReactFinalForm;\nexport const GatewayClickatellForm = ({\n  onSubmit,\n  initialValues\n}) => {\n  const submitText = initialValues ? i18n.t('Save gateway') : i18n.t('Add gateway');\n  return <Form onSubmit={onSubmit} initialValues={initialValues}>\n            {({\n      handleSubmit,\n      submitting\n    }) => <form onSubmit={handleSubmit} data-test={dataTest('gateways-gatewayclickatellform')}>\n                    <FormRow>\n                        <FieldGatewayName />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldGatewayUsername />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldGatewayAuthToken />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldGatewayUrlTemplate />\n                    </FormRow>\n\n                    <Button primary type=\"submit\" icon={submitting ? <CircularLoader small /> : null} disabled={submitting} dataTest={dataTest('forms-gatewayclickatellform-submit')}>\n                        {submitText}\n                    </Button>\n                </form>}\n        </Form>;\n};\nGatewayClickatellForm.defaultProps = {\n  initialValues: {}\n};\nGatewayClickatellForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  initialValues: PropTypes.object\n};","import { Button, ReactFinalForm, NoticeBox, CircularLoader } from '@dhis2/ui';\nimport React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { FieldGatewayName, FieldGatewayUrlTemplate, GatewayAddKeyValuePair, GatewayKeyValuePair } from '../gateways';\nimport { FormRow } from '../forms';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Form\n} = ReactFinalForm;\nexport const GatewayGenericForm = ({\n  onSubmit,\n  initialValues\n}) => {\n  const submitText = initialValues ? i18n.t('Save gateway') : i18n.t('Add gateway');\n  return <Form onSubmit={onSubmit} initialValues={initialValues}>\n            {({\n      handleSubmit,\n      values,\n      submitting\n    }) => <form onSubmit={handleSubmit} data-test={dataTest('gateways-gatewaygenericform')}>\n                    <FormRow>\n                        <FieldGatewayName />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldGatewayUrlTemplate />\n                    </FormRow>\n\n                    {values.parameters.map((_, index) => <GatewayKeyValuePair index={index} key={index} />)}\n\n                    <FormRow>\n                        <NoticeBox>\n                            {i18n.t('With a generic http gateway any number of parameters can be added with key value pairs')}\n                        </NoticeBox>\n                    </FormRow>\n\n                    <FormRow>\n                        <GatewayAddKeyValuePair />\n                    </FormRow>\n\n                    <Button primary type=\"submit\" dataTest={dataTest('forms-gatewaygenericform-submit')} disabled={submitting} icon={submitting ? <CircularLoader small /> : null}>\n                        {submitText}\n                    </Button>\n                </form>}\n        </Form>;\n};\nGatewayGenericForm.defaultProps = {\n  initialValues: {\n    parameters: []\n  }\n};\nGatewayGenericForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  initialValues: PropTypes.object\n};","import { Button, CheckboxFieldFF, InputFieldFF, ReactFinalForm, composeValidators, hasValue, string } from '@dhis2/ui';\nimport React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { FormRow } from '../forms';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nimport styles from './GatewayKeyValuePair.module.css';\nconst {\n  Field,\n  useForm\n} = ReactFinalForm;\nconst isStringWithLengthAtLeastOne = composeValidators(string, hasValue);\nexport const GatewayKeyValuePair = ({\n  index\n}) => {\n  const {\n    change,\n    getState\n  } = useForm();\n\n  const removeKeyValueFromFormState = index => {\n    const {\n      parameters\n    } = getState().values;\n\n    if (index === 0) {\n      change('parameters', parameters.slice(1));\n    } else {\n      change('parameters', [...parameters.slice(0, index), ...parameters.slice(index + 1)]);\n    }\n  };\n\n  return <div data-test={dataTest('gateways-gatewaykeyvaluepair')}>\n            <FormRow>\n                <div className={styles.textInputs}>\n                    <Field dataTest={dataTest('gateways-gatewaykeyvaluepair-key')} className={styles.keyInput} name={`parameters[${index}].key`} label={i18n.t('Key')} component={InputFieldFF} validate={isStringWithLengthAtLeastOne} />\n\n                    <Field dataTest={dataTest('gateways-gatewaykeyvaluepair-value')} className={styles.valueInput} name={`parameters[${index}].value`} label={i18n.t('Value')} component={InputFieldFF} validate={isStringWithLengthAtLeastOne} />\n                </div>\n\n                <div className={styles.checkboxGroup}>\n                    <Field dataTest={dataTest('gateways-gatewaykeyvaluepair-isheader')} className={styles.checkbox} type=\"checkbox\" name={`parameters[${index}].header`} label={i18n.t('Send as header')} component={CheckboxFieldFF} />\n\n                    <Field dataTest={dataTest('gateways-gatewaykeyvaluepair-isencoded')} className={styles.checkbox} type=\"checkbox\" name={`parameters[${index}].encode`} label={i18n.t('Encode')} component={CheckboxFieldFF} />\n\n                    <Field dataTest={dataTest('gateways-gatewaykeyvaluepair-isconfidential')} className={styles.checkbox} type=\"checkbox\" name={`parameters[${index}].confidential`} label={i18n.t('Confidential')} component={CheckboxFieldFF} />\n                </div>\n\n                <Button dataTest={dataTest('gateways-gatewaykeyvaluepair-remove')} onClick={() => removeKeyValueFromFormState(index)}>\n                    {i18n.t('Remove key value pair')}\n                </Button>\n            </FormRow>\n        </div>;\n};\nGatewayKeyValuePair.propTypes = {\n  index: PropTypes.number.isRequired\n};","import { useHistory, useParams } from 'react-router-dom';\nimport React from 'react';\nimport { NoticeBox, CenteredContent, CircularLoader } from '@dhis2/ui';\nimport { GATEWAY_CONFIG_LIST_PATH } from './GatewayConfigList';\nimport { GENERIC_FORM, BULK_SMS_FORM, CLICKATELL_FORM, GatewayBulkSMSForm, GatewayClickatellForm, GatewayGenericForm, useReadGatewayQuery, useUpdateGenericGatewayMutation, useUpdateBulkSMSGatewayMutation, useUpdateClickatellGatewayMutation } from '../../gateways';\nimport { PageHeadline } from '../../headline';\nimport { dataTest } from '../../dataTest';\nimport i18n from '../../locales';\nexport const GATEWAY_CONFIG_FORM_EDIT_PATH_STATIC = '/sms-gateway/edit';\nexport const GATEWAY_CONFIG_FORM_EDIT_PATH = `${GATEWAY_CONFIG_FORM_EDIT_PATH_STATIC}/:id`;\nexport const GatewayConfigFormEdit = () => {\n  const history = useHistory();\n  const {\n    id\n  } = useParams();\n  const {\n    loading,\n    error: loadError,\n    data: jsonData\n  } = useReadGatewayQuery(id);\n  const [saveGenericGateway, {\n    error: saveGenericGatewayError\n  }] = useUpdateGenericGatewayMutation();\n  const [saveBulkSMSGateway, {\n    error: saveBulkSMSGatewayError\n  }] = useUpdateBulkSMSGatewayMutation();\n  const [saveClickatellGateway, {\n    error: saveClickatellGatewayError\n  }] = useUpdateClickatellGatewayMutation();\n  const saveError = saveGenericGatewayError || saveBulkSMSGatewayError || saveClickatellGatewayError;\n\n  if (loading) {\n    return <>\n                <PageHeadline>{i18n.t('Edit')}</PageHeadline>\n                <CenteredContent>\n                    <CircularLoader />\n                </CenteredContent>\n            </>;\n  }\n\n  if (loadError) {\n    const msg = i18n.t('Something went wrong whilst loading gateways');\n    return <>\n                <PageHeadline>{i18n.t('Edit')}</PageHeadline>\n                <NoticeBox error title={msg}>\n                    {loadError.message}\n                </NoticeBox>\n            </>;\n  }\n\n  const data =\n  /**\n   * @TODO:\n   *   * The response does not contain the right content type header\n   *     -> https://jira.dhis2.org/browse/DHIS2-9252\n   */\n  jsonData && typeof jsonData.gateway === 'string' ? {\n    gateway: JSON.parse(jsonData.gateway)\n  } : jsonData;\n  const gatewayType = data?.gateway?.type;\n\n  const onSubmit = async formValues => {\n    const values = { ...formValues,\n      id: data.gateway.uid\n    };\n\n    try {\n      if (values.type === GENERIC_FORM) {\n        await saveGenericGateway(values);\n      }\n\n      if (values.type === BULK_SMS_FORM) {\n        await saveBulkSMSGateway(values);\n      }\n\n      if (values.type === CLICKATELL_FORM) {\n        await saveClickatellGateway(values);\n      }\n\n      history.push(GATEWAY_CONFIG_LIST_PATH);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  return <div data-test={dataTest('views-gatewayconfigformedit')}>\n            <PageHeadline>{i18n.t('Edit gateway')}</PageHeadline>\n            {data?.gateway && <div data-test={dataTest('views-gatewayconfigformedit-formcontainer')} data-gateway-id={data.gateway.uid}>\n                    {saveError && <NoticeBox error title={i18n.t('Something went wrong whilst saving gateways')}>\n                            {saveError.message}\n                        </NoticeBox>}\n\n                    {gatewayType === GENERIC_FORM && <GatewayGenericForm initialValues={data.gateway} onSubmit={onSubmit} />}\n\n                    {gatewayType === BULK_SMS_FORM && <GatewayBulkSMSForm initialValues={data.gateway} onSubmit={onSubmit} />}\n\n                    {gatewayType === CLICKATELL_FORM && <GatewayClickatellForm initialValues={data.gateway} onSubmit={onSubmit} />}\n                </div>}\n        </div>;\n};","import { Button, ButtonStrip, Checkbox, Table, TableHead, TableBody, TableRowHead, TableCellHead, TableRow, TableCell } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { useHistory } from 'react-router-dom';\nimport React from 'react';\nimport { GATEWAY_CONFIG_FORM_EDIT_PATH_STATIC } from '../views/gateway_configuration/GatewayConfigFormEdit';\nimport { dataTest } from '../dataTest';\nimport { getTypeLabelByType } from './getTypeLabelByType';\nimport i18n from '../locales';\nexport const GatewaysTable = ({\n  allGatewaysChecked,\n  checkedGateways,\n  gateways,\n  onGatewayToggle,\n  onToggleAll,\n  onMakeDefaultClick\n}) => {\n  const history = useHistory();\n  return <Table dataTest={dataTest('gateways-gatewaystable')}>\n            <TableHead>\n                <TableRowHead>\n                    <TableCellHead dataTest={dataTest('gateways-gatewaystable-checkall')}>\n                        <Checkbox onChange={onToggleAll} checked={allGatewaysChecked} />\n                    </TableCellHead>\n                    <TableCellHead>{i18n.t('Name')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Type')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Default gateway')}</TableCellHead>\n                    <TableCellHead />\n                </TableRowHead>\n            </TableHead>\n\n            <TableBody>\n                {gateways.map(gateway => <TableRow key={gateway.uid} dataTest={dataTest('gateways-gatewaystable-row')}>\n                        <TableCell dataTest={dataTest('gateways-gatewaystable-checkbox')}>\n                            <Checkbox value={gateway.uid} onChange={() => onGatewayToggle(gateway.uid)} checked={checkedGateways.includes(gateway.uid)} dataTest={dataTest('gateways-gatewaystable-id')} />\n                        </TableCell>\n\n                        <TableCell dataTest={dataTest('gateways-gatewaystable-name')}>\n                            {gateway.name}\n                        </TableCell>\n\n                        <TableCell dataTest={dataTest('gateways-gatewaystable-type')}>\n                            {getTypeLabelByType(gateway.type)}\n                        </TableCell>\n\n                        <TableCell dataTest={dataTest('gateways-gatewaystable-isdefault')}>\n                            {gateway.isDefault ? i18n.t('Yes') : i18n.t('No')}\n                        </TableCell>\n\n                        <TableCell dataTest={dataTest('gateways-gatewaystable-actions')}>\n                            <ButtonStrip>\n                                {!gateway.isDefault && <Button dataTest={dataTest('gateways-gatewaystable-makedefault')} onClick={() => onMakeDefaultClick(gateway.uid)}>\n                                        {i18n.t('Make default')}\n                                    </Button>}\n\n                                <Button dataTest={dataTest('gateways-gatewaystable-edit')} onClick={() => {\n              history.push(`${GATEWAY_CONFIG_FORM_EDIT_PATH_STATIC}/${gateway.uid}`);\n            }}>\n                                    {i18n.t('Edit')}\n                                </Button>\n                            </ButtonStrip>\n                        </TableCell>\n                    </TableRow>)}\n            </TableBody>\n        </Table>;\n};\nGatewaysTable.propTypes = {\n  checkedGateways: PropTypes.arrayOf(PropTypes.string).isRequired,\n  gateways: PropTypes.arrayOf(PropTypes.shape({\n    isDefault: PropTypes.bool.isRequired,\n    name: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    uid: PropTypes.string.isRequired\n  })).isRequired,\n  onGatewayToggle: PropTypes.func.isRequired,\n  onMakeDefaultClick: PropTypes.func.isRequired,\n  onToggleAll: PropTypes.func.isRequired,\n  allGatewaysChecked: PropTypes.bool\n};","import i18n from '../locales';\n/**\n * @param {string} type\n * @returns {string}\n */\n\nexport const getTypeLabelByType = type => {\n  if (type === 'bulksms') {\n    return i18n.t('BulkSMS');\n  }\n\n  if (type === 'clickatell') {\n    return i18n.t('Clickatell');\n  }\n\n  if (type === 'http' || !type) {\n    return i18n.t('Generic');\n  }\n\n  return type;\n};","import { CircularLoader } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { GatewaysTable } from './GatewaysTable';\nimport { dataTest } from '../dataTest';\nimport styles from './GatewayList.module.css';\nexport const GatewayList = ({\n  checkedGateways,\n  gateways,\n  setCheckedGateways,\n  onMakeDefaultClick,\n  processing\n}) => {\n  const allGatewaysChecked = checkedGateways.length === gateways.length;\n\n  const toggleGateway = id => {\n    if (checkedGateways.includes(id)) {\n      const index = checkedGateways.findIndex(curId => curId === id);\n      const newCheckedGateways = index === 0 ? checkedGateways.slice(1) : [...checkedGateways.slice(0, index), ...checkedGateways.slice(index + 1)];\n      setCheckedGateways(newCheckedGateways);\n    } else {\n      setCheckedGateways([...checkedGateways, id]);\n    }\n  };\n\n  const toggleAll = () => {\n    if (!allGatewaysChecked) {\n      const allGatewayIds = gateways.map(({\n        uid\n      }) => uid);\n      setCheckedGateways(allGatewayIds);\n    } else {\n      setCheckedGateways([]);\n    }\n  };\n\n  return <div className={styles.container} data-test={dataTest('gateways-gatewaylist')}>\n            {processing && <div className={styles.processingMessage}>\n                    <div className={styles.loadingContainer}>\n                        <CircularLoader />\n                    </div>\n                </div>}\n\n            <GatewaysTable allGatewaysChecked={allGatewaysChecked} gateways={gateways} checkedGateways={checkedGateways} onGatewayToggle={toggleGateway} onMakeDefaultClick={onMakeDefaultClick} onToggleAll={toggleAll} />\n        </div>;\n};\nGatewayList.propTypes = {\n  checkedGateways: PropTypes.arrayOf(PropTypes.string).isRequired,\n  gateways: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    uid: PropTypes.string.isRequired,\n    isDefault: PropTypes.bool\n  })).isRequired,\n  setCheckedGateways: PropTypes.func.isRequired,\n  onMakeDefaultClick: PropTypes.func.isRequired,\n  processing: PropTypes.bool\n};","export const GENERIC_FORM = 'http';\nexport const BULK_SMS_FORM = 'bulksms';\nexport const CLICKATELL_FORM = 'clickatell';","import { useDataMutation } from '@dhis2/app-runtime';\nexport const CREATE_BULK_SMS_GATEWAY_MUTATION = {\n  resource: 'gateways',\n  type: 'create',\n  data: ({\n    name,\n    username,\n    password\n  }) => ({\n    type: 'bulksms',\n    name,\n    username,\n    password\n  })\n};\nexport const useCreateBulkSMSGatewayMutation = () => useDataMutation(CREATE_BULK_SMS_GATEWAY_MUTATION);","import { useDataMutation } from '@dhis2/app-runtime';\nexport const CREATE_CLICKATELL_GATEWAY_MUTATION = {\n  resource: 'gateways',\n  type: 'create',\n  data: ({\n    name,\n    username,\n    authtoken,\n    urlTemplate\n  }) => ({\n    type: 'clickatell',\n    name,\n    username,\n    authtoken,\n    urlTemplate\n  })\n};\nexport const useCreateClickatellGatewayMutation = () => useDataMutation(CREATE_CLICKATELL_GATEWAY_MUTATION);","import { useDataMutation } from '@dhis2/app-runtime';\n/**\n * This the shape of the additional fields\n * that can be added to a generic config\n *\n * @typedef {Object} Parameter\n * @prop {string} key\n * @prop {string} value\n * @prop {bool} header\n * @prop {bool} encode\n * @prop {bool} confidential\n */\n\n/**\n * @param {Object} args\n * @param {string} args.name\n * @param {string} args.urlTemplate\n * @param {Parameter[]} args.parameters\n *\n * @returns {Object}\n */\n\nconst createDataFromVariables = ({\n  name,\n  urlTemplate,\n  parameters\n}) => ({\n  type: 'http',\n  name,\n  urlTemplate,\n  parameters\n});\n\nexport const CREATE_GENERIC_GATEWAY_MUTATION = {\n  resource: 'gateways',\n  type: 'create',\n  data: createDataFromVariables\n};\nexport const useCreateGenericGatewayMutation = () => useDataMutation(CREATE_GENERIC_GATEWAY_MUTATION);","import { useState } from 'react';\nimport { useDataEngine } from '@dhis2/app-runtime';\nexport const DELETE_GATEWAY_MUTATION = {\n  resource: 'gateways',\n  type: 'delete',\n  id: ({\n    id\n  }) => id\n};\n\nconst idToMutationRequestFactory = engine => id => {\n  const variables = {\n    id\n  };\n  return engine.mutate(DELETE_GATEWAY_MUTATION, {\n    variables\n  });\n};\n\nexport const useDeleteGatewaysMutation = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const engine = useDataEngine();\n  const idToMutationRequest = idToMutationRequestFactory(engine);\n\n  const onStart = () => setLoading(true);\n\n  const onDone = response => {\n    setLoading(false);\n    return response;\n  };\n\n  const onError = error => {\n    setError(error);\n    setLoading(false);\n  };\n\n  const mutate = ({\n    ids\n  }) => {\n    onStart();\n    return Promise.all(ids.map(idToMutationRequest)).then(onDone).catch(onError);\n  };\n\n  return [mutate, {\n    loading,\n    error\n  }];\n};","import { useDataQuery } from '@dhis2/app-runtime';\n/**\n * @TODO:\n *   * The \"fields\" param does not work\n *     -> https://jira.dhis2.org/browse/DHIS2-9241\n *   * id field is not present, only uid\n *     -> https://jira.dhis2.org/browse/DHIS2-9249\n *   * Api does not return password of BulkSMS gateway configs\n *     -> https://jira.dhis2.org/browse/DHIS2-9248\n */\n\nexport const GATEWAY_QUERY = {\n  gateway: {\n    resource: 'gateways',\n    id: ({\n      id\n    }) => id\n  }\n};\nexport const useReadGatewayQuery = id => useDataQuery(GATEWAY_QUERY, {\n  variables: {\n    id\n  }\n});","import { useDataQuery } from '@dhis2/app-runtime';\n/**\n * @TODO:\n *   * The endpoint requires a `.json`, ignores \"Accept\" header\n *     -> https://jira.dhis2.org/browse/DHIS2-9250\n *   * The \"fields\" param does not work\n *     -> https://jira.dhis2.org/browse/DHIS2-9241\n *   * id field is not present, only uid\n *     -> https://jira.dhis2.org/browse/DHIS2-9249\n */\n\nexport const GATEWAYS_QUERY = {\n  gateways: {\n    resource: 'gateways.json',\n    params: ({\n      fields,\n      filter\n    }) => {\n      const params = {};\n\n      if (fields) {\n        params.fields = fields;\n      }\n\n      if (filter) {\n        params.filter = filter;\n      }\n\n      return params;\n    }\n  }\n};\n/**\n * @param {string[]} [ids]\n * @return {Object}\n */\n\nexport const useReadGatewaysQuery = ids => {\n  /*\n   * @TODO(filtering): Currently the `id:in:[...]` doesn't work\n   *   -> https://jira.dhis2.org/browse/DHIS2-9259\n   *\n   * This is because filtering doesn't work right now\n   * So there's no need for sending any variables\n   */\n  const filter = `id:in:[${ids?.join(',')}]`;\n  const variables = false && ids ? {\n    filter\n  } : {}; // eslint-disable-line no-constant-condition\n\n  const {\n    data: jsonData,\n    ...rest\n  } = useDataQuery(GATEWAYS_QUERY, {\n    variables\n  });\n  const parsedData =\n  /**\n   * @TODO:\n   *   Create Jira issue for:\n   *   The response does not contain the right content type header\n   */\n  jsonData && typeof jsonData.gateways === 'string' ? {\n    gateways: JSON.parse(jsonData.gateways)\n  } : jsonData;\n  const data = ids && parsedData?.gateways?.gateways ? {\n    gateways: {\n      gateways: parsedData.gateways.gateways.filter(({\n        uid\n      }) => ids.includes(uid))\n    }\n  } : parsedData;\n  return {\n    data,\n    ...rest\n  };\n};","import { useDataMutation } from '@dhis2/app-runtime';\nexport const SET_DEFAULT_GATEWAY_MUTATION = {\n  resource: 'gateways/default',\n  type: 'replace',\n  id: ({\n    id\n  }) => id\n};\nexport const useSetDefaultGatewayMutation = () => useDataMutation(SET_DEFAULT_GATEWAY_MUTATION);","import { useState } from 'react';\nimport { useDataEngine } from '@dhis2/app-runtime';\n/**\n * @TODO\n *   * Create jira issue: Make `useDataMutation` accept function for \"id\"\n */\n\n/**\n * @param {Object} query\n * @returns {Object}\n */\n\nexport const useUpdateGatewayMutation = query => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const engine = useDataEngine();\n\n  const doFetch = variables => {\n    const updatedQuery = { ...query,\n      id: variables.id\n    };\n    setLoading(true);\n    setError(null);\n    return engine.mutate(updatedQuery, {\n      variables\n    }).then(data => {\n      setLoading(false);\n      return data;\n    }).catch(error => {\n      setLoading(false);\n      setError(error);\n      throw error;\n    });\n  };\n\n  return [doFetch, {\n    loading,\n    error\n  }];\n};","import { useUpdateGatewayMutation } from './useUpdateGatewayMutation';\nexport const UPDATE_BULK_SMS_GATEWAY_MUTATION = {\n  resource: 'gateways',\n  id: ({\n    id\n  }) => id,\n  type: 'update',\n  data: ({\n    name,\n    username,\n    password\n  }) => ({\n    type: 'bulksms',\n    name,\n    username,\n    password\n  })\n};\nexport const useUpdateBulkSMSGatewayMutation = () => useUpdateGatewayMutation(UPDATE_BULK_SMS_GATEWAY_MUTATION);","import { useUpdateGatewayMutation } from './useUpdateGatewayMutation';\nexport const UPDATE_CLICKATELL_GATEWAY_MUTATION = {\n  resource: 'gateways',\n  id: ({\n    id\n  }) => id,\n  type: 'update',\n  data: ({\n    name,\n    username,\n    authtoken,\n    urlTemplate\n  }) => ({\n    type: 'clickatell',\n    name,\n    username,\n    authtoken,\n    urlTemplate\n  })\n};\nexport const useUpdateClickatellGatewayMutation = () => useUpdateGatewayMutation(UPDATE_CLICKATELL_GATEWAY_MUTATION);","import { useUpdateGatewayMutation } from './useUpdateGatewayMutation';\n/**\n * This the shape of the additional fields\n * that can be added to a generic config\n *\n * @typedef {Object} Parameter\n * @prop {string} key\n * @prop {string} value\n * @prop {bool} header\n * @prop {bool} encode\n * @prop {bool} confidential\n */\n\n/**\n * @param {Object} args\n * @param {string} args.name\n * @param {string} args.urlTemplate\n * @param {Parameter[]} args.parameters\n *\n * @returns {Object}\n */\n\nconst updateDataFromVariables = ({\n  name,\n  urlTemplate,\n  parameters\n}) => ({\n  type: 'http',\n  name,\n  urlTemplate,\n  parameters\n});\n\nexport const UPDATE_GENERIC_GATEWAY_MUTATION = {\n  resource: 'gateways',\n  id: ({\n    id\n  }) => id,\n  type: 'replace',\n  data: updateDataFromVariables\n};\nexport const useUpdateGenericGatewayMutation = () => useUpdateGatewayMutation(UPDATE_GENERIC_GATEWAY_MUTATION);","import { SingleSelectField, SingleSelectOption } from '@dhis2/ui';\nimport { useHistory } from 'react-router-dom';\nimport React, { useState } from 'react';\nimport { GATEWAY_CONFIG_LIST_PATH } from './GatewayConfigList';\nimport { GENERIC_FORM, BULK_SMS_FORM, CLICKATELL_FORM } from '../../gateways';\nimport { FormRow } from '../../forms';\nimport { PageHeadline } from '../../headline';\nimport { dataTest } from '../../dataTest';\nimport { GatewayBulkSMSForm, GatewayClickatellForm, GatewayGenericForm, useCreateBulkSMSGatewayMutation, useCreateClickatellGatewayMutation, useCreateGenericGatewayMutation } from '../../gateways';\nimport { useCriticalNotification } from '../../notifications';\nimport i18n from '../../locales';\nexport const GATEWAY_CONFIG_FORM_NEW_PATH = '/sms-gateway/new';\nexport const GatewayConfigFormNew = () => {\n  const history = useHistory();\n  const [visibleForm, setVisibleForm] = useState(GENERIC_FORM);\n  const [saveGenericGateway, {\n    error: saveGenericGatewayError\n  }] = useCreateGenericGatewayMutation();\n  useCriticalNotification(saveGenericGatewayError);\n  const [saveBulkSMSGateway, {\n    error: saveBulkSMSGatewayError\n  }] = useCreateBulkSMSGatewayMutation();\n  useCriticalNotification(saveBulkSMSGatewayError);\n  const [saveClickatellGateway, {\n    error: saveClickatellGatewayError\n  }] = useCreateClickatellGatewayMutation();\n  useCriticalNotification(saveClickatellGatewayError);\n\n  const onSubmit = async values => {\n    try {\n      if (visibleForm === GENERIC_FORM) {\n        await saveGenericGateway(values);\n      }\n\n      if (visibleForm === BULK_SMS_FORM) {\n        await saveBulkSMSGateway(values);\n      }\n\n      if (visibleForm === CLICKATELL_FORM) {\n        await saveClickatellGateway(values);\n      }\n\n      history.push(GATEWAY_CONFIG_LIST_PATH);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  return <div data-test={dataTest('views-gatewayconfigformnew')}>\n            <PageHeadline>{i18n.t('Add gateway')}</PageHeadline>\n\n            <FormRow>\n                <SingleSelectField label={i18n.t('Type')} onChange={({\n        selected\n      }) => setVisibleForm(selected)} selected={visibleForm} dataTest={dataTest('views-gatewayconfigformnew-gatewaytype')}>\n                    <SingleSelectOption value={GENERIC_FORM} label={i18n.t('Generic')} />\n\n                    <SingleSelectOption value={BULK_SMS_FORM} label={i18n.t('BulkSMS')} />\n\n                    <SingleSelectOption value={CLICKATELL_FORM} label={i18n.t('Clickatell')} />\n                </SingleSelectField>\n            </FormRow>\n\n            <FormRow>\n                {visibleForm === GENERIC_FORM && <GatewayGenericForm onSubmit={onSubmit} />}\n\n                {visibleForm === BULK_SMS_FORM && <GatewayBulkSMSForm onSubmit={onSubmit} passwordRequired={true} />}\n\n                {visibleForm === CLICKATELL_FORM && <GatewayClickatellForm onSubmit={onSubmit} passwordRequired={true} />}\n            </FormRow>\n        </div>;\n};","import { ButtonStrip, Button } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\nimport styles from './ListActions.module.css';\nexport const ListActions = ({\n  addLabel,\n  deleteLabel,\n  dataTest: dataTestProp,\n  onAddClick,\n  onDeleteClick,\n  disableAdd,\n  disableDelete\n}) => {\n  return <div className={styles.container}>\n            <ButtonStrip data-test={dataTest(`${dataTestProp}-actions`)}>\n                <Button primary onClick={onAddClick} disabled={disableAdd} dataTest={dataTest(`${dataTestProp}-add`)}>\n                    {addLabel}\n                </Button>\n\n                <Button destructive onClick={onDeleteClick} disabled={disableDelete} dataTest={dataTest(`${dataTestProp}-delete`)}>\n                    {deleteLabel}\n                </Button>\n            </ButtonStrip>\n        </div>;\n};\nListActions.propTypes = {\n  addLabel: PropTypes.string.isRequired,\n  dataTest: PropTypes.string.isRequired,\n  deleteLabel: PropTypes.string.isRequired,\n  onAddClick: PropTypes.func.isRequired,\n  onDeleteClick: PropTypes.func.isRequired,\n  disableAdd: PropTypes.bool,\n  disableDelete: PropTypes.bool\n};","import { useHistory } from 'react-router-dom';\nimport React, { useState } from 'react';\nimport { NoticeBox, CenteredContent, CircularLoader } from '@dhis2/ui';\nimport { GATEWAY_CONFIG_FORM_NEW_PATH } from './GatewayConfigFormNew';\nimport { DeleteGatewaysConfirmationDialog, GatewayList, useDeleteGatewaysMutation, useReadGatewaysQuery, useSetDefaultGatewayMutation } from '../../gateways';\nimport { ListActions } from '../../dataList';\nimport { PageHeadline } from '../../headline';\nimport { dataTest } from '../../dataTest';\nimport i18n from '../../locales';\nimport styles from './GatewayConfigList.module.css';\nexport const GATEWAY_CONFIG_LIST_PATH = '/sms-gateway';\nexport const GATEWAY_CONFIG_LIST_LABEL = 'Gateway configuration';\nexport const GatewayConfigList = () => {\n  const history = useHistory();\n\n  const onAddGatewayClick = () => history.push(GATEWAY_CONFIG_FORM_NEW_PATH);\n\n  const [checkedGateways, setCheckedGateways] = useState([]);\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const {\n    loading: loadingReadGateways,\n    error: errorReadGateways,\n    data,\n    refetch: refetchReadGateways\n  } = useReadGatewaysQuery();\n  const [deleteCheckedGateways, {\n    loading: loadingDelete,\n    error: errorDelete\n  }] = useDeleteGatewaysMutation();\n  const [makeGatewayDefault, {\n    loading: loadingSetDefault,\n    error: errorSetDefault\n  }] = useSetDefaultGatewayMutation();\n\n  const onDeleteClick = () => {\n    const variables = {\n      ids: checkedGateways\n    };\n    deleteCheckedGateways(variables).then(refetchReadGateways);\n    setShowDeleteDialog(false);\n  };\n\n  const onMakeDefaultClick = id => {\n    const variables = {\n      id\n    };\n    makeGatewayDefault(variables).then(refetchReadGateways);\n  };\n\n  const loading = loadingReadGateways || loadingDelete || loadingSetDefault;\n\n  if (loading) {\n    return <>\n                <PageHeadline>{GATEWAY_CONFIG_LIST_LABEL}</PageHeadline>\n                <CenteredContent>\n                    <CircularLoader />\n                </CenteredContent>\n            </>;\n  }\n\n  const error = errorReadGateways || errorDelete || errorSetDefault;\n\n  if (error) {\n    const msg = i18n.t('Something went wrong whilst performing the requested operation');\n    return <>\n                <PageHeadline>{GATEWAY_CONFIG_LIST_LABEL}</PageHeadline>\n                <NoticeBox error title={msg}>\n                    {error.message}\n                </NoticeBox>\n            </>;\n  }\n\n  return <div className={styles.container} data-test={dataTest('views-gatewayconfiglist')}>\n            <PageHeadline>{GATEWAY_CONFIG_LIST_LABEL}</PageHeadline>\n\n            <p>\n                {i18n.t('There are five different types of gateways supported by the SMS service. SMSes can be sent if at least one of the gateway types has been configured. If more than one gateway has been configured they will all be used in a round-robin fashion for load balancing')}\n            </p>\n\n            <ListActions addLabel={i18n.t('Add gateway')} deleteLabel={i18n.t('Delete selected')} dataTest=\"views-gatewayconfiglist\" onAddClick={onAddGatewayClick} onDeleteClick={() => setShowDeleteDialog(true)} disableAdd={loadingDelete} disableDelete={!checkedGateways.length || loadingDelete} />\n\n            {data?.gateways?.gateways && <GatewayList processing={loading} checkedGateways={checkedGateways} setCheckedGateways={setCheckedGateways} gateways={data.gateways.gateways} onMakeDefaultClick={onMakeDefaultClick} />}\n\n            {showDeleteDialog && <DeleteGatewaysConfirmationDialog onCancelClick={() => setShowDeleteDialog(false)} onDeleteClick={onDeleteClick} />}\n        </div>;\n};","import i18n from '@dhis2/d2-i18n';\nexport const RECEIVED_SMS_LIST_LABEL = i18n.t('Received');\nexport const RECEIVED_SMS_LIST_PATH = '/received';\nexport const STATUS_ALL = 'ALL'; // dhis-2/dhis-api/src/main/java/org/hisp/dhis/sms/incoming/SmsMessageStatus.java\n\nexport const STATUS_FILTER_OPTIONS = [{\n  value: STATUS_ALL,\n  label: i18n.t('All')\n}, {\n  value: 'FAILED',\n  label: i18n.t('Failed')\n}, {\n  value: 'INCOMING',\n  label: i18n.t('Incoming')\n}, {\n  value: 'PROCESSED',\n  label: i18n.t('Processed')\n}, {\n  value: 'PROCESSING',\n  label: i18n.t('Processing')\n}, {\n  value: 'SENT',\n  label: i18n.t('Sent')\n}, {\n  value: 'UNHANDLED',\n  label: i18n.t('Unhandled')\n}];","import { useLocation } from 'react-router-dom';\nimport { STATUS_ALL } from './config';\nexport const useQueryParams = () => {\n  const searchParams = new URLSearchParams(useLocation().search);\n  return {\n    status: searchParams.get('status') || STATUS_ALL,\n    phoneNumber: searchParams.get('phoneNumber') || '',\n    page: parseInt(searchParams.get('page') || 1),\n    pageSize: parseInt(searchParams.get('pageSize') || 50)\n  };\n};","import { STATUS_ALL } from './config';\nexport const createSearchString = query => {\n  const queryString = Object.keys(query).reduce((acc, paramKey) => {\n    const paramValue = query[paramKey];\n    const isDefaultStatus = paramKey === 'status' && paramValue === STATUS_ALL;\n\n    if (paramValue && !isDefaultStatus) {\n      acc.push(`${paramKey}=${paramValue}`);\n    }\n\n    return acc;\n  }, []).join('&');\n  return `?${queryString}`;\n};","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { PropTypes } from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { dataTest } from '../../dataTest';\nimport { Button, InputFieldFF, ReactFinalForm, SingleSelectFieldFF } from '@dhis2/ui';\nimport { STATUS_FILTER_OPTIONS } from './config';\nimport { useQueryParams } from './useQueryParams';\nimport { createSearchString } from './createSearchString';\nimport styles from './Filter.module.css';\nconst {\n  Form,\n  Field\n} = ReactFinalForm;\n\nconst Filter = ({\n  loading\n}) => {\n  const {\n    status,\n    phoneNumber,\n    pageSize\n  } = useQueryParams();\n  const initialValues = {\n    status,\n    phoneNumber\n  };\n  const history = useHistory();\n\n  const navigateToFilteredUrl = ({\n    status,\n    phoneNumber\n  }) => {\n    history.push({\n      search: createSearchString({\n        status,\n        phoneNumber,\n        pageSize,\n        page: 1\n      })\n    });\n  };\n\n  return <div data-test={dataTest('views-receivedsms-filter')} className={styles.container}>\n            <Form onSubmit={navigateToFilteredUrl} initialValues={initialValues}>\n                {({\n        handleSubmit,\n        pristine\n      }) => <form onSubmit={handleSubmit} className={styles.inputStrip}>\n                        <Field name=\"status\" component={SingleSelectFieldFF} options={STATUS_FILTER_OPTIONS} label={i18n.t('Filter by status')} inputWidth=\"200px\" />\n                        <Field name=\"phoneNumber\" component={InputFieldFF} label={i18n.t('Filter by phone number')} className={styles.phoneNumberField} inputWidth=\"300px\" />\n                        <Button large type=\"submit\" disabled={loading || pristine}>\n                            {i18n.t('Filter')}\n                        </Button>\n                    </form>}\n            </Form>\n        </div>;\n};\n\nFilter.propTypes = {\n  loading: PropTypes.bool\n};\nexport { Filter };","import React, { useContext } from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { useDataMutation } from '@dhis2/app-runtime';\nimport { Button } from '@dhis2/ui';\nimport { AlertContext } from '../../notifications';\nconst mutation = {\n  resource: 'sms/inbound',\n  type: 'delete',\n  params: ({\n    ids\n  }) => ({\n    ids\n  })\n};\n\nconst DeleteSelectedButton = ({\n  selectedIds,\n  onComplete\n}) => {\n  const {\n    addAlert\n  } = useContext(AlertContext);\n  const [mutate] = useDataMutation(mutation, {\n    onComplete,\n    onError: error => {\n      addAlert({\n        type: 'critical',\n        message: error.message\n      });\n    }\n  });\n  return <Button destructive onClick={() => mutate({\n    ids: selectedIds.join()\n  })} disabled={selectedIds.length === 0}>\n            {i18n.t('Delete selected')}\n        </Button>;\n};\n\nDeleteSelectedButton.propTypes = {\n  onComplete: PropTypes.func.isRequired,\n  selectedIds: PropTypes.arrayOf(PropTypes.string)\n};\nexport { DeleteSelectedButton };","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { useHistory } from 'react-router-dom';\nimport { Button, SingleSelect, SingleSelectOption } from '@dhis2/ui';\nimport { useQueryParams } from './useQueryParams';\nimport { createSearchString } from './createSearchString';\nimport styles from './Pagination.module.css';\nconst PAGE_LENGTHS = ['1', '2', '10', '20', '30', '40', '50', '100'];\n\nconst Pagination = ({\n  page,\n  pageCount,\n  pageSize,\n  total\n}) => {\n  const firstItem = Math.min((page - 1) * pageSize + 1, total);\n  const lastItem = Math.min(firstItem + pageSize - 1, total);\n  const availablePages = Array.from({\n    length: pageCount\n  }, (_x, i) => (i + 1).toString());\n  const {\n    status,\n    phoneNumber\n  } = useQueryParams();\n  const history = useHistory();\n\n  const navigateToPage = newPage => {\n    history.push({\n      search: createSearchString({\n        status,\n        phoneNumber,\n        pageSize,\n        page: newPage\n      })\n    });\n  };\n\n  const navigateToNewPageSize = ({\n    selected\n  }) => {\n    history.push({\n      search: createSearchString({\n        status,\n        phoneNumber,\n        pageSize: selected,\n        page: 1\n      })\n    });\n  };\n\n  return <div className={styles.container}>\n            <div className={styles.verticalAlign}>\n                {i18n.t('Show')}\n                <SingleSelect dense selected={pageSize.toString()} onChange={navigateToNewPageSize} className={styles.select}>\n                    {PAGE_LENGTHS.map(length => <SingleSelectOption key={length} value={length} label={length} />)}\n                </SingleSelect>\n                {i18n.t('per page')}\n            </div>\n\n            <div className={styles.verticalAlign}>\n                <span className={styles.summary}>\n                    {i18n.t('Viewing {{firstItem}}-{{lastItem}} of {{total}}', {\n          firstItem,\n          lastItem,\n          total\n        })}\n                </span>\n                <Button className={styles.buttonPrevious} small disabled={page === 1} onClick={() => navigateToPage(page - 1)}>\n                    {i18n.t('Previous')}\n                </Button>\n                <span>{i18n.t('Page')}</span>\n                <SingleSelect dense inputWidth=\"600px\" selected={page.toString()} onChange={({\n        selected\n      }) => navigateToPage(selected)} className={styles.select}>\n                    {availablePages.map(availablePage => <SingleSelectOption key={availablePage} value={availablePage} label={availablePage} />)}\n                </SingleSelect>\n                <span>{i18n.t('of {{pageCount}}', {\n          pageCount\n        })}</span>\n                <Button className={styles.buttonNext} small disabled={page === pageCount} onClick={() => navigateToPage(page + 1)}>\n                    {i18n.t('Next')}\n                </Button>\n            </div>\n        </div>;\n};\n\nPagination.propTypes = {\n  page: PropTypes.number,\n  pageCount: PropTypes.number,\n  pageSize: PropTypes.number,\n  total: PropTypes.number\n};\nexport { Pagination };","import React, { useContext } from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { useDataMutation } from '@dhis2/app-runtime';\nimport { Button } from '@dhis2/ui';\nimport { AlertContext } from '../../notifications';\nconst mutation = {\n  resource: 'sms/inbound',\n  id: ({\n    id\n  }) => id,\n  type: 'delete'\n};\n\nconst DeleteSmsButton = ({\n  id,\n  onComplete\n}) => {\n  const {\n    addAlert\n  } = useContext(AlertContext);\n  const [mutate, {\n    loading,\n    error\n  }] = useDataMutation(mutation, {\n    onComplete,\n    onError: error => {\n      addAlert({\n        type: 'critical',\n        message: error.message\n      });\n    },\n    variables: {\n      id\n    }\n  });\n  return <Button small destructive onClick={mutate} disabled={loading || error}>\n            {i18n.t('Delete')}\n        </Button>;\n};\n\nDeleteSmsButton.propTypes = {\n  onComplete: PropTypes.func.isRequired,\n  id: PropTypes.string\n};\nexport { DeleteSmsButton };","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport moment from 'moment';\nimport { Checkbox, Table, TableBody, TableCell, TableCellHead, TableFoot, TableHead, TableRow, TableRowHead } from '@dhis2/ui';\nimport { Pagination } from './Pagination';\nimport styles from './SmsTable.module.css';\nimport { DeleteSmsButton } from './DeleteSmsButton';\n\nconst SmsTable = ({\n  messages,\n  pager,\n  refetchList,\n  selectedIds,\n  setSelectedIds\n}) => {\n  const selectedIdSet = new Set(selectedIds);\n  const allSelected = messages.length > 0 && selectedIds.length === messages.length;\n\n  const toggle = id => {\n    if (selectedIdSet.has(id)) {\n      selectedIdSet.delete(id);\n    } else {\n      selectedIdSet.add(id);\n    }\n\n    setSelectedIds(Array.from(selectedIdSet));\n  };\n\n  const toggleAll = () => {\n    if (allSelected) {\n      setSelectedIds([]);\n    } else {\n      setSelectedIds(messages.map(({\n        id\n      }) => id));\n    }\n  };\n\n  return <Table>\n            <TableHead>\n                <TableRowHead>\n                    <TableCellHead>\n                        <Checkbox checked={allSelected} onChange={toggleAll} />\n                    </TableCellHead>\n                    <TableCellHead>{i18n.t('Message')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Phone number')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Status')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Sender')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Date')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Delete')}</TableCellHead>\n                </TableRowHead>\n            </TableHead>\n            <TableBody>\n                {messages.length === 0 ? <TableRow>\n                        <TableCell colSpan=\"7\" className={styles.noResults}>\n                            {i18n.t('No SMSes to display')}\n                        </TableCell>\n                    </TableRow> : messages.map(message => <TableRow key={message.id}>\n                            <TableCell>\n                                <Checkbox checked={selectedIdSet.has(message.id)} onChange={toggle.bind(null, message.id)} />\n                            </TableCell>\n                            <TableCell>{message.text}</TableCell>\n                            <TableCell>{message.originator}</TableCell>\n                            <TableCell>{message.smsstatus}</TableCell>\n                            <TableCell>\n                                {message.user ? message.user.userCredentials.username : i18n.t('Unknown')}\n                            </TableCell>\n                            <TableCell>\n                                {moment(message.receivedDate).format('MMMM Do YYYY, h:mm:ss a')}\n                            </TableCell>\n                            <TableCell>\n                                <DeleteSmsButton destructive small onComplete={refetchList} id={message.id}>\n                                    Delete\n                                </DeleteSmsButton>\n                            </TableCell>\n                        </TableRow>)}\n            </TableBody>\n            <TableFoot>\n                <TableRow>\n                    <TableCell colSpan=\"7\">\n                        <Pagination {...pager} />\n                    </TableCell>\n                </TableRow>\n            </TableFoot>\n        </Table>;\n};\n\nSmsTable.propTypes = {\n  messages: PropTypes.arrayOf(PropTypes.object).isRequired,\n  pager: PropTypes.PropTypes.object.isRequired,\n  refetchList: PropTypes.func.isRequired,\n  selectedIds: PropTypes.arrayOf(PropTypes.string).isRequired,\n  setSelectedIds: PropTypes.func.isRequired\n};\nexport { SmsTable };","import React from 'react';\nimport { CircularLoader, CenteredContent, ComponentCover } from '@dhis2/ui';\n\nconst SmsTableLoader = () => <ComponentCover>\n        <CenteredContent>\n            <CircularLoader />\n        </CenteredContent>\n    </ComponentCover>;\n\nexport { SmsTableLoader };","import React from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { NoticeBox } from '@dhis2/ui';\n\nconst SmsTableError = ({\n  message\n}) => <NoticeBox error title={i18n.t('Could not load list of received SMSes')}>\n        {message}\n    </NoticeBox>;\n\nSmsTableError.propTypes = {\n  message: PropTypes.string\n};\nexport { SmsTableError };","import React, { useState, useEffect } from 'react';\nimport { useDataQuery } from '@dhis2/app-service-data';\nimport { dataTest } from '../../dataTest';\nimport { Filter } from './Filter';\nimport { DeleteSelectedButton } from './DeleteSelectedButton';\nimport { SmsTable } from './SmsTable';\nimport { RECEIVED_SMS_LIST_LABEL, RECEIVED_SMS_LIST_PATH } from './config';\nimport { SmsTableLoader } from './SmsTableLoader';\nimport { SmsTableError } from './SmsTableError';\nimport { useQueryParams } from './useQueryParams';\nimport styles from './ReceivedSmsList.module.css';\nimport { PageHeadline } from '../../headline';\nconst query = {\n  inboundSms: {\n    resource: 'sms/inbound',\n    params: ({\n      page,\n      pageSize,\n      phoneNumber,\n      status\n    }) => ({\n      page,\n      pageSize,\n      phoneNumber,\n      status,\n      fields: ['id', 'text', 'originator', 'smsstatus', 'user[userCredentials[username]]', // sender\n      'receiveddate']\n    })\n  }\n};\n\nconst ReceivedSmsList = () => {\n  const [selectedIds, setSelectedIds] = useState([]);\n  const {\n    page,\n    pageSize,\n    phoneNumber,\n    status\n  } = useQueryParams();\n  const {\n    called,\n    loading,\n    error,\n    data,\n    refetch\n  } = useDataQuery(query, {\n    lazy: true\n  });\n\n  const refetchAndClear = () => {\n    refetch();\n    setSelectedIds([]);\n  };\n\n  useEffect(() => {\n    refetch({\n      page,\n      pageSize,\n      phoneNumber,\n      status\n    });\n  }, [page, pageSize, phoneNumber, status]);\n  return <div data-test={dataTest('views-receivedsmslist')}>\n            <PageHeadline>{RECEIVED_SMS_LIST_LABEL}</PageHeadline>\n            <div className={styles.topBar}>\n                <Filter loading={loading} />\n                <DeleteSelectedButton onComplete={refetchAndClear} selectedIds={selectedIds} />\n            </div>\n            <div>\n                {(loading || !called) && <SmsTableLoader />}\n                {error && !loading && <SmsTableError message={error.message} />}\n                {data && <SmsTable messages={data.inboundSms.inboundsmss} pager={data.inboundSms.pager} selectedIds={selectedIds} setSelectedIds={setSelectedIds} refetchList={refetch} />}\n            </div>\n        </div>;\n};\n\nexport { ReceivedSmsList, RECEIVED_SMS_LIST_LABEL, RECEIVED_SMS_LIST_PATH };","export const FIELD_COMMAND_COMPLETENESS_METHOD_NAME = 'completenessMethod';\nexport const FIELD_COMMAND_DEFAULT_MESSAGE_NAME = 'defaultMessage';\nexport const FIELD_COMMAND_ID_NAME = 'id';\nexport const FIELD_COMMAND_MORE_THAN_ONE_ORG_UNIT_MESSAGE_NAME = 'moreThanOneOrgUnitMessage';\nexport const FIELD_COMMAND_NAME_NAME = 'name';\nexport const FIELD_COMMAND_NO_USER_MESSAGE_NAME = 'noUserMessage';\nexport const FIELD_COMMAND_PARSER_NAME = 'parserType';\nexport const FIELD_COMMAND_PROGAM_NAME = 'program';\nexport const FIELD_COMMAND_PROGAM_STAGE_NAME = 'programStage';\nexport const FIELD_COMMAND_SEPARATOR_NAME = 'separator';\nexport const FIELD_COMMAND_SMS_CODES_NAME = 'smsCodes';\nexport const FIELD_COMMAND_SPECIAL_CHARS_NAME = 'specialCharacters';\nexport const FIELD_COMMAND_SUCCESS_MESSAGE_NAME = 'successMessage';\nexport const FIELD_COMMAND_USE_CURRENT_PERIOD_FOR_REPORTING_NAME = 'currentPeriodUsedForReporting';\nexport const FIELD_COMMAND_WRONG_FORMAT_MESSAGE_NAME = 'wrongFormatMessage';\nexport const FIELD_COMMAND_CONFIRM_MESSAGE_NAME = 'receivedMessage';","import { Button, ReactFinalForm } from '@dhis2/ui';\nimport React from 'react';\nimport { FIELD_COMMAND_SPECIAL_CHARS_NAME } from './fieldNames';\nimport { FormRow } from '../forms';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  useForm\n} = ReactFinalForm;\nexport const CommandsAddSpecialCharacters = () => {\n  const {\n    change,\n    getState\n  } = useForm();\n\n  const addSpecialKeyFieldsToFormState = () => {\n    const specialChars = getState().values[FIELD_COMMAND_SPECIAL_CHARS_NAME];\n    const newSpecialChars = [...specialChars, {\n      name: '',\n      value: ''\n    }];\n    change(FIELD_COMMAND_SPECIAL_CHARS_NAME, newSpecialChars);\n  };\n\n  return <FormRow>\n            <Button onClick={addSpecialKeyFieldsToFormState} dataTest={dataTest('forms-commandsaddspecialcharacters')}>\n                {i18n.t('Add special character')}\n            </Button>\n        </FormRow>;\n};","import i18n from '../locales/index';\nexport const ALL_DATAVALUE = {\n  value: 'ALL_DATAVALUE',\n  label: i18n.t('Receive all data value')\n};\nexport const AT_LEAST_ONE_DATAVALUE = {\n  value: 'AT_LEAST_ONE_DATAVALUE',\n  label: i18n.t('Receive at least one data value')\n};\nexport const DO_NOT_MARK_COMPLETE = {\n  value: 'DO_NOT_MARK_COMPLETE',\n  label: i18n.t('Do not mark as complete')\n};","import { SingleSelectFieldFF, ReactFinalForm, hasValue } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm; // The \"s\" from \"set\" is not capitalized\n// as the property on the java-model\n// does not have a capitalized \"s\" either\n//\n// @TODO: Create issue to make it consistent\n\nexport const FIELD_DATA_SET_NAME = 'dataset';\nexport const FieldDataSet = ({\n  dataSets,\n  loading,\n  required,\n  disabled\n}) => <Field disabled={disabled} required={required} loading={loading} dataTest={dataTest('forms-fielddataset')} name={FIELD_DATA_SET_NAME} label={i18n.t('Dataset')} component={SingleSelectFieldFF} options={dataSets} validate={hasValue} format={value => value?.id || null} parse={id => ({\n  id\n})} />;\nFieldDataSet.defaultProps = {\n  disabled: false,\n  loading: false,\n  required: false\n};\nFieldDataSet.propTypes = {\n  dataSets: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired\n  })).isRequired,\n  disabled: PropTypes.bool,\n  loading: PropTypes.bool,\n  required: PropTypes.bool\n};","import { useDataQuery } from '@dhis2/app-runtime';\nexport const DATA_SETS_QUERY = {\n  dataSets: {\n    resource: 'dataSets',\n    params: {\n      fields: ['id', 'displayName'],\n      paging: 'false'\n    }\n  }\n};\nexport const useReadDataSetsQuery = () => useDataQuery(DATA_SETS_QUERY);","import { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { FieldDataSet } from './FieldDataSet';\nimport { useReadDataSetsQuery } from './useReadDataSetsQuery';\nimport { useCriticalNotification } from '../notifications/useCriticalNotification';\nexport const FieldDataSetWithAutoLoad = ({\n  required\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useReadDataSetsQuery();\n  useCriticalNotification(error);\n\n  if (loading) {\n    return <FieldDataSet loading showLoadingStatus required={required} dataSets={[]} />;\n  }\n\n  if (error) {\n    return <FieldDataSet required={required} disabled dataSets={[]} />;\n  }\n\n  const {\n    dataSets\n  } = data.dataSets;\n  const options = dataSets.map(({\n    id,\n    displayName\n  }) => ({\n    label: displayName,\n    value: id\n  }));\n  return <FieldDataSet required={required} dataSets={options} />;\n};\nFieldDataSetWithAutoLoad.defaultProps = {\n  required: false\n};\nFieldDataSetWithAutoLoad.propTypes = {\n  required: PropTypes.bool\n};","import { useDataQuery } from '@dhis2/app-runtime';\nexport const DATA_SET_QUERY = {\n  dataSet: {\n    resource: 'dataSets',\n    id: ({\n      id\n    }) => id,\n    params: ({\n      fields = ['id', 'displayName']\n    } = {}) => ({\n      fields\n    })\n  }\n};\nexport const queryDataSet = (engine, variables) => engine.query(DATA_SET_QUERY, {\n  variables\n});\nexport const useReadDataSetQuery = id => useDataQuery(DATA_SET_QUERY, {\n  variables: {\n    id\n  }\n});","import { useDataEngine } from '@dhis2/app-runtime';\nimport { useEffect, useState } from 'react';\nexport const DATA_ELEMENTS_QUERY = {\n  dataElements: {\n    resource: 'dataElements',\n    params: ({\n      ids\n    }) => ({\n      filter: `id:in:[${ids.join(',')}]`,\n      fields: 'id,code,displayName,categoryCombo',\n      paging: 'false'\n    })\n  }\n};\nexport const queryDataElements = (engine, variables) => engine.query(DATA_ELEMENTS_QUERY, {\n  variables\n}).then(data => ({ ...data,\n  dataElements: { ...data.dataElements,\n    dataElements: data.dataElements.dataElements.map(({\n      code,\n      ...rest\n    }) => ({ ...rest,\n      // only the number is needed\n      code: code.replace('DE_', '')\n    }))\n  }\n})); // Not using `useDataQuery` here because the\n// response needs to be formatted\n\nexport const useReadDataElementsQuery = ids => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [data, setData] = useState(null);\n  const engine = useDataEngine();\n\n  const refetch = ({\n    ids\n  }) => {\n    setLoading(true);\n    setError(null);\n    return queryDataElements(engine, ids).then(setData).catch(setError).finally(() => setLoading(false));\n  }; // initial request\n\n\n  useEffect(() => {\n    refetch({\n      ids\n    });\n  }, []);\n  return {\n    loading,\n    error,\n    data,\n    refetch\n  };\n};","import { useDataEngine } from '@dhis2/app-runtime';\nimport { useEffect, useState } from 'react';\nimport { queryDataElements } from '../dataElement';\nimport { queryDataSet } from '../dataSet';\nexport const queryDataElementsOfDataSet = (engine, variables) => {\n  const nextVariables = { ...variables,\n    fields: 'dataSetElements'\n  };\n  return queryDataSet(engine, nextVariables).then(response => {\n    const dataSets = response.dataSet;\n    const {\n      dataSetElements\n    } = dataSets;\n    const dataElementIds = dataSetElements.map(({\n      dataElement\n    }) => dataElement.id);\n    return dataElementIds;\n  }).then(dataElementIds => {\n    if (!dataElementIds.length) return [];\n    const dataElementVariables = {\n      ids: dataElementIds\n    };\n    return queryDataElements(engine, dataElementVariables);\n  });\n};\nexport const useReadDataElementsOfDataSetQuery = dataSetId => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [data, setData] = useState(null);\n  const engine = useDataEngine();\n\n  const refetch = variables => {\n    setLoading(true);\n    setError(null);\n    return queryDataElementsOfDataSet(engine, variables).then(setData).catch(setError).finally(() => setLoading(false));\n  }; // initial request\n\n\n  useEffect(() => {\n    refetch({\n      id: dataSetId\n    });\n  }, []);\n  return {\n    loading,\n    error,\n    data,\n    refetch\n  };\n};","import { Button, ButtonStrip, CircularLoader, Modal, ModalTitle, ModalContent, SingleSelectFieldFF, ReactFinalForm, hasValue } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React, { useMemo } from 'react';\nimport { FIELD_DATA_SET_NAME } from '../dataSet';\nimport { FormRow } from '../forms';\nimport { get } from '../utils';\nimport { useCriticalNotification } from '../notifications';\nimport { useReadDataElementsOfDataSetQuery } from '../dataElement';\nimport i18n from '../locales';\nconst {\n  Field,\n  Form,\n  useForm,\n  useFormState\n} = ReactFinalForm;\nexport const FieldDataElementWithCategoryOptionComboFormula = ({\n  targetFieldName,\n  onClose\n}) => {\n  const form = useForm();\n  const {\n    values\n  } = useFormState();\n  const {\n    id: dataSetId\n  } = values[FIELD_DATA_SET_NAME];\n  const {\n    loading,\n    error,\n    data\n  } = useReadDataElementsOfDataSetQuery(dataSetId);\n  useCriticalNotification(error); // Using memo so changing the form does not change the \"initialValues\"\n  // which would cause the form to update unnecessarily\n\n  const initialFormula = get(targetFieldName, values);\n  const initialOperator = useMemo(() => initialFormula ? initialFormula[0] : '+', []);\n  const initialDataElementCode = useMemo(() => initialFormula ? initialFormula.slice(1) : '', []);\n  const initialValues = {\n    operator: initialOperator,\n    dataElementCode: initialDataElementCode\n  };\n\n  if (loading) {\n    return <Modal>\n                <CircularLoader />\n            </Modal>;\n  }\n\n  if (error) {\n    onClose();\n  }\n\n  const options = data.dataElements.dataElements.map(dataElement => {\n    const {\n      code,\n      displayName\n    } = dataElement;\n    return {\n      value: code,\n      label: displayName\n    };\n  });\n\n  const onSubmit = values => {\n    const newFormula = `${values.operator}${values.dataElementCode}`;\n    form.change(targetFieldName, newFormula);\n    onClose();\n  };\n\n  const onRemove = () => {\n    form.change(targetFieldName, null);\n    onClose();\n  };\n\n  return <Form onSubmit={onSubmit} initialValues={initialValues}>\n            {({\n      handleSubmit\n    }) => <Modal>\n                    <ModalTitle>{i18n.t('')}</ModalTitle>\n\n                    <ModalContent>\n                        <form onSubmit={event => {\n          event.stopPropagation();\n          handleSubmit(event);\n        }}>\n                            <FormRow>\n                                <Field required name=\"dataElementCode\" label={i18n.t('Data element')} component={SingleSelectFieldFF} options={options} validate={hasValue} />\n                            </FormRow>\n\n                            <FormRow>\n                                <Field required name=\"operator\" label={i18n.t('formula operator')} component={SingleSelectFieldFF} initialValue=\"+\" options={[{\n              value: '+',\n              label: '+'\n            }, {\n              value: '-',\n              label: '-'\n            }]} />\n                            </FormRow>\n\n                            <FormRow>\n                                <ButtonStrip>\n                                    <Button type=\"submit\" primary>\n                                        {i18n.t('Save')}\n                                    </Button>\n\n                                    <Button onClick={onClose}>\n                                        {i18n.t('Cancel')}\n                                    </Button>\n\n                                    <Button onClick={onRemove}>\n                                        {i18n.t('Remove')}\n                                    </Button>\n                                </ButtonStrip>\n                            </FormRow>\n                        </form>\n                    </ModalContent>\n                </Modal>}\n        </Form>;\n};\nFieldDataElementWithCategoryOptionComboFormula.propTypes = {\n  targetFieldName: PropTypes.string.isRequired,\n  onClose: PropTypes.func.isRequired\n};","export const get = (path, object) => {\n  let value = null;\n  const segments = path.split('.');\n\n  if (!(object instanceof Object)) {\n    return value;\n  }\n\n  for (let i = 0, cur = object; i < segments.length; ++i) {\n    const nextObject = cur[segments[i]];\n    if (!nextObject) break;\n\n    if (i === segments.length - 1) {\n      value = nextObject;\n      break;\n    }\n\n    cur = nextObject;\n  }\n\n  return value;\n};","import { Button, InputFieldFF, ReactFinalForm } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React, { useState } from 'react';\nimport { DE_COC_toFormName } from '../smsCommand';\nimport { FieldDataElementWithCategoryOptionComboFormula } from './FieldDataElementWithCategoryOptionComboFormula';\nimport { FormRow } from '../forms';\nimport i18n from '../locales';\nimport styles from './FieldDataElementWithCategoryOptionCombo.module.css';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FieldDataElementWithCategoryOptionCombo = ({\n  dataElement,\n  categoryOptionCombo\n}) => {\n  const [showFormula, setShowFormula] = useState(false);\n  const label = categoryOptionCombo ? `${dataElement.displayName} ${categoryOptionCombo.displayName}` : `${dataElement.displayName} ${i18n.t('default')}`;\n  const baseName = DE_COC_toFormName(dataElement, categoryOptionCombo);\n  const name = `${baseName}.code`;\n  const formulaName = `${baseName}.formula`;\n  return <div className={styles.container}>\n            <Field className={styles.field} label={label} name={name} subscription={{\n      value: true,\n      error: true,\n      invalid: true,\n      touched: true\n    }}>\n                {({\n        input,\n        meta,\n        ...rest\n      }) => {\n        const code = input.value;\n        return <>\n                            <FormRow>\n                                <InputFieldFF {...rest} input={input} meta={meta} error={!!meta.error} />\n                            </FormRow>\n\n                            {code && <>\n                                    <Button onClick={() => setShowFormula(true)}>\n                                        {i18n.t('Change formula')}\n                                    </Button>\n\n                                    {showFormula && <FieldDataElementWithCategoryOptionComboFormula targetFieldName={formulaName} onClose={() => setShowFormula(false)} />}\n                                </>}\n                        </>;\n      }}\n            </Field>\n        </div>;\n};\nFieldDataElementWithCategoryOptionCombo.defaultProps = {\n  categoryOptionCombo: null,\n  formula: ''\n};\nFieldDataElementWithCategoryOptionCombo.propTypes = {\n  dataElement: PropTypes.shape({\n    displayName: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired\n  }).isRequired,\n  categoryOptionCombo: PropTypes.shape({\n    code: PropTypes.string.isRequired,\n    displayName: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired\n  })\n};","import { NoticeBox, ReactFinalForm } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { FIELD_COMMAND_SMS_CODES_NAME } from './fieldNames';\nimport { FieldDataElementWithCategoryOptionCombo } from './FieldDataElementWithCategoryOptionCombo';\nimport { FormRow } from '../forms';\nimport i18n from '../locales';\nimport styles from './DataElementTimesCategoryOptionCombos.module.css';\nconst {\n  FormSpy\n} = ReactFinalForm;\nexport const DataElementTimesCategoryOptionCombos = ({\n  DE_COC_combinations\n}) => <div>\n        <h2>{i18n.t('Data element category combination')}</h2>\n\n        <FormSpy subscription={{\n    errors: true,\n    pristine: true\n  }}>\n            {({\n      errors,\n      pristine\n    }) => {\n      if (pristine) return <span />;\n      const smsCodeErrors = errors[FIELD_COMMAND_SMS_CODES_NAME];\n      const globalError = smsCodeErrors?.global;\n      return <>\n                        {globalError && <FormRow>\n                                <NoticeBox error title={i18n.t('Data element category combination validation error')}>\n                                    {globalError}\n                                </NoticeBox>\n                            </FormRow>}\n                    </>;\n    }}\n        </FormSpy>\n\n        <div>\n            {DE_COC_combinations.map(({\n      dataElement,\n      categoryOptionCombo\n    }) => {\n      return <FormRow className={styles.formRow} key={dataElement.id + categoryOptionCombo?.id}>\n                        <FieldDataElementWithCategoryOptionCombo dataElement={dataElement} categoryOptionCombo={categoryOptionCombo} />\n                    </FormRow>;\n    })}\n        </div>\n    </div>;\nDataElementTimesCategoryOptionCombos.defaultProps = {\n  allRequired: false\n};\nDataElementTimesCategoryOptionCombos.propTypes = {\n  DE_COC_combinations: PropTypes.arrayOf(PropTypes.shape({\n    dataElement: PropTypes.shape({\n      displayName: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired\n    }).isRequired,\n    categoryOptionCombo: PropTypes.shape({\n      code: PropTypes.string.isRequired,\n      displayName: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired\n    })\n  })).isRequired\n};","import { SingleSelectFieldFF, ReactFinalForm } from '@dhis2/ui';\nimport React from 'react';\nimport { FIELD_COMMAND_COMPLETENESS_METHOD_NAME } from './fieldNames';\nimport * as completenessMethods from './completenessMethods';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nconst options = Object.values(completenessMethods);\nexport const FieldCommandCompletenessMethod = () => <Field dataTest={dataTest('forms-fielddataset')} name={FIELD_COMMAND_COMPLETENESS_METHOD_NAME} label={i18n.t('Completeness method')} component={SingleSelectFieldFF} options={options} />;","import { TextAreaFieldFF, ReactFinalForm } from '@dhis2/ui';\nimport React from 'react';\nimport { FIELD_COMMAND_CONFIRM_MESSAGE_NAME } from './fieldNames';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FieldCommandConfirmMessage = () => <Field dataTest={dataTest('commands-fieldcommandconfirmmessage')} name={FIELD_COMMAND_CONFIRM_MESSAGE_NAME} label={i18n.t('Confirm message')} component={TextAreaFieldFF} />;","import { TextAreaFieldFF, ReactFinalForm } from '@dhis2/ui';\nimport React from 'react';\nimport { FIELD_COMMAND_DEFAULT_MESSAGE_NAME } from './fieldNames';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FieldCommandDefaultMessage = () => <Field dataTest={dataTest('forms-fieldcommanddefaultmessage')} name={FIELD_COMMAND_DEFAULT_MESSAGE_NAME} label={i18n.t('Reply message if no codes are sent (only the command)')} component={TextAreaFieldFF} />;","import { TextAreaFieldFF, ReactFinalForm } from '@dhis2/ui';\nimport React from 'react';\nimport { FIELD_COMMAND_MORE_THAN_ONE_ORG_UNIT_MESSAGE_NAME } from './fieldNames';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FieldCommandMoreThanOneOrgUnitMessage = () => <Field dataTest={dataTest('forms-fieldcommandmorethanoneorgunitmessage')} name={FIELD_COMMAND_MORE_THAN_ONE_ORG_UNIT_MESSAGE_NAME} label={i18n.t('More than one orgunit message')} component={TextAreaFieldFF} />;","import { InputFieldFF, ReactFinalForm, composeValidators, hasValue, string } from '@dhis2/ui';\nimport React from 'react';\nimport { FIELD_COMMAND_NAME_NAME } from './fieldNames';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FieldCommandName = () => <Field required dataTest={dataTest('commands-fieldcommandname')} name={FIELD_COMMAND_NAME_NAME} label={i18n.t('Name')} component={InputFieldFF} validate={composeValidators(string, hasValue)} />;","import { TextAreaFieldFF, ReactFinalForm } from '@dhis2/ui';\nimport React from 'react';\nimport { FIELD_COMMAND_NO_USER_MESSAGE_NAME } from './fieldNames';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FieldCommandNoUserMessage = () => <Field dataTest={dataTest('forms-fieldcommandnousermessage')} name={FIELD_COMMAND_NO_USER_MESSAGE_NAME} label={i18n.t('No user message')} component={TextAreaFieldFF} />;","import i18n from '../locales/index';\nexport const KEY_VALUE_PARSER = {\n  value: 'KEY_VALUE_PARSER',\n  label: i18n.t('Key value parser')\n}; // @TODO: This parser is not listed in the docs,\n//        but it's listed in the original source code\n//   -> docs: https://docs.dhis2.org/master/en/dhis2_developer_manual/web-api.html#sms-command-values\n//   -> code: https://github.com/dhis2/dhis2-core/blob/79bd77ecf52051b00e3ba96eb1aca4d0a6063ed1/dhis-2/dhis-web/dhis-web-maintenance/dhis-web-maintenance-mobile/src/main/webapp/dhis-web-maintenance-mobile/smscommand/edit-sms-command.vm#L188\n\nexport const J2ME_PARSER = {\n  value: 'J2ME_PARSER',\n  label: i18n.t('J2ME parser')\n};\nexport const ALERT_PARSER = {\n  value: 'ALERT_PARSER',\n  label: i18n.t('Alert parser')\n};\nexport const UNREGISTERED_PARSER = {\n  value: 'UNREGISTERED_PARSER',\n  label: i18n.t('Unregistered parser')\n};\nexport const TRACKED_ENTITY_REGISTRATION_PARSER = {\n  value: 'TRACKED_ENTITY_REGISTRATION_PARSER',\n  label: i18n.t('Tracked entity registration parser')\n};\nexport const PROGRAM_STAGE_DATAENTRY_PARSER = {\n  value: 'PROGRAM_STAGE_DATAENTRY_PARSER',\n  label: i18n.t('Program stage data entry parser')\n};\nexport const EVENT_REGISTRATION_PARSER = {\n  value: 'EVENT_REGISTRATION_PARSER',\n  label: i18n.t('Event registration parser')\n};","import { PropTypes } from '@dhis2/prop-types';\nimport { SingleSelectFieldFF, ReactFinalForm } from '@dhis2/ui';\nimport React from 'react';\nimport { FIELD_COMMAND_PARSER_NAME } from './fieldNames';\nimport * as commandTypes from './parserTypes';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nconst options = Object.values(commandTypes).sort((a, b) => {\n  if (a.label < b.label) {\n    return -1;\n  }\n\n  if (a.label > b.label) {\n    return 1;\n  }\n\n  return 0;\n});\nexport const FieldCommandParser = ({\n  disabled\n}) => <Field disabled={disabled} dataTest={dataTest('forms-fieldcommandparser')} name={FIELD_COMMAND_PARSER_NAME} label={i18n.t('Parser')} component={SingleSelectFieldFF} options={options} />;\nFieldCommandParser.defaultProps = {\n  disabled: false\n};\nFieldCommandParser.propTypes = {\n  disabled: PropTypes.bool\n};","import { InputFieldFF, ReactFinalForm } from '@dhis2/ui';\nimport React from 'react';\nimport { FIELD_COMMAND_SEPARATOR_NAME } from './fieldNames';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FieldCommandSeparator = () => <Field dataTest={dataTest('forms-fieldcommandseparator')} name={FIELD_COMMAND_SEPARATOR_NAME} label={i18n.t('Field separator')} component={InputFieldFF} />;","import { InputFieldFF, ReactFinalForm } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { FIELD_COMMAND_SMS_CODES_NAME } from './fieldNames';\nconst {\n  Field,\n  useFormState\n} = ReactFinalForm;\nconst subscription = {\n  values: true\n};\nexport const FieldCommandSmsCode = ({\n  id,\n  displayName,\n  valueType\n}) => {\n  const {\n    values\n  } = useFormState({\n    subscription\n  });\n  const smsCode = values[FIELD_COMMAND_SMS_CODES_NAME][id];\n  /**\n   * This uses a dynamic, nested name for storing the field value in the\n   * form state. You can't submit the data as is though, since the backend\n   * expects a different shape. So I was thinking of dealing with that\n   * in the submit handler. Since you have the ids and the field value\n   * you should be able to transform it into any shape you need.\n   */\n\n  return <Field required name={`${FIELD_COMMAND_SMS_CODES_NAME}.${id}`} label={displayName} component={InputFieldFF} format={code => code?.code || ''} parse={nextCode => !smsCode ? {\n    code: nextCode,\n    trackedEntityAttribute: {\n      id,\n      displayName,\n      valueType\n    }\n  } : { ...smsCode,\n    code: nextCode\n  }} />;\n};\nFieldCommandSmsCode.propTypes = {\n  displayName: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  valueType: PropTypes.string.isRequired\n};","import { Button, Field as UiField, InputFieldFF, ReactFinalForm, hasValue } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { FIELD_COMMAND_SPECIAL_CHARS_NAME } from './fieldNames';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nimport styles from './FieldCommandSpecialCharacter.module.css';\nconst {\n  Field,\n  useForm\n} = ReactFinalForm;\nexport const FieldCommandSpecialCharacter = ({\n  index\n}) => {\n  const {\n    change,\n    getState\n  } = useForm();\n\n  const removeSpecialKeyFieldsFromFormState = () => {\n    const specialChars = getState().values[FIELD_COMMAND_SPECIAL_CHARS_NAME];\n    const newSpecialChars = [...specialChars.slice(0, index), ...specialChars.slice(index + 1)];\n    change(FIELD_COMMAND_SPECIAL_CHARS_NAME, newSpecialChars);\n  };\n\n  return <div key={index} className={styles.container}>\n            <Field required className={styles.field} dataTest={dataTest('@TODO')} label={i18n.t('Special character name')} name={`${FIELD_COMMAND_SPECIAL_CHARS_NAME}[${index}].name`} component={InputFieldFF} validate={hasValue} />\n\n            <Field required className={styles.field} dataTest={dataTest('@TODO')} label={i18n.t('Special character value')} name={`${FIELD_COMMAND_SPECIAL_CHARS_NAME}[${index}].value`} component={InputFieldFF} validate={hasValue} />\n\n            <UiField label=\"&nbsp;\">\n                <Button className={styles.button} onClick={removeSpecialKeyFieldsFromFormState}>\n                    {i18n.t('Remove')}\n                </Button>\n            </UiField>\n        </div>;\n};\nFieldCommandSpecialCharacter.propTypes = {\n  index: PropTypes.number.isRequired\n};","import { TextAreaFieldFF, ReactFinalForm } from '@dhis2/ui';\nimport React from 'react';\nimport { FIELD_COMMAND_SUCCESS_MESSAGE_NAME } from './fieldNames';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FieldCommandSuccessMessage = () => <Field dataTest={dataTest('forms-fieldcommandsuccessmessage')} name={FIELD_COMMAND_SUCCESS_MESSAGE_NAME} label={i18n.t('Success message')} component={TextAreaFieldFF} />;","import { CheckboxFieldFF, ReactFinalForm } from '@dhis2/ui';\nimport React from 'react';\nimport { FIELD_COMMAND_USE_CURRENT_PERIOD_FOR_REPORTING_NAME } from './fieldNames';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FieldCommandUseCurrentPeriodForReporting = () => <Field type=\"checkbox\" dataTest={dataTest('forms-fieldusecurrentperiodforreporting')} name={FIELD_COMMAND_USE_CURRENT_PERIOD_FOR_REPORTING_NAME} label={i18n.t('Use current period for reporting')} component={CheckboxFieldFF} />;","import { TextAreaFieldFF, ReactFinalForm } from '@dhis2/ui';\nimport React from 'react';\nimport { FIELD_COMMAND_WRONG_FORMAT_MESSAGE_NAME } from './fieldNames';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FieldCommandWrongFormatMessage = () => <Field dataTest={dataTest('forms-fieldcommandwrongformatmessage')} name={FIELD_COMMAND_WRONG_FORMAT_MESSAGE_NAME} label={i18n.t('Wrong format message')} component={TextAreaFieldFF} />;","import { InputFieldFF, ReactFinalForm } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { FIELD_COMMAND_SMS_CODES_NAME } from './fieldNames';\nconst {\n  Field\n} = ReactFinalForm;\nexport const ProgramStageDataElements = ({\n  programStageDataElements,\n  smsCodes\n}) => {\n  return <>\n            {programStageDataElements.map(({\n      dataElement\n    }) => <Field key={dataElement.id} name={`${FIELD_COMMAND_SMS_CODES_NAME}.${dataElement.id}`} label={dataElement.displayName} component={InputFieldFF} format={value => value?.code || null} parse={code => {\n      const currentValue = smsCodes[dataElement.id];\n      const newValue = { ...currentValue,\n        code: code || '',\n        dataElement\n      };\n      return newValue;\n    }} />)}\n        </>;\n};\nProgramStageDataElements.propTypes = {\n  programStageDataElements: PropTypes.arrayOf(PropTypes.shape({\n    dataElement: PropTypes.shape({\n      displayName: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired\n    })\n  })).isRequired,\n  smsCodes: PropTypes.objectOf(PropTypes.shape({\n    dataElement: PropTypes.shape({\n      id: PropTypes.string.isRequired\n    }).isRequired,\n    code: PropTypes.string,\n    compulsory: PropTypes.bool,\n    optionId: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n  }))\n};","import { FIELD_COMMAND_SMS_CODES_NAME } from '../smsCommandFields';\nexport const DE_COC_toFormName = (dataElement, categoryOptionCombo) => {\n  const dataElementId = dataElement.id;\n  const cocCode = categoryOptionCombo?.code;\n  const isDefault = cocCode === 'default';\n\n  if (!cocCode || isDefault) {\n    return `${FIELD_COMMAND_SMS_CODES_NAME}.${dataElementId}`;\n  }\n\n  return `${FIELD_COMMAND_SMS_CODES_NAME}.${dataElementId}-${cocCode}`;\n};","import { Button, ButtonStrip, Modal, ModalActions, ModalContent, ModalTitle, Table, TableBody, TableCell, TableCellHead, TableHead, TableRow, TableRowHead } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nexport const DeleteCommandsConfirmationDialog = ({\n  commands,\n  onCancelClick,\n  onDeleteClick\n}) => {\n  return <Modal dataTest={dataTest('commands-deleteconfirmationdialog')}>\n            <ModalTitle>{i18n.t('Delete confirmation')}</ModalTitle>\n            <ModalContent>\n                {commands && <Table>\n                        <TableHead>\n                            <TableRowHead>\n                                <TableCellHead>{i18n.t('Name')}</TableCellHead>\n                            </TableRowHead>\n                        </TableHead>\n\n                        <TableBody>\n                            {commands.map(command => <TableRow key={command.id}>\n                                    <TableCell>{command.displayName}</TableCell>\n                                </TableRow>)}\n                        </TableBody>\n                    </Table>}\n            </ModalContent>\n            <ModalActions>\n                <ButtonStrip>\n                    <Button secondary onClick={onCancelClick} dataTest={dataTest('commands-deleteconfirmationdialog-cancel')}>\n                        {i18n.t('Cancel')}\n                    </Button>\n\n                    <Button primary onClick={onDeleteClick} dataTest={dataTest('commands-deleteconfirmationdialog-confirm')}>\n                        {i18n.t('Delete command configurations')}\n                    </Button>\n                </ButtonStrip>\n            </ModalActions>\n        </Modal>;\n};\nDeleteCommandsConfirmationDialog.propTypes = {\n  commands: PropTypes.arrayOf(PropTypes.shape({\n    displayName: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired\n  })).isRequired,\n  onCancelClick: PropTypes.func.isRequired,\n  onDeleteClick: PropTypes.func.isRequired\n};","import { Button, CircularLoader, ReactFinalForm } from '@dhis2/ui';\nimport React from 'react';\nimport i18n from '../locales';\nconst {\n  useFormState\n} = ReactFinalForm;\nconst subscription = {\n  submitting: true,\n  pristine: true\n};\nexport const SaveCommandButton = () => {\n  const {\n    submitting,\n    pristine\n  } = useFormState({\n    subscription\n  });\n  return <Button primary type=\"submit\" disabled={pristine || submitting} icon={submitting ? <CircularLoader small /> : null}>\n            {i18n.t('Save command')}\n        </Button>;\n};","import { NoticeBox, ReactFinalForm } from '@dhis2/ui';\nimport React from 'react';\nimport { FormRow } from '../forms';\nimport i18n from '../locales';\nconst {\n  useFormState\n} = ReactFinalForm;\nconst subscription = {\n  submitError: true,\n  hasSubmitErrors: true\n};\nexport const SubmitErrors = () => {\n  const {\n    submitError,\n    hasSubmitErrors\n  } = useFormState({\n    subscription\n  });\n  if (!hasSubmitErrors) return null;\n  return <FormRow>\n            <NoticeBox error title={i18n.t('Something went wrong whilst submitting the form')}>\n                {submitError}\n            </NoticeBox>\n        </FormRow>;\n};","/**\n * @param {string} parserType\n * @param {Object} parser\n * @param {string} parser.value\n * @returns {bool}\n */\nexport const isParserType = (parserType, parser) => parserType === parser.value;","import { useDataMutation } from '@dhis2/app-runtime';\nimport { ALERT_PARSER, EVENT_REGISTRATION_PARSER, J2ME_PARSER, KEY_VALUE_PARSER, PROGRAM_STAGE_DATAENTRY_PARSER, TRACKED_ENTITY_REGISTRATION_PARSER, UNREGISTERED_PARSER } from '../smsCommandFields';\nexport const CREATE_SMS_COMMAND_MUTATION = {\n  resource: 'smsCommands',\n  type: 'create',\n\n  /*\n   * @param {Object} args\n   * @param {string} args.parserType\n   * @param {string} args.name\n   * @param {string} args.dataset (id)\n   * @param {string} args.userGroup (id)\n   * @param {string} args.program (id)\n   * @param {string} args.programStage (id)\n   * @returns {Object}\n   */\n  data: ({\n    parserType,\n    name,\n    dataset,\n    userGroup,\n    program,\n    programStage\n  }) => {\n    if (parserType === KEY_VALUE_PARSER.value || parserType === J2ME_PARSER.value) {\n      return {\n        parserType,\n        name,\n        dataset\n      };\n    }\n\n    if (parserType === ALERT_PARSER.value || parserType === UNREGISTERED_PARSER.value) {\n      return {\n        parserType,\n        name,\n        userGroup: {\n          id: userGroup\n        }\n      };\n    }\n\n    if (parserType === TRACKED_ENTITY_REGISTRATION_PARSER.value || parserType === EVENT_REGISTRATION_PARSER.value) {\n      return {\n        parserType,\n        name,\n        program\n      };\n    }\n\n    if (parserType === PROGRAM_STAGE_DATAENTRY_PARSER.value) {\n      return {\n        parserType,\n        name,\n        program,\n        programStage\n      };\n    }\n\n    throw new Error(`You provided an unrecognized parserType \"${parserType}\"`);\n  }\n};\nexport const useCreateSmsCommandMutation = () => useDataMutation(CREATE_SMS_COMMAND_MUTATION);","import { useState } from 'react';\nimport { useDataEngine } from '@dhis2/app-runtime';\nexport const DELETE_SMS_COMMAND_MUTATION = {\n  resource: 'smsCommands',\n  type: 'delete',\n  id: ({\n    id\n  }) => id\n};\n\nconst idToMutationRequestFactory = engine => id => {\n  const variables = {\n    id\n  };\n  return engine.mutate(DELETE_SMS_COMMAND_MUTATION, {\n    variables\n  });\n};\n\nexport const useDeleteSmsCommandMutation = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const engine = useDataEngine();\n  const idToMutationRequest = idToMutationRequestFactory(engine);\n\n  const onStart = () => setLoading(true);\n\n  const onDone = response => {\n    setLoading(false);\n    return response;\n  };\n\n  const onError = error => {\n    setError(error);\n    setLoading(false);\n  };\n\n  const mutate = ({\n    ids\n  }) => {\n    onStart();\n    return Promise.all(ids.map(idToMutationRequest)).then(onDone).catch(onError);\n  };\n\n  return [mutate, {\n    loading,\n    error\n  }];\n};","import { useDataQuery } from '@dhis2/app-runtime';\nexport const READ_SMS_COMMAND_PARSER_TYPE_QUERY = {\n  smsCommand: {\n    resource: 'smsCommands',\n    id: ({\n      id\n    }) => id,\n    params: {\n      fields: 'parserType',\n      paging: 'false'\n    }\n  }\n};\nexport const useReadSmsCommandParserTypeQuery = id => useDataQuery(READ_SMS_COMMAND_PARSER_TYPE_QUERY, {\n  variables: {\n    id\n  }\n});","import { useDataQuery } from '@dhis2/app-runtime';\nexport const SMS_COMMANDS_QUERY = {\n  smsCommands: {\n    resource: 'smsCommands',\n    pager: false,\n    params: ({\n      ids\n    } = {}) => ({\n      // @TODO: Why is `paging: false` not working?\n      paging: 'false',\n      fields: '*',\n      filter: ids ? `ids:in:[${ids.join(',')}]` : undefined\n    })\n  }\n};\nexport const useReadSmsCommandsQuery = () => useDataQuery(SMS_COMMANDS_QUERY);","import { FinalForm } from '@dhis2/ui';\nimport { useContext } from 'react';\nimport { useDataEngine } from '@dhis2/app-runtime';\nimport { AlertContext } from '../notifications';\nimport i18n from '../locales';\nconst {\n  FORM_ERROR\n} = FinalForm;\n\nconst identity = input => input;\n\nexport const REPLACE_SMS_COMMAND_MUTATION = {\n  resource: 'smsCommands',\n  type: 'update',\n  id: ({\n    commandId\n  }) => commandId,\n  // @TODO(non-critical):\n  //   Make this produce static object structures\n  // eslint-disable-next-line no-unused-vars\n  data: ({\n    commandId,\n    ...params\n  }) => params\n};\nexport const UPDATE_SMS_COMMAND_MUTATION = { ...REPLACE_SMS_COMMAND_MUTATION,\n  partial: true\n};\nexport const useUpdateCommand = ({\n  onAfterChange,\n  commandId,\n  formatCommand = identity,\n  replace = false\n}) => {\n  const {\n    addAlert\n  } = useContext(AlertContext);\n  const engine = useDataEngine();\n  return variables => {\n    const allVariables = {\n      variables: { ...formatCommand(variables),\n        commandId\n      }\n    };\n    const mutation = replace ? UPDATE_SMS_COMMAND_MUTATION : REPLACE_SMS_COMMAND_MUTATION;\n    return engine.mutate(mutation, allVariables).then(onAfterChange).catch(error => {\n      const isValidationError = error.type === 'access'; // Potential validation error, return it in a format final-form can handle\n\n      if (isValidationError) {\n        const fallback = 'No error message was provided';\n        const message = error.message || i18n.t(fallback);\n        return {\n          [FORM_ERROR]: message\n        };\n      } // Notify on unexpected errors\n\n\n      addAlert({\n        type: 'critical',\n        message: error.message\n      });\n    });\n  };\n};","import { SingleSelectFieldFF, ReactFinalForm, hasValue } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FIELD_USER_GROUP_NAME = 'userGroup';\nexport const FieldUserGroup = ({\n  userGroups,\n  loading,\n  required,\n  disabled\n}) => <Field disabled={disabled} required={required} loading={loading} dataTest={dataTest('forms-fielduserGroup')} name={FIELD_USER_GROUP_NAME} label={i18n.t('Usergroup')} component={SingleSelectFieldFF} options={userGroups} validate={required && hasValue} />;\nFieldUserGroup.defaultProps = {\n  disabled: false,\n  loading: false,\n  required: false\n};\nFieldUserGroup.propTypes = {\n  userGroups: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired\n  })).isRequired,\n  disabled: PropTypes.bool,\n  loading: PropTypes.bool,\n  required: PropTypes.bool\n};","import { useDataQuery } from '@dhis2/app-runtime';\nexport const USER_GROUPS_QUERY = {\n  userGroups: {\n    resource: 'userGroups',\n    params: {\n      paging: 'false'\n    }\n  }\n};\nexport const useReadUserGroupsQuery = () => useDataQuery(USER_GROUPS_QUERY);","import { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { FieldUserGroup } from './FieldUserGroup';\nimport { useReadUserGroupsQuery } from './useReadUserGroupsQuery';\nimport { useCriticalNotification } from '../notifications/useCriticalNotification';\nexport const FieldUserGroupWithAutoLoad = ({\n  required\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useReadUserGroupsQuery();\n  useCriticalNotification(error);\n\n  if (loading) {\n    return <FieldUserGroup required={required} loading showLoadingStatus userGroups={[]} />;\n  }\n\n  if (error) {\n    return <FieldUserGroup required={required} disabled userGroups={[]} />;\n  }\n\n  const {\n    userGroups\n  } = data.userGroups;\n  const options = userGroups.map(({\n    id,\n    displayName\n  }) => ({\n    label: displayName,\n    value: id\n  }));\n  return <FieldUserGroup required={required} userGroups={options} />;\n};\nFieldUserGroupWithAutoLoad.defaultProps = {\n  required: false\n};\nFieldUserGroupWithAutoLoad.propTypes = {\n  required: PropTypes.bool\n};","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { ReactFinalForm, NoticeBox, CenteredContent, CircularLoader } from '@dhis2/ui';\nimport { useDataQuery } from '@dhis2/app-runtime';\nimport { FieldCommandConfirmMessage, FieldCommandName, FieldCommandParser } from '../smsCommandFields';\nimport { SaveCommandButton, SubmitErrors, useUpdateCommand } from '../smsCommand';\nimport { FieldUserGroup } from '../userGroup';\nimport { FormRow } from '../forms';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Form\n} = ReactFinalForm;\nconst query = {\n  smsCommand: {\n    resource: 'smsCommands',\n    id: ({\n      commandId\n    }) => commandId,\n    params: {\n      fields: ['name', 'parserType', 'receivedMessage', 'userGroup[name,id]']\n    }\n  }\n};\nexport const CommandEditUnregisteredParserForm = ({\n  commandId,\n  onAfterChange\n}) => {\n  const updateCommand = useUpdateCommand({\n    commandId,\n    onAfterChange,\n    replace: true\n  });\n  const {\n    loading,\n    error,\n    data\n  } = useDataQuery(query, {\n    variables: {\n      commandId\n    }\n  });\n\n  if (loading) {\n    return <CenteredContent>\n                <CircularLoader />\n            </CenteredContent>;\n  }\n\n  if (error) {\n    const msg = i18n.t('Something went wrong whilst loading the sms command');\n    return <NoticeBox error title={msg}>\n                {error.message}\n            </NoticeBox>;\n  }\n\n  const {\n    name,\n    parserType,\n    receivedMessage,\n    userGroup\n  } = data.smsCommand;\n  const initialValues = {\n    name,\n    parserType,\n    receivedMessage,\n    userGroup: userGroup.id\n  };\n  const userGroups = [{\n    value: userGroup.id,\n    label: userGroup.name\n  }];\n  return <Form onSubmit={updateCommand} initialValues={initialValues}>\n            {({\n      handleSubmit\n    }) => <form onSubmit={handleSubmit} data-test={dataTest('commands-commandunregisteredparserform')}>\n                    <FormRow>\n                        <FieldCommandName />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandParser disabled />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldUserGroup disabled userGroups={userGroups} />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandConfirmMessage />\n                    </FormRow>\n\n                    <SubmitErrors />\n                    <SaveCommandButton />\n                </form>}\n        </Form>;\n};\nCommandEditUnregisteredParserForm.propTypes = {\n  commandId: PropTypes.string.isRequired,\n  onAfterChange: PropTypes.func.isRequired\n};","import { SingleSelectFieldFF, ReactFinalForm, hasValue } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FIELD_PROGRAM_NAME = 'program';\nexport const FieldProgram = ({\n  programs,\n  loading,\n  required,\n  disabled\n}) => <Field disabled={disabled} required={required} loading={loading} dataTest={dataTest('forms-fieldprogram')} name={FIELD_PROGRAM_NAME} label={i18n.t('Program')} component={SingleSelectFieldFF} options={programs} validate={required && hasValue} format={value => value?.id || null} parse={id => ({\n  id\n})} />;\nFieldProgram.defaultProps = {\n  disabled: false,\n  loading: false,\n  required: false\n};\nFieldProgram.propTypes = {\n  programs: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired\n  })).isRequired,\n  disabled: PropTypes.bool,\n  loading: PropTypes.bool,\n  required: PropTypes.bool\n};","import { useDataQuery } from '@dhis2/app-runtime';\nexport const PROGRAMS_QUERY = {\n  programs: {\n    resource: 'programs',\n    params: ({\n      registration\n    }) => {\n      const params = {\n        paging: 'false'\n      };\n\n      if (typeof registration !== 'undefined') {\n        const filter = registration ? 'programType:eq:WITH_REGISTRATION' : 'programType:eq:WITHOUT_REGISTRATION';\n        params.filter = filter;\n      }\n\n      return params;\n    }\n  }\n};\nexport const useReadProgramsQuery = registration => useDataQuery(PROGRAMS_QUERY, {\n  variables: {\n    registration\n  }\n});","import { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { FieldProgram } from './FieldProgram';\nimport { useReadProgramsQuery } from './useReadProgramsQuery';\nimport { useCriticalNotification } from '../notifications/useCriticalNotification';\nexport const FieldProgramWithAutoLoad = ({\n  required,\n  registration\n}) => {\n  const variables = {\n    registration\n  };\n  const {\n    loading,\n    error,\n    data\n  } = useReadProgramsQuery({\n    variables\n  });\n  useCriticalNotification(error);\n\n  if (loading) {\n    return <FieldProgram required={required} loading showLoadingStatus programs={[]} />;\n  }\n\n  if (error) {\n    return <FieldProgram required={required} disabled programs={[]} />;\n  }\n\n  const {\n    programs\n  } = data.programs;\n  const options = programs.map(({\n    id,\n    displayName\n  }) => ({\n    label: displayName,\n    value: id\n  }));\n  return <FieldProgram required={required} programs={options} />;\n};\nFieldProgramWithAutoLoad.defaultProps = {\n  required: false,\n  // undefined = both\n  registration: undefined\n};\nFieldProgramWithAutoLoad.propTypes = {\n  registration: PropTypes.bool,\n  required: PropTypes.bool\n};","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { ReactFinalForm, NoticeBox, CenteredContent, CircularLoader } from '@dhis2/ui';\nimport { useDataQuery } from '@dhis2/app-runtime';\nimport { FIELD_COMMAND_SMS_CODES_NAME, FieldCommandName, FieldCommandSeparator, FieldCommandParser, FieldCommandDefaultMessage, FieldCommandWrongFormatMessage, FieldCommandNoUserMessage, FieldCommandMoreThanOneOrgUnitMessage, FieldCommandSuccessMessage, FieldCommandSmsCode } from '../smsCommandFields';\nimport { SaveCommandButton, SubmitErrors, useUpdateCommand } from '../smsCommand';\nimport { FormRow } from '../forms';\nimport { FieldProgram } from '../program';\nimport i18n from '../locales';\nconst {\n  Form\n} = ReactFinalForm;\n\nconst formatSmsCodes = updates => ({ ...updates,\n  [FIELD_COMMAND_SMS_CODES_NAME]: Object.values(updates[FIELD_COMMAND_SMS_CODES_NAME])\n});\n\nconst query = {\n  smsCommand: {\n    resource: 'smsCommands',\n    id: ({\n      commandId\n    }) => commandId,\n    params: {\n      fields: ['name', 'parserType', 'separator', 'defaultMessage', 'wrongFormatMessage', 'noUserMessage', 'moreThanOneOrgUnitMessage', 'successMessage', // The queries below should be reduced to only the data we need\n      'program[id,displayName,programTrackedEntityAttributes[trackedEntityAttribute[:all,id,displayName]]]', 'smsCodes[:all,trackedEntityAttribute[id,displayName,valueType]]']\n    }\n  }\n};\nexport const CommandEditTrackedEntityRegistrationParserForm = ({\n  commandId,\n  onAfterChange\n}) => {\n  const updateCommand = useUpdateCommand({\n    commandId,\n    onAfterChange,\n    formatCommand: formatSmsCodes //partial: true,\n\n  });\n  const {\n    loading,\n    error,\n    data\n  } = useDataQuery(query, {\n    variables: {\n      commandId\n    }\n  });\n\n  if (loading) {\n    return <CenteredContent>\n                <CircularLoader />\n            </CenteredContent>;\n  }\n\n  if (error) {\n    const msg = i18n.t('Something went wrong whilst loading the sms command');\n    return <NoticeBox error title={msg}>\n                {error.message}\n            </NoticeBox>;\n  }\n\n  const {\n    name,\n    parserType,\n    program,\n    separator,\n    defaultMessage,\n    wrongFormatMessage,\n    noUserMessage,\n    moreThanOneOrgUnitMessage,\n    successMessage,\n    smsCodes: smsCodesOriginal\n  } = data.smsCommand;\n  const smsCodes = smsCodesOriginal.reduce((curSmsCodes, smsCode) => ({ ...curSmsCodes,\n    [smsCode.trackedEntityAttribute.id]: smsCode\n  }), {});\n  const initialValues = {\n    name,\n    parserType,\n    program,\n    separator,\n    defaultMessage,\n    wrongFormatMessage,\n    noUserMessage,\n    moreThanOneOrgUnitMessage,\n    successMessage,\n    smsCodes\n  };\n  const selectedProgramOption = {\n    value: program.id,\n    label: program.displayName\n  };\n  /**\n   * Create usable data for the dynamic fields\n   */\n  // The tracked entity attributes here have the right order for the fields\n\n  const trackedEntityAttributes = program.programTrackedEntityAttributes.map(({\n    trackedEntityAttribute\n  }) => trackedEntityAttribute); // Creating an array with only the data we need to render our dynamic form fields\n\n  const dynamicFields = trackedEntityAttributes.map(trackedEntityAttribute => {\n    const {\n      id,\n      displayName,\n      valueType\n    } = trackedEntityAttribute;\n    const merged = {\n      id,\n      displayName,\n      valueType\n    };\n    const smsCode = smsCodes[id];\n\n    if (smsCode) {\n      // This contains the actual value of the field\n      merged.initialValue = smsCode.code;\n    }\n\n    return merged;\n  });\n  return <Form onSubmit={updateCommand} initialValues={initialValues}>\n            {({\n      handleSubmit\n    }) => <form onSubmit={handleSubmit}>\n                    <FormRow>\n                        <FieldCommandName />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandParser disabled />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldProgram disabled programs={[selectedProgramOption]} />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandSeparator />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandDefaultMessage />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandWrongFormatMessage />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandNoUserMessage />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandMoreThanOneOrgUnitMessage />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandSuccessMessage />\n                    </FormRow>\n\n                    <h2>{i18n.t('Tracked entity attribute')}</h2>\n\n                    {dynamicFields.map(dynamicField => {\n        // I assume this should switch field types based on `valueType`\n        // which can be 'TEXT', 'NUMBER', etc. Currently this renders\n        // a regular input for everything.\n        return <FormRow key={dynamicField.id}>\n                                <FieldCommandSmsCode id={dynamicField.id} displayName={dynamicField.displayName} valueType={dynamicField.valueType} />\n                            </FormRow>;\n      })}\n\n                    <SubmitErrors />\n                    <SaveCommandButton />\n                </form>}\n        </Form>;\n};\nCommandEditTrackedEntityRegistrationParserForm.propTypes = {\n  commandId: PropTypes.string.isRequired,\n  onAfterChange: PropTypes.func.isRequired\n};","import { SingleSelectFieldFF, ReactFinalForm, hasValue } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FIELD_PROGRAM_STAGE_NAME = 'programStage';\nexport const FieldProgramStage = ({\n  programStages,\n  disabled,\n  loading,\n  required\n}) => <Field disabled={disabled} required={required} loading={loading} dataTest={dataTest('forms-fieldprogramStage')} name={FIELD_PROGRAM_STAGE_NAME} label={i18n.t('Program stage')} component={SingleSelectFieldFF} options={programStages} validate={required && hasValue} format={value => value?.id || null} parse={id => ({\n  id\n})} />;\nFieldProgramStage.defaultProps = {\n  disabled: false,\n  loading: false,\n  required: false\n};\nFieldProgramStage.propTypes = {\n  programStages: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired\n  })).isRequired,\n  disabled: PropTypes.bool,\n  loading: PropTypes.bool,\n  required: PropTypes.bool\n};","import { useDataQuery } from '@dhis2/app-runtime';\nexport const PROGRAM_STAGES_QUERY = {\n  programStages: {\n    resource: 'programStages',\n    params: ({\n      programId\n    }) => ({\n      paging: 'false',\n      filter: programId ? `program.id:eq:${programId}` : undefined\n    })\n  }\n};\nexport const useReadProgramStagesQuery = ({\n  programId,\n  lazy\n}) => useDataQuery(PROGRAM_STAGES_QUERY, {\n  variables: {\n    programId\n  },\n  lazy\n});","import { PropTypes } from '@dhis2/prop-types';\nimport React, { useEffect } from 'react';\nimport { FieldProgramStage } from './FieldProgramStage';\nimport { useReadProgramStagesQuery } from './useReadProgramStagesQuery';\nimport { useCriticalNotification } from '../notifications/useCriticalNotification';\nexport const FieldProgramStageWithAutoLoad = ({\n  required,\n  programId\n}) => {\n  const {\n    loading,\n    error,\n    data,\n    refetch\n  } = useReadProgramStagesQuery({\n    lazy: true\n  });\n  useCriticalNotification(error);\n  useEffect(() => {\n    if (programId) refetch({\n      programId\n    });\n  }, [programId]);\n\n  if (loading) {\n    return <FieldProgramStage loading required={required} programStages={[]} />;\n  }\n\n  if (error) {\n    return <FieldProgramStage disabled required={required} programStages={[]} />;\n  }\n\n  if (!programId || !data) {\n    return <FieldProgramStage disabled required={required} programStages={[]} />;\n  }\n\n  const programStages = data?.programStages?.programStages || [];\n  const options = programStages.map(({\n    id,\n    displayName\n  }) => ({\n    label: displayName,\n    value: id\n  }));\n  return <FieldProgramStage required={required} programStages={options} />;\n};\nFieldProgramStageWithAutoLoad.defaultProps = {\n  required: false\n};\nFieldProgramStageWithAutoLoad.propTypes = {\n  programId: PropTypes.string.isRequired,\n  required: PropTypes.bool\n};","import { useDataQuery } from '@dhis2/app-runtime';\nconst READ_SMS_COMMAND_PROGRAM_STAGE_DATA_ENTRY_PARSER_QUERY = {\n  smsCommand: {\n    resource: 'smsCommands',\n    id: ({\n      id\n    }) => id,\n    params: {\n      fields: ['*', 'program[id,displayName]', 'programStage[id,displayName,programStageDataElements[dataElement[id,displayName]]]'],\n      paging: 'false'\n    }\n  }\n};\nexport const useReadSmsCommandProgramStageDataEntryParserQuery = programStageId => useDataQuery(READ_SMS_COMMAND_PROGRAM_STAGE_DATA_ENTRY_PARSER_QUERY, {\n  variables: {\n    id: programStageId\n  }\n});","import { CenteredContent, CircularLoader, NoticeBox, ReactFinalForm } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { FIELD_COMMAND_DEFAULT_MESSAGE_NAME, FIELD_COMMAND_MORE_THAN_ONE_ORG_UNIT_MESSAGE_NAME, FIELD_COMMAND_NAME_NAME, FIELD_COMMAND_NO_USER_MESSAGE_NAME, FIELD_COMMAND_PARSER_NAME, FIELD_COMMAND_PROGAM_NAME, FIELD_COMMAND_PROGAM_STAGE_NAME, FIELD_COMMAND_SEPARATOR_NAME, FIELD_COMMAND_SMS_CODES_NAME, FIELD_COMMAND_SUCCESS_MESSAGE_NAME, FIELD_COMMAND_WRONG_FORMAT_MESSAGE_NAME, FieldCommandDefaultMessage, FieldCommandMoreThanOneOrgUnitMessage, FieldCommandName, FieldCommandNoUserMessage, FieldCommandParser, FieldCommandSeparator, FieldCommandSuccessMessage, FieldCommandWrongFormatMessage, PROGRAM_STAGE_DATAENTRY_PARSER, ProgramStageDataElements } from '../smsCommandFields';\nimport { SaveCommandButton, SubmitErrors, useUpdateCommand } from '../smsCommand';\nimport { FieldProgram } from '../program';\nimport { FieldProgramStage } from '../programStage';\nimport { FormRow } from '../forms';\nimport { dataTest } from '../dataTest';\nimport { useReadSmsCommandProgramStageDataEntryParserQuery } from './useReadSmsCommandProgramStageDataEntryParserQuery';\nimport i18n from '../locales';\nconst {\n  Form\n} = ReactFinalForm;\n\nconst getInitialFormState = command => {\n  const name = command[FIELD_COMMAND_NAME_NAME];\n  const program = command[FIELD_COMMAND_PROGAM_NAME];\n  const programStage = command[FIELD_COMMAND_PROGAM_STAGE_NAME];\n  const separator = command[FIELD_COMMAND_SEPARATOR_NAME];\n  const defaultMessage = command[FIELD_COMMAND_DEFAULT_MESSAGE_NAME];\n  const wrongFormatMessage = command[FIELD_COMMAND_WRONG_FORMAT_MESSAGE_NAME];\n  const noUserMessage = command[FIELD_COMMAND_NO_USER_MESSAGE_NAME];\n  const moreThanOneOrgUnitMessage = command[FIELD_COMMAND_MORE_THAN_ONE_ORG_UNIT_MESSAGE_NAME];\n  const successMessage = command[FIELD_COMMAND_SUCCESS_MESSAGE_NAME];\n  const smsCodes = command[FIELD_COMMAND_SMS_CODES_NAME].reduce((curSmsCodes, smsCode) => ({ ...curSmsCodes,\n    [smsCode.dataElement.id]: smsCode\n  }), {});\n  return {\n    [FIELD_COMMAND_NAME_NAME]: name,\n    [FIELD_COMMAND_PARSER_NAME]: PROGRAM_STAGE_DATAENTRY_PARSER.value,\n    [FIELD_COMMAND_PROGAM_NAME]: program,\n    [FIELD_COMMAND_PROGAM_STAGE_NAME]: programStage,\n    [FIELD_COMMAND_SEPARATOR_NAME]: separator,\n    [FIELD_COMMAND_DEFAULT_MESSAGE_NAME]: defaultMessage,\n    [FIELD_COMMAND_WRONG_FORMAT_MESSAGE_NAME]: wrongFormatMessage,\n    [FIELD_COMMAND_NO_USER_MESSAGE_NAME]: noUserMessage,\n    [FIELD_COMMAND_MORE_THAN_ONE_ORG_UNIT_MESSAGE_NAME]: moreThanOneOrgUnitMessage,\n    [FIELD_COMMAND_SUCCESS_MESSAGE_NAME]: successMessage,\n    [FIELD_COMMAND_SMS_CODES_NAME]: smsCodes\n  };\n};\n\nconst formatSmsCodes = updates => ({ ...updates,\n  [FIELD_COMMAND_SMS_CODES_NAME]: Object.values(updates[FIELD_COMMAND_SMS_CODES_NAME])\n});\n\nexport const CommandEditProgramStageDataEntryParserForm = ({\n  commandId,\n  onAfterChange\n}) => {\n  const {\n    error: loadingCommandError,\n    data: commandData\n  } = useReadSmsCommandProgramStageDataEntryParserQuery(commandId);\n  const command = commandData?.smsCommand;\n  const programStageDataElements = command?.programStage.programStageDataElements;\n  const updateCommand = useUpdateCommand({\n    commandId,\n    onAfterChange,\n    formatCommand: formatSmsCodes\n  });\n\n  if (loadingCommandError) {\n    const msg = i18n.t(\"Something went wrong whilst loading the command's details\");\n    return <NoticeBox error title={msg}>\n                {loadingCommandError.message}\n            </NoticeBox>;\n  }\n\n  if (!command) {\n    return <CenteredContent>\n                <CircularLoader />\n            </CenteredContent>;\n  }\n\n  const initialValues = getInitialFormState(command);\n  const selectedProgramOption = {\n    value: command.program.id,\n    label: command.program.displayName\n  };\n  const selectedProgramStageOption = {\n    value: command.programStage.id,\n    label: command.programStage.displayName\n  };\n  return <Form onSubmit={updateCommand} initialValues={initialValues}>\n            {({\n      handleSubmit,\n      values\n    }) => <form onSubmit={handleSubmit} data-test={dataTest('commands-commandeditprogramstagedataentryparserform')}>\n                    <FormRow>\n                        <FieldCommandName />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandParser disabled />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldProgram disabled programs={[selectedProgramOption]} />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldProgramStage disabled programStages={[selectedProgramStageOption]} />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandSeparator />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandDefaultMessage />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandWrongFormatMessage />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandNoUserMessage />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandMoreThanOneOrgUnitMessage />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandSuccessMessage />\n                    </FormRow>\n\n                    {programStageDataElements && <FormRow>\n                            <h2>{i18n.t('Program stage data elements')}</h2>\n\n                            <ProgramStageDataElements programStageDataElements={programStageDataElements} smsCodes={values[FIELD_COMMAND_SMS_CODES_NAME]} />\n                        </FormRow>}\n\n                    <SubmitErrors />\n                    <SaveCommandButton />\n                </form>}\n        </Form>;\n};\nCommandEditProgramStageDataEntryParserForm.propTypes = {\n  commandId: PropTypes.string.isRequired,\n  onAfterChange: PropTypes.func.isRequired\n};","import { useDataQuery } from '@dhis2/app-runtime'; // @TODO(non-critical):\n//   The response for key value parser\n//   does contain the information for \"Data element category combination\".\n//   But it does not contain the id of the category option combo,\n//   only the data element and a code.\n\nexport const READ_SMS_COMMAND_KEY_VALUE_PARSER_QUERY = {\n  smsCommand: {\n    resource: 'smsCommands',\n    id: ({\n      id\n    }) => id,\n    params: {\n      fields: ['*', 'dataset[id,displayName,dataSetElements[dataElement[id,displayName,categoryCombo[categoryOptionCombos[id,displayName,code]]]]'],\n      paging: 'false'\n    }\n  }\n};\nexport const useReadSmsCommandWithDataSetQuery = id => useDataQuery(READ_SMS_COMMAND_KEY_VALUE_PARSER_QUERY, {\n  variables: {\n    id\n  }\n});","import { CenteredContent, CircularLoader, NoticeBox, ReactFinalForm } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { ALL_DATAVALUE, AT_LEAST_ONE_DATAVALUE, CommandsAddSpecialCharacters, DataElementTimesCategoryOptionCombos, FIELD_COMMAND_COMPLETENESS_METHOD_NAME, FIELD_COMMAND_DEFAULT_MESSAGE_NAME, FIELD_COMMAND_MORE_THAN_ONE_ORG_UNIT_MESSAGE_NAME, FIELD_COMMAND_NAME_NAME, FIELD_COMMAND_NO_USER_MESSAGE_NAME, FIELD_COMMAND_PARSER_NAME, FIELD_COMMAND_SEPARATOR_NAME, FIELD_COMMAND_SMS_CODES_NAME, FIELD_COMMAND_SPECIAL_CHARS_NAME, FIELD_COMMAND_SUCCESS_MESSAGE_NAME, FIELD_COMMAND_USE_CURRENT_PERIOD_FOR_REPORTING_NAME, FIELD_COMMAND_WRONG_FORMAT_MESSAGE_NAME, FieldCommandCompletenessMethod, FieldCommandDefaultMessage, FieldCommandMoreThanOneOrgUnitMessage, FieldCommandName, FieldCommandNoUserMessage, FieldCommandParser, FieldCommandSeparator, FieldCommandSpecialCharacter, FieldCommandSuccessMessage, FieldCommandUseCurrentPeriodForReporting, FieldCommandWrongFormatMessage, KEY_VALUE_PARSER } from '../smsCommandFields';\nimport { SaveCommandButton, SubmitErrors, getSmsCodeDuplicates, useUpdateCommand } from '../smsCommand';\nimport { FIELD_DATA_SET_NAME, FieldDataSet } from '../dataSet';\nimport { FormRow } from '../forms';\nimport { useReadSmsCommandWithDataSetQuery } from './useReadSmsCommandWithDataSetQuery';\nimport i18n from '../locales';\nconst {\n  Form,\n  FormSpy\n} = ReactFinalForm;\n\nconst getInitialFormState = (command, initialCompletenessMethod) => {\n  const name = command[FIELD_COMMAND_NAME_NAME];\n  const parserType = KEY_VALUE_PARSER.value;\n  const dataSetId = {\n    id: command[FIELD_DATA_SET_NAME].id\n  };\n  const separator = command[FIELD_COMMAND_SEPARATOR_NAME];\n  const completenessMethod = initialCompletenessMethod || command[FIELD_COMMAND_COMPLETENESS_METHOD_NAME] || ALL_DATAVALUE.value;\n  const useCurrentPeriodForReporting = command[FIELD_COMMAND_USE_CURRENT_PERIOD_FOR_REPORTING_NAME];\n  const defaultMessage = command[FIELD_COMMAND_DEFAULT_MESSAGE_NAME];\n  const wrongFormatMessage = command[FIELD_COMMAND_WRONG_FORMAT_MESSAGE_NAME];\n  const noUserMessage = command[FIELD_COMMAND_NO_USER_MESSAGE_NAME];\n  const moreThanOneOrgUnitMessage = command[FIELD_COMMAND_MORE_THAN_ONE_ORG_UNIT_MESSAGE_NAME];\n  const successMessage = command[FIELD_COMMAND_SUCCESS_MESSAGE_NAME];\n  const smsCodes = command[FIELD_COMMAND_SMS_CODES_NAME].reduce((acc, {\n    code,\n    compulsory,\n    formula,\n    optionId,\n    dataElement\n  }) => {\n    const key = optionId < 10 ? dataElement.id : `${dataElement.id}-${optionId}`;\n    const smsCode = {\n      code,\n      compulsory,\n      optionId\n    };\n\n    if (formula) {\n      smsCode.formula = formula;\n    }\n\n    return { ...acc,\n      [key]: smsCode\n    };\n  }, {});\n  const specialCharacters = command[FIELD_COMMAND_SPECIAL_CHARS_NAME] || [];\n  return {\n    [FIELD_COMMAND_NAME_NAME]: name,\n    [FIELD_COMMAND_PARSER_NAME]: parserType,\n    [FIELD_DATA_SET_NAME]: dataSetId,\n    [FIELD_COMMAND_SEPARATOR_NAME]: separator,\n    [FIELD_COMMAND_COMPLETENESS_METHOD_NAME]: completenessMethod,\n    [FIELD_COMMAND_USE_CURRENT_PERIOD_FOR_REPORTING_NAME]: useCurrentPeriodForReporting,\n    [FIELD_COMMAND_DEFAULT_MESSAGE_NAME]: defaultMessage,\n    [FIELD_COMMAND_WRONG_FORMAT_MESSAGE_NAME]: wrongFormatMessage,\n    [FIELD_COMMAND_NO_USER_MESSAGE_NAME]: noUserMessage,\n    [FIELD_COMMAND_MORE_THAN_ONE_ORG_UNIT_MESSAGE_NAME]: moreThanOneOrgUnitMessage,\n    [FIELD_COMMAND_SUCCESS_MESSAGE_NAME]: successMessage,\n    smsCodes,\n    specialCharacters\n  };\n};\n\nconst globalValidate = DE_COC_combination_data => values => {\n  let hasErrors = false;\n  const errors = {};\n  const completenessMethod = values[FIELD_COMMAND_COMPLETENESS_METHOD_NAME];\n  const smsCodesFormState = values[FIELD_COMMAND_SMS_CODES_NAME];\n  const smsCodes = smsCodesFormState ? Object.entries(smsCodesFormState) : [];\n  const smsCodesWithValue = smsCodes.filter(([_, {\n    code\n  }]) => code); //eslint-disable-line no-unused-vars\n\n  if (completenessMethod === ALL_DATAVALUE.value && smsCodesWithValue.length !== DE_COC_combination_data?.length) {\n    hasErrors = true;\n    errors[FIELD_COMMAND_SMS_CODES_NAME] = errors[FIELD_COMMAND_SMS_CODES_NAME] || {};\n    errors[FIELD_COMMAND_SMS_CODES_NAME] = {\n      global: i18n.t(`With completeness method \"${ALL_DATAVALUE.label}\", all sms codes need to have a value`)\n    };\n  } else if (completenessMethod === AT_LEAST_ONE_DATAVALUE.value && !smsCodesWithValue.length) {\n    hasErrors = true;\n    errors[FIELD_COMMAND_SMS_CODES_NAME] = errors[FIELD_COMMAND_SMS_CODES_NAME] || {};\n    Object.assign(errors[FIELD_COMMAND_SMS_CODES_NAME], {\n      global: i18n.t(`With completeness method \"${AT_LEAST_ONE_DATAVALUE.label}\", you need to provide at least one value`)\n    });\n  }\n\n  if (smsCodesWithValue.length) {\n    const duplicates = getSmsCodeDuplicates(smsCodesWithValue);\n\n    if (duplicates.length) {\n      hasErrors = true;\n      const duplicateErrors = {};\n      duplicates.forEach(duplicate => {\n        duplicateErrors[duplicate] = {\n          code: i18n.t('Duplicate value!')\n        };\n      });\n      errors[FIELD_COMMAND_SMS_CODES_NAME] = errors[FIELD_COMMAND_SMS_CODES_NAME] || {};\n      Object.assign(errors[FIELD_COMMAND_SMS_CODES_NAME], duplicateErrors);\n    }\n  }\n\n  return hasErrors ? errors : undefined;\n};\n\nconst formatSmsCodes = updates => {\n  const smsCodes = updates[FIELD_COMMAND_SMS_CODES_NAME];\n  const formattedSmsCodes = Object.entries(smsCodes).map(([id, {\n    code,\n    formula,\n    compulsory,\n    optionId\n  }]) => {\n    const [dataElementId] = id.split('-');\n    const formattedSmsCode = {\n      code,\n      compulsory,\n      dataElement: {\n        id: dataElementId\n      }\n    };\n\n    if (formula) {\n      formattedSmsCode.formula = formula;\n    }\n\n    if (optionId) {\n      formattedSmsCode.optionId = optionId;\n    }\n\n    return formattedSmsCode;\n  });\n  return { ...updates,\n    [FIELD_COMMAND_SMS_CODES_NAME]: formattedSmsCodes\n  };\n};\n\nexport const CommandEditWithDataSetForm = ({\n  commandId,\n  onAfterChange,\n  dataTest,\n  initialCompletenessMethod\n}) => {\n  const {\n    error: loadingCommandError,\n    data: commandData\n  } = useReadSmsCommandWithDataSetQuery(commandId);\n  const command = commandData?.smsCommand;\n  const updateCommand = useUpdateCommand({\n    commandId,\n    onAfterChange,\n    formatCommand: formatSmsCodes\n  });\n\n  if (loadingCommandError) {\n    const msg = i18n.t(\"Something went wrong whilst loading the command's details\");\n    return <NoticeBox error title={msg}>\n                {loadingCommandError.message}\n            </NoticeBox>;\n  }\n\n  if (!command) {\n    return <CenteredContent>\n                <CircularLoader />\n            </CenteredContent>;\n  }\n\n  const selectedDataSetOption = {\n    value: command[FIELD_DATA_SET_NAME].id,\n    label: command[FIELD_DATA_SET_NAME].displayName\n  };\n  const initialValues = getInitialFormState(command, initialCompletenessMethod);\n  const DE_COC_combination_data = command.dataset.dataSetElements.reduce((curCombinations, {\n    dataElement\n  }) => {\n    const categoryOptionCombo = dataElement.categoryCombo?.categoryOptionCombo;\n\n    if (!categoryOptionCombo) {\n      return [...curCombinations, {\n        dataElement\n      }];\n    }\n\n    const combos = categoryOptionCombo.map(COC => ({\n      dataElement,\n      categoryOptionCombo: COC\n    }));\n    return [...curCombinations, ...combos];\n  }, []);\n  return <Form onSubmit={updateCommand} initialValues={initialValues} validate={globalValidate(DE_COC_combination_data)} subscription={{}}>\n            {({\n      handleSubmit,\n      form\n    }) => <form onSubmit={handleSubmit} data-test={dataTest}>\n                    <FormRow>\n                        <FieldCommandName />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandParser disabled />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldDataSet disabled dataSets={[selectedDataSetOption]} />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandCompletenessMethod />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandUseCurrentPeriodForReporting />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandSeparator />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandDefaultMessage />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandWrongFormatMessage />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandNoUserMessage />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandMoreThanOneOrgUnitMessage />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandSuccessMessage />\n                    </FormRow>\n\n                    {DE_COC_combination_data && <DataElementTimesCategoryOptionCombos DE_COC_combinations={DE_COC_combination_data} />}\n\n                    <div>\n                        <h2>Special characters</h2>\n\n                        <FormSpy subscription={{\n          values: true\n        }}>\n                            {({\n            values\n          }) => <>\n                                    {values[FIELD_COMMAND_SPECIAL_CHARS_NAME].map((_, index) => <FormRow key={index}>\n                                            <FieldCommandSpecialCharacter index={index} />\n                                        </FormRow>)}\n                                </>}\n                        </FormSpy>\n\n                        <CommandsAddSpecialCharacters />\n\n                        <FormRow>\n                            <hr />\n                        </FormRow>\n                    </div>\n\n                    <SubmitErrors />\n                    <SaveCommandButton />\n                </form>}\n        </Form>;\n};\nCommandEditWithDataSetForm.propTypes = {\n  commandId: PropTypes.string.isRequired,\n  onAfterChange: PropTypes.func.isRequired,\n  dataTest: PropTypes.string,\n  initialCompletenessMethod: PropTypes.string\n};","export const getSmsCodeDuplicates = smsCodes => {\n  const duplicates = smsCodes.reduce((curDuplicates, smsCode, index) => {\n    const [name, code] = smsCode;\n    const errorAlreadyPresent = curDuplicates.includes(name);\n\n    if (errorAlreadyPresent) {\n      return curDuplicates;\n    }\n\n    const potentialDuplicates = smsCodes.filter( // eslint-disable-next-line no-unused-vars\n    ([_, curCode], curIndex) => {\n      return curCode.code === code.code && curIndex !== index;\n    });\n    const noDuplicates = !potentialDuplicates.length;\n\n    if (noDuplicates) {\n      return curDuplicates;\n    }\n\n    const newlyFoundDuplicates = potentialDuplicates.reduce((curWithCodeDuplicates, [curName]) => {\n      return [...curWithCodeDuplicates, curName];\n    }, [name]);\n    return [...curDuplicates, ...newlyFoundDuplicates];\n  }, []);\n  return duplicates;\n};","import { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { CommandEditWithDataSetForm } from '../smsCommandWithDataSet';\nimport { dataTest } from '../dataTest';\nexport const CommandEditKeyValueParserForm = ({\n  commandId,\n  onAfterChange\n}) => <CommandEditWithDataSetForm dataTest={dataTest('smscommandkeyvalueparser-commandeditkeyvalueparserform')} commandId={commandId} onAfterChange={onAfterChange} />;\nCommandEditKeyValueParserForm.propTypes = {\n  commandId: PropTypes.string.isRequired,\n  onAfterChange: PropTypes.func.isRequired\n};","import { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { CommandEditWithDataSetForm } from '../smsCommandWithDataSet';\nimport { AT_LEAST_ONE_DATAVALUE } from '../smsCommandFields';\nimport { dataTest } from '../dataTest';\nexport const CommandEditJ2MEParserForm = ({\n  commandId,\n  onAfterChange\n}) => <CommandEditWithDataSetForm dataTest={dataTest('smscommandkeyvalueparser-commandeditj2meparserform')} commandId={commandId} onAfterChange={onAfterChange} initialCompletenessMethod={AT_LEAST_ONE_DATAVALUE.value} />;\nCommandEditJ2MEParserForm.propTypes = {\n  commandId: PropTypes.string.isRequired,\n  onAfterChange: PropTypes.func.isRequired\n};","import { useDataQuery } from '@dhis2/app-runtime';\nexport const READ_SMS_COMMAND_EVENT_REGISTRATION_PARSER_QUERY = {\n  smsCommand: {\n    resource: 'smsCommands',\n    id: ({\n      id\n    }) => id,\n    params: {\n      fields: ['*', 'program[id,displayName]', 'programStage[id,displayName,programStageDataElements[id,dataElement[id,displayName]]'],\n      paging: 'false'\n    }\n  }\n};\nexport const useReadSmsCommandEventRegistrationParserQuery = id => useDataQuery(READ_SMS_COMMAND_EVENT_REGISTRATION_PARSER_QUERY, {\n  variables: {\n    id\n  }\n});","import { CenteredContent, CircularLoader, NoticeBox, ReactFinalForm } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { EVENT_REGISTRATION_PARSER, FIELD_COMMAND_DEFAULT_MESSAGE_NAME, FIELD_COMMAND_MORE_THAN_ONE_ORG_UNIT_MESSAGE_NAME, FIELD_COMMAND_NAME_NAME, FIELD_COMMAND_NO_USER_MESSAGE_NAME, FIELD_COMMAND_PARSER_NAME, FIELD_COMMAND_PROGAM_NAME, FIELD_COMMAND_PROGAM_STAGE_NAME, FIELD_COMMAND_SEPARATOR_NAME, FIELD_COMMAND_SMS_CODES_NAME, FIELD_COMMAND_SUCCESS_MESSAGE_NAME, FIELD_COMMAND_WRONG_FORMAT_MESSAGE_NAME, FieldCommandDefaultMessage, FieldCommandMoreThanOneOrgUnitMessage, FieldCommandName, FieldCommandNoUserMessage, FieldCommandParser, FieldCommandSeparator, FieldCommandSuccessMessage, FieldCommandWrongFormatMessage, ProgramStageDataElements } from '../smsCommandFields';\nimport { SaveCommandButton, SubmitErrors, useUpdateCommand } from '../smsCommand';\nimport { FormRow } from '../forms';\nimport { FieldProgram } from '../program';\nimport { FieldProgramStage } from '../programStage';\nimport { useReadSmsCommandEventRegistrationParserQuery } from './useReadSmsCommandEventRegistrationParserQuery';\nimport i18n from '../locales';\nconst {\n  Form\n} = ReactFinalForm;\n\nconst getInitialFormState = command => {\n  const name = command[FIELD_COMMAND_NAME_NAME];\n  const program = command[FIELD_COMMAND_PROGAM_NAME];\n  const programStage = command[FIELD_COMMAND_PROGAM_STAGE_NAME];\n  const separator = command[FIELD_COMMAND_SEPARATOR_NAME];\n  const defaultMessage = command[FIELD_COMMAND_DEFAULT_MESSAGE_NAME];\n  const wrongFormatMessage = command[FIELD_COMMAND_WRONG_FORMAT_MESSAGE_NAME];\n  const noUserMessage = command[FIELD_COMMAND_NO_USER_MESSAGE_NAME];\n  const moreThanOneOrgUnitMessage = command[FIELD_COMMAND_MORE_THAN_ONE_ORG_UNIT_MESSAGE_NAME];\n  const successMessage = command[FIELD_COMMAND_SUCCESS_MESSAGE_NAME];\n  const smsCodes = command[FIELD_COMMAND_SMS_CODES_NAME].reduce((curSmsCodes, smsCode) => ({ ...curSmsCodes,\n    [smsCode.dataElement.id]: smsCode\n  }), {});\n  return {\n    [FIELD_COMMAND_NAME_NAME]: name,\n    [FIELD_COMMAND_PARSER_NAME]: EVENT_REGISTRATION_PARSER.value,\n    [FIELD_COMMAND_PROGAM_NAME]: program,\n    [FIELD_COMMAND_PROGAM_STAGE_NAME]: programStage,\n    [FIELD_COMMAND_SEPARATOR_NAME]: separator,\n    [FIELD_COMMAND_DEFAULT_MESSAGE_NAME]: defaultMessage,\n    [FIELD_COMMAND_WRONG_FORMAT_MESSAGE_NAME]: wrongFormatMessage,\n    [FIELD_COMMAND_NO_USER_MESSAGE_NAME]: noUserMessage,\n    [FIELD_COMMAND_MORE_THAN_ONE_ORG_UNIT_MESSAGE_NAME]: moreThanOneOrgUnitMessage,\n    [FIELD_COMMAND_SUCCESS_MESSAGE_NAME]: successMessage,\n    [FIELD_COMMAND_SMS_CODES_NAME]: smsCodes\n  };\n};\n\nconst formatSmsCodes = updates => ({ ...updates,\n  [FIELD_COMMAND_SMS_CODES_NAME]: Object.values(updates[FIELD_COMMAND_SMS_CODES_NAME])\n});\n\nexport const CommandEditEventRegistrationParserForm = ({\n  commandId,\n  onAfterChange\n}) => {\n  const {\n    error,\n    data: {\n      smsCommand: command\n    } = {}\n  } = useReadSmsCommandEventRegistrationParserQuery(commandId);\n  const updateCommand = useUpdateCommand({\n    commandId,\n    onAfterChange,\n    formatCommand: formatSmsCodes\n  });\n\n  if (error) {\n    const msg = i18n.t(\"Something went wrong whilst loading the command's details\");\n    return <NoticeBox error title={msg}>\n                {error.message}\n            </NoticeBox>;\n  }\n\n  if (!command) {\n    return <CenteredContent>\n                <CircularLoader />\n            </CenteredContent>;\n  }\n\n  const selectedProgramOption = {\n    value: command.program.id,\n    label: command.program.displayName\n  };\n  const selectedProgramStageOption = {\n    value: command.programStage.id,\n    label: command.programStage.displayName\n  };\n  const programStageDataElements = command.programStage.programStageDataElements;\n  const initialValues = getInitialFormState(command);\n  return <Form initialValues={initialValues} onSubmit={updateCommand}>\n            {({\n      handleSubmit,\n      values\n    }) => {\n      return <form onSubmit={handleSubmit}>\n                        <FormRow>\n                            <FieldCommandName />\n                        </FormRow>\n\n                        <FormRow>\n                            <FieldCommandParser disabled />\n                        </FormRow>\n\n                        <FormRow>\n                            <FieldProgram disabled programs={[selectedProgramOption]} />\n                        </FormRow>\n\n                        <FormRow>\n                            <FieldProgramStage disabled programStages={[selectedProgramStageOption]} />\n                        </FormRow>\n\n                        <FormRow>\n                            <FieldCommandSeparator />\n                        </FormRow>\n\n                        <FormRow>\n                            <FieldCommandDefaultMessage />\n                        </FormRow>\n\n                        <FormRow>\n                            <FieldCommandWrongFormatMessage />\n                        </FormRow>\n\n                        <FormRow>\n                            <FieldCommandNoUserMessage />\n                        </FormRow>\n\n                        <FormRow>\n                            <FieldCommandMoreThanOneOrgUnitMessage />\n                        </FormRow>\n\n                        <FormRow>\n                            <FieldCommandSuccessMessage />\n                        </FormRow>\n\n                        {programStageDataElements && <FormRow>\n                                <h2>{i18n.t('Program stage data elements')}</h2>\n\n                                <ProgramStageDataElements programStageDataElements={programStageDataElements} smsCodes={values[FIELD_COMMAND_SMS_CODES_NAME]} />\n                            </FormRow>}\n\n                        <SubmitErrors />\n                        <SaveCommandButton />\n                    </form>;\n    }}\n        </Form>;\n};\nCommandEditEventRegistrationParserForm.propTypes = {\n  commandId: PropTypes.string.isRequired,\n  onAfterChange: PropTypes.func.isRequired\n};","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { ReactFinalForm, NoticeBox, CenteredContent, CircularLoader } from '@dhis2/ui';\nimport { useDataQuery } from '@dhis2/app-runtime';\nimport { FieldCommandName, FieldCommandParser, FieldCommandConfirmMessage } from '../smsCommandFields';\nimport { SaveCommandButton, SubmitErrors, useUpdateCommand } from '../smsCommand';\nimport { FieldUserGroup } from '../userGroup';\nimport { FormRow } from '../forms';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Form\n} = ReactFinalForm;\nconst query = {\n  smsCommand: {\n    resource: 'smsCommands',\n    id: ({\n      commandId\n    }) => commandId,\n    params: {\n      fields: ['name', 'parserType', 'receivedMessage', 'userGroup[name,id]']\n    }\n  }\n};\nexport const CommandEditAlertParserForm = ({\n  commandId,\n  onAfterChange\n}) => {\n  const updateCommand = useUpdateCommand({\n    commandId,\n    onAfterChange,\n    replace: true\n  });\n  const {\n    loading,\n    error,\n    data\n  } = useDataQuery(query, {\n    variables: {\n      commandId\n    }\n  });\n\n  if (loading) {\n    return <CenteredContent>\n                <CircularLoader />\n            </CenteredContent>;\n  }\n\n  if (error) {\n    const msg = i18n.t('Something went wrong whilst loading the sms command');\n    return <NoticeBox error title={msg}>\n                {error.message}\n            </NoticeBox>;\n  }\n\n  const {\n    name,\n    parserType,\n    receivedMessage,\n    userGroup\n  } = data.smsCommand;\n  const initialValues = {\n    name,\n    parserType,\n    receivedMessage,\n    userGroup: userGroup.id\n  };\n  const userGroups = [{\n    value: userGroup.id,\n    label: userGroup.name\n  }];\n  return <Form onSubmit={updateCommand} initialValues={initialValues}>\n            {({\n      handleSubmit\n    }) => <form onSubmit={handleSubmit} data-test={dataTest('commands-commandeditalertparserform')}>\n                    <FormRow>\n                        <FieldCommandName />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandParser disabled />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldUserGroup disabled userGroups={userGroups} />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandConfirmMessage />\n                    </FormRow>\n\n                    <SubmitErrors />\n                    <SaveCommandButton />\n                </form>}\n        </Form>;\n};\nCommandEditAlertParserForm.propTypes = {\n  commandId: PropTypes.string.isRequired,\n  onAfterChange: PropTypes.func.isRequired\n};","import { NoticeBox, CenteredContent, CircularLoader } from '@dhis2/ui';\nimport { useHistory, useParams } from 'react-router-dom';\nimport React from 'react';\nimport { PageHeadline } from '../../headline';\nimport { isParserType, useReadSmsCommandParserTypeQuery } from '../../smsCommand';\nimport { ALERT_PARSER, EVENT_REGISTRATION_PARSER, J2ME_PARSER, KEY_VALUE_PARSER, PROGRAM_STAGE_DATAENTRY_PARSER, TRACKED_ENTITY_REGISTRATION_PARSER, UNREGISTERED_PARSER, FIELD_COMMAND_PARSER_NAME } from '../../smsCommandFields';\nimport { CommandEditUnregisteredParserForm } from '../../smsCommandUnregisteredParser';\nimport { CommandEditTrackedEntityRegistrationParserForm } from '../../smsCommandTrackedEntityRegistrationParser';\nimport { CommandEditProgramStageDataEntryParserForm } from '../../smsCommandProgramStageDataEntryParser';\nimport { CommandEditKeyValueParserForm } from '../../smsCommandKeyValueParser';\nimport { CommandEditJ2MEParserForm } from '../../smsCommandJ2MEParser';\nimport { CommandEditEventRegistrationParserForm } from '../../smsCommandEventRegistrationParser';\nimport { CommandEditAlertParserForm } from '../../smsCommandAlertParser';\nimport { SMS_COMMAND_LIST_PATH } from './SmsCommandList';\nimport i18n from '../../locales';\nexport const SMS_COMMAND_FORM_EDIT_PATH_STATIC = '/sms-config/edit';\nexport const SMS_COMMAND_FORM_EDIT_PATH = `${SMS_COMMAND_FORM_EDIT_PATH_STATIC}/:id`;\nexport const SmsCommandFormEdit = () => {\n  const history = useHistory();\n  const {\n    id\n  } = useParams();\n  const {\n    loading,\n    error,\n    data\n  } = useReadSmsCommandParserTypeQuery(id);\n\n  if (loading) {\n    return <CenteredContent>\n                <CircularLoader />\n            </CenteredContent>;\n  }\n\n  if (error) {\n    const msg = i18n.t('Something went wrong whilst loading commands');\n    return <NoticeBox error title={msg}>\n                {error.message}\n            </NoticeBox>;\n  }\n\n  const parserType = data?.smsCommand[FIELD_COMMAND_PARSER_NAME];\n  const isParser = isParserType.bind(null, parserType); // If it's possible to not have data we should handle that as well\n\n  return <div>\n            <PageHeadline>{i18n.t('Edit command')}</PageHeadline>\n\n            {parserType && isParser(KEY_VALUE_PARSER) && <CommandEditKeyValueParserForm commandId={id} onAfterChange={() => history.push(SMS_COMMAND_LIST_PATH)} />}\n\n            {parserType && isParser(J2ME_PARSER) && <CommandEditJ2MEParserForm commandId={id} onAfterChange={() => history.push(SMS_COMMAND_LIST_PATH)} />}\n\n            {parserType && isParser(ALERT_PARSER) && <CommandEditAlertParserForm commandId={id} onAfterChange={() => history.push(SMS_COMMAND_LIST_PATH)} />}\n\n            {parserType && isParser(PROGRAM_STAGE_DATAENTRY_PARSER) && <CommandEditProgramStageDataEntryParserForm commandId={id} onAfterChange={() => history.push(SMS_COMMAND_LIST_PATH)} />}\n\n            {parserType && isParser(UNREGISTERED_PARSER) && <CommandEditUnregisteredParserForm commandId={id} onAfterChange={() => history.push(SMS_COMMAND_LIST_PATH)} />}\n\n            {parserType && isParser(EVENT_REGISTRATION_PARSER) && <CommandEditEventRegistrationParserForm commandId={id} onAfterChange={() => history.push(SMS_COMMAND_LIST_PATH)} />}\n\n            {parserType && isParser(TRACKED_ENTITY_REGISTRATION_PARSER) && <CommandEditTrackedEntityRegistrationParserForm commandId={id} onAfterChange={() => history.push(SMS_COMMAND_LIST_PATH)} />}\n        </div>;\n};","import { Button, ReactFinalForm, CircularLoader } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React, { useEffect, useState } from 'react';\nimport { ALERT_PARSER, EVENT_REGISTRATION_PARSER, FIELD_COMMAND_PARSER_NAME, J2ME_PARSER, KEY_VALUE_PARSER, PROGRAM_STAGE_DATAENTRY_PARSER, TRACKED_ENTITY_REGISTRATION_PARSER, UNREGISTERED_PARSER, FieldCommandName, FieldCommandParser } from '../../smsCommandFields';\nimport { useCreateSmsCommandMutation } from '../../smsCommand';\nimport { FieldDataSetWithAutoLoad } from '../../dataSet';\nimport { FIELD_PROGRAM_NAME, FieldProgramWithAutoLoad } from '../../program';\nimport { FIELD_PROGRAM_STAGE_NAME, FieldProgramStageWithAutoLoad } from '../../programStage';\nimport { FieldUserGroupWithAutoLoad } from '../../userGroup';\nimport { FormRow } from '../../forms';\nimport { PageHeadline } from '../../headline';\nimport i18n from '../../locales';\nconst {\n  Form,\n  useForm\n} = ReactFinalForm;\nexport const SMS_COMMAND_FORM_NEW_PATH = '/sms-config/new';\n\nconst useResetFormFields = () => {\n  const form = useForm();\n  const [prevValues, setPrevValues] = useState(form.getState().values);\n  useEffect(() => form.subscribe(({\n    values\n  }) => {\n    form.batch(() => {\n      const parserType = values[FIELD_COMMAND_PARSER_NAME];\n      const program = values[FIELD_PROGRAM_NAME];\n      const programStage = values[FIELD_PROGRAM_STAGE_NAME];\n      const prevProgram = prevValues[FIELD_PROGRAM_NAME];\n      const prevParserType = prevValues[FIELD_COMMAND_PARSER_NAME];\n      const programChanged = prevProgram && program !== prevProgram;\n      const parserTypeChanged = prevParserType && parserType !== prevParserType;\n\n      if ( // only unset program stage if one exists already\n      programStage && (programChanged || parserTypeChanged)) {\n        form.change(FIELD_PROGRAM_STAGE_NAME, null);\n      }\n    });\n    setPrevValues(values);\n  }, {\n    values: true\n  }), [prevValues]);\n};\n\nconst ActualForm = ({\n  handleSubmit,\n  submitting\n}) => {\n  // This is required to unset form fields that depend\n  // on the selected value of a previous field\n  useResetFormFields();\n  const form = useForm();\n  const {\n    values\n  } = form.getState();\n  const parserType = values[FIELD_COMMAND_PARSER_NAME];\n  const program = values[FIELD_PROGRAM_NAME];\n  const showDataSetField = parserType === KEY_VALUE_PARSER.value || parserType === J2ME_PARSER.value;\n  const showUserGroupField = parserType === ALERT_PARSER.value || parserType === UNREGISTERED_PARSER.value;\n  const showProgramField = parserType === TRACKED_ENTITY_REGISTRATION_PARSER.value || parserType === PROGRAM_STAGE_DATAENTRY_PARSER.value || parserType === EVENT_REGISTRATION_PARSER.value;\n  const showProgramStageField = parserType === PROGRAM_STAGE_DATAENTRY_PARSER.value;\n  const registration = // undefined = all, false = program.programType --> WITHOUT_REGISTRATION\n  parserType === EVENT_REGISTRATION_PARSER.value ? false : undefined;\n  return <div>\n            <PageHeadline>{i18n.t('Add command')}</PageHeadline>\n            <form onSubmit={handleSubmit}>\n                <FormRow>\n                    <FieldCommandName />\n                </FormRow>\n\n                <FormRow>\n                    <FieldCommandParser />\n                </FormRow>\n\n                {showDataSetField && <FormRow>\n                        <FieldDataSetWithAutoLoad />\n                    </FormRow>}\n\n                {showUserGroupField && <FormRow>\n                        <FieldUserGroupWithAutoLoad />\n                    </FormRow>}\n\n                {showProgramField && <FormRow>\n                        <FieldProgramWithAutoLoad registration={registration} />\n                    </FormRow>}\n\n                {showProgramStageField && <FormRow>\n                        <FieldProgramStageWithAutoLoad programId={program || ''} />\n                    </FormRow>}\n\n                <Button primary type=\"submit\" icon={submitting ? <CircularLoader small /> : null} disabled={submitting}>\n                    {i18n.t('Add command')}\n                </Button>\n            </form>\n        </div>;\n};\n\nActualForm.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n  submitting: PropTypes.bool.isRequired\n};\nexport const SmsCommandFormNew = () => {\n  const [createSmsCommand] = useCreateSmsCommandMutation();\n\n  const onSubmit = values => createSmsCommand(values);\n\n  return <Form onSubmit={onSubmit}>\n            {({\n      handleSubmit,\n      submitting\n    }) => <ActualForm handleSubmit={handleSubmit} submitting={submitting} />}\n        </Form>;\n};","import { Button, Checkbox, Table, TableHead, TableBody, TableRow, TableRowHead, TableCell, TableCellHead, NoticeBox, CenteredContent, CircularLoader } from '@dhis2/ui';\nimport { useHistory } from 'react-router-dom';\nimport React, { useState } from 'react';\nimport { SMS_COMMAND_FORM_EDIT_PATH_STATIC } from './SmsCommandFormEdit';\nimport { SMS_COMMAND_FORM_NEW_PATH } from './SmsCommandFormNew';\nimport { ListActions } from '../../dataList';\nimport { PageHeadline } from '../../headline';\nimport { DeleteCommandsConfirmationDialog, getLabelByParserTypes, useDeleteSmsCommandMutation, useReadSmsCommandsQuery } from '../../smsCommand';\nimport { dataTest } from '../../dataTest';\nimport i18n from '../../locales';\nimport styles from './SmsCommandList.module.css';\nexport const SMS_COMMAND_LIST_LABEL = i18n.t('Commands');\nexport const SMS_COMMAND_LIST_PATH = '/sms-config';\nexport const SmsCommandList = () => {\n  const history = useHistory();\n\n  const onAddCommandClick = () => history.push(SMS_COMMAND_FORM_NEW_PATH);\n\n  const [checkedSmsCommands, setCheckedSmsCommands] = useState([]);\n  const [showDeleteConfirmationDialog, setShowDeleteConfirmationDialog] = useState(false);\n  const {\n    loading: loadingReadSmsCommands,\n    error: errorReadSmsCommands,\n    data,\n    refetch\n  } = useReadSmsCommandsQuery();\n  const [deleteSmsCommands, {\n    loading: loadingDelete,\n    error: errorDelete\n  }] = useDeleteSmsCommandMutation();\n\n  if (loadingReadSmsCommands) {\n    return <div data-test={dataTest('views-smscommandlist')}>\n                <PageHeadline>{SMS_COMMAND_LIST_LABEL}</PageHeadline>\n                <CenteredContent>\n                    <CircularLoader />\n                </CenteredContent>\n            </div>;\n  }\n\n  const error = errorReadSmsCommands || errorDelete;\n\n  if (error) {\n    const msg = i18n.t('Something went wrong whilst performing the requested operation');\n    return <div data-test={dataTest('views-smscommandlist')}>\n                <PageHeadline>{SMS_COMMAND_LIST_LABEL}</PageHeadline>\n                <NoticeBox error title={msg}>\n                    {error.message}\n                </NoticeBox>\n            </div>;\n  }\n\n  const onToggleCallChange = () => {\n    const smsCommands = data?.smsCommands?.smsCommands;\n\n    if (!smsCommands) {\n      return;\n    }\n\n    if (checkedSmsCommands.length === smsCommands.length) {\n      setCheckedSmsCommands([]);\n    } else {\n      setCheckedSmsCommands(smsCommands.map(({\n        id,\n        displayName\n      }) => ({\n        id,\n        displayName\n      })));\n    }\n  };\n\n  const toggleSmsCommand = smsCommand => {\n    const {\n      id\n    } = smsCommand;\n\n    if (checkedSmsCommands.find(({\n      id: checkedId\n    }) => id === checkedId)) {\n      const index = checkedSmsCommands.findIndex(({\n        id: checkedId\n      }) => id === checkedId);\n      return setCheckedSmsCommands([...checkedSmsCommands.slice(0, index), ...checkedSmsCommands.slice(index + 1)]);\n    }\n\n    return setCheckedSmsCommands([...checkedSmsCommands, smsCommand]);\n  };\n\n  const onDeleteClick = async () => {\n    const ids = checkedSmsCommands.map(({\n      id\n    }) => id);\n    await deleteSmsCommands({\n      ids\n    });\n    setCheckedSmsCommands([]);\n    setShowDeleteConfirmationDialog(false);\n    refetch();\n  };\n\n  const allChecked = checkedSmsCommands.length === data?.smsCommands?.smsCommands?.length;\n  return <div data-test={dataTest('views-smscommandlist')}>\n            <PageHeadline>{SMS_COMMAND_LIST_LABEL}</PageHeadline>\n\n            <ListActions addLabel={i18n.t('Add command')} deleteLabel={i18n.t('Delete selected')} dataTest=\"views-smscommandlist\" onAddClick={onAddCommandClick} onDeleteClick={() => setShowDeleteConfirmationDialog(true)} disableAdd={loadingDelete} disableDelete={!checkedSmsCommands.length || loadingDelete} />\n\n            {showDeleteConfirmationDialog && <DeleteCommandsConfirmationDialog commands={checkedSmsCommands} onCancelClick={() => setShowDeleteConfirmationDialog(false)} onDeleteClick={onDeleteClick} />}\n\n            <Table>\n                <TableHead>\n                    <TableRowHead>\n                        <TableCellHead>\n                            <Checkbox checked={allChecked} onChange={onToggleCallChange} />\n                        </TableCellHead>\n                        <TableCellHead>{i18n.t('Sms command')}</TableCellHead>\n                        <TableCellHead>{i18n.t('Parser')}</TableCellHead>\n                        <TableCellHead />\n                    </TableRowHead>\n                </TableHead>\n                <TableBody>\n                    {data?.smsCommands?.smsCommands?.map(({\n          id,\n          displayName,\n          parserType\n        }) => <TableRow key={id}>\n                                <TableCell className={styles.checkbox}>\n                                    <Checkbox checked={!!checkedSmsCommands.find(({\n              id: checkedId\n            }) => id === checkedId)} onChange={() => toggleSmsCommand({\n              id,\n              displayName\n            })} />\n                                </TableCell>\n\n                                <TableCell>{displayName}</TableCell>\n\n                                <TableCell>\n                                    {getLabelByParserTypes(parserType)}\n                                </TableCell>\n\n                                <TableCell className={styles.editButtonCell}>\n                                    <Button onClick={() => history.push(`${SMS_COMMAND_FORM_EDIT_PATH_STATIC}/${id}`)}>\n                                        {i18n.t('Edit')}\n                                    </Button>\n                                </TableCell>\n                            </TableRow>)}\n                </TableBody>\n            </Table>\n        </div>;\n};","import * as parserTypes from '../smsCommandFields';\nexport const getLabelByParserTypes = parserType => {\n  const type = Object.values(parserTypes).find(({\n    value\n  }) => value === parserType);\n  return type?.label || parserType;\n};","import i18n from '@dhis2/d2-i18n';\nexport const statusMap = {\n  DELIVERED: i18n.t('Delivered'),\n  ERROR: i18n.t('Error'),\n  FAILED: i18n.t('Failed'),\n  OUTBOUND: i18n.t('Outbound'),\n  PENDING: i18n.t('Pending'),\n  SCHEDULED: i18n.t('Scheduled'),\n  SENT: i18n.t('Sent')\n};","import { createContext } from 'react';\nconst message = 'RefetchSms consumer needs to have a valid Provider as parent';\n\nconst throwError = () => {\n  throw new Error(message);\n}; // Throws an error if the consumer is not nested in a provider\n\n\nconst RefetchSms = createContext({\n  refetch: throwError,\n  refetchAndClear: throwError\n});\nexport default RefetchSms;","import React, { useContext } from 'react';\nimport { Button } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { useDataMutation } from '@dhis2/app-runtime';\nimport i18n from '../../locales';\nimport { AlertContext } from '../../notifications';\nimport RefetchSms from './RefetchSms';\nconst mutation = {\n  resource: 'sms/outbound',\n  params: ({\n    ids\n  }) => ({\n    ids\n  }),\n  type: 'delete'\n};\n\nconst DeleteButton = ({\n  id,\n  cleanSelected\n}) => {\n  const {\n    addAlert\n  } = useContext(AlertContext);\n  const {\n    refetch\n  } = useContext(RefetchSms);\n  const [mutate, {\n    loading\n  }] = useDataMutation(mutation, {\n    onComplete: () => {\n      cleanSelected(id);\n      refetch();\n    },\n    onError: error => {\n      addAlert({\n        type: 'critical',\n        message: error.message\n      });\n    },\n    variables: {\n      ids: id\n    }\n  });\n  /**\n   * We're disabling the button when fetching instead of rendering a spinner, since rendering\n   * a spinner results in the whole table jumping and for a short fetch that looks very buggy\n   */\n\n  return <Button small destructive onClick={mutate} disabled={loading}>\n            {i18n.t('Delete')}\n        </Button>;\n};\n\nDeleteButton.propTypes = {\n  cleanSelected: PropTypes.func.isRequired,\n  id: PropTypes.string.isRequired\n};\nexport default DeleteButton;","import React from 'react';\nimport { TableRow, TableCell, Checkbox } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport moment from 'moment';\nimport { statusMap } from './translations';\nimport DeleteButton from './DeleteButton';\n\nconst SmsTableItem = ({\n  sms,\n  toggleSelected,\n  isSelected,\n  cleanSelected\n}) => {\n  const {\n    message,\n    status,\n    date,\n    id\n  } = sms;\n  /**\n   *FIXME: after a deletion, for a short while the backend returns null for\n   * recipients. We can't catch that with a default value since it's not\n   * undefined, so we're doing it this way.\n   */\n\n  const recipients = sms.recipients === null ? [] : sms.recipients;\n  return <TableRow>\n            <TableCell>\n                <Checkbox onChange={() => toggleSelected(id)} checked={isSelected} />\n            </TableCell>\n            <TableCell>{message}</TableCell>\n            <TableCell>{recipients.join(', ')}</TableCell>\n            <TableCell>{statusMap[status]}</TableCell>\n            <TableCell>\n                {moment(date).format('MMMM Do YYYY, h:mm:ss a')}\n            </TableCell>\n            <TableCell>\n                <DeleteButton id={id} cleanSelected={cleanSelected} />\n            </TableCell>\n        </TableRow>;\n};\n\nSmsTableItem.propTypes = {\n  cleanSelected: PropTypes.func.isRequired,\n  isSelected: PropTypes.bool.isRequired,\n  sms: PropTypes.shape({\n    date: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    message: PropTypes.string.isRequired,\n    status: PropTypes.string.isRequired,\n    recipients: PropTypes.arrayOf(PropTypes.string)\n  }).isRequired,\n  toggleSelected: PropTypes.func.isRequired\n};\nexport default SmsTableItem;","import React, { useContext } from 'react';\nimport { Button, SingleSelect, SingleSelectOption } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport i18n from '../../locales';\nimport RefetchSms from './RefetchSms';\nimport s from './Pagination.module.css';\nconst pageSizes = ['10', '20', '30', '40', '50', '100'];\n\nconst Pagination = ({\n  pager\n}) => {\n  const {\n    refetchAndClear\n  } = useContext(RefetchSms);\n\n  const changePage = newPage => {\n    refetchAndClear({\n      page: newPage\n    });\n  };\n\n  const changePageSize = newSize => {\n    refetchAndClear({\n      pageSize: newSize,\n      page: 1\n    });\n  };\n\n  const {\n    page,\n    pageCount,\n    pageSize,\n    total\n  } = pager;\n  const firstItem = Math.min((page - 1) * pageSize + 1, total);\n  const lastItem = Math.min(firstItem + pageSize - 1, total);\n  const availablePages = Array.from({\n    length: pageCount\n  }, (_x, i) => (i + 1).toString());\n  return <div className={s.container}>\n            <div className={s.left}>\n                <span>{i18n.t('Show')}</span>\n                <SingleSelect dense selected={pageSize.toString()} onChange={({\n        selected\n      }) => changePageSize(selected)}>\n                    {pageSizes.map(size => <SingleSelectOption key={size} value={size} label={size} />)}\n                </SingleSelect>\n                <span>{i18n.t('per page')}</span>\n            </div>\n            <div className={s.right}>\n                <div className={s.amount}>\n                    {i18n.t('Viewing {{firstItem}}-{{lastItem}} of {{total}}', {\n          firstItem,\n          lastItem,\n          total\n        })}\n                </div>\n                <Button small disabled={page === 1} onClick={() => changePage(page - 1)}>\n                    {i18n.t('Previous')}\n                </Button>\n                <div className={s.pageselection}>\n                    <div>{i18n.t('Page')}</div>\n                    <SingleSelect dense selected={page.toString()} onChange={({\n          selected\n        }) => {\n          changePage(selected);\n        }}>\n                        {availablePages.map(page => <SingleSelectOption key={page} value={page} label={page} />)}\n                    </SingleSelect>\n                    <div>{i18n.t('of {{pageCount}}', {\n            pageCount\n          })}</div>\n                </div>\n                <Button small disabled={page === pageCount} onClick={() => changePage(page + 1)}>\n                    {i18n.t('Next')}\n                </Button>\n            </div>\n        </div>;\n};\n\nPagination.propTypes = {\n  pager: PropTypes.shape({\n    page: PropTypes.number.isRequired,\n    pageCount: PropTypes.number.isRequired,\n    pageSize: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired\n  }).isRequired\n};\nexport default Pagination;","import React from 'react';\nimport { Checkbox } from '@dhis2/ui';\nimport i18n from '../../locales';\nimport { Table, TableHead, TableRowHead, TableRow, TableCell, TableCellHead, TableBody, TableFoot } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport SmsTableItem from './SmsTableItem';\nimport Pagination from './Pagination';\nimport s from './SmsTable.module.css';\n\nconst SmsTable = ({\n  smses,\n  cleanSelected,\n  toggleSelected,\n  toggleAll,\n  allSelected,\n  selected,\n  pager\n}) => <Table>\n        <TableHead>\n            <TableRowHead>\n                <TableCellHead>\n                    <Checkbox disabled={smses.length === 0} onChange={toggleAll} checked={allSelected} />\n                </TableCellHead>\n                <TableCellHead>{i18n.t('Message')}</TableCellHead>\n                <TableCellHead>{i18n.t('Recipients')}</TableCellHead>\n                <TableCellHead>{i18n.t('Status')}</TableCellHead>\n                <TableCellHead>{i18n.t('Date')}</TableCellHead>\n                <TableCellHead>{i18n.t('Delete')}</TableCellHead>\n            </TableRowHead>\n        </TableHead>\n        <TableBody>\n            {smses.length === 0 ? <TableRow>\n                    <TableCell colSpan=\"7\" className={s.noResults}>\n                        {i18n.t('No SMSes to display')}\n                    </TableCell>\n                </TableRow> : smses.map(sms => <SmsTableItem key={sms.id} sms={sms} isSelected={selected.includes(sms.id)} toggleSelected={toggleSelected} cleanSelected={cleanSelected} />)}\n        </TableBody>\n        <TableFoot>\n            <TableRow>\n                <TableCell colSpan=\"7\">\n                    <Pagination pager={pager} />\n                </TableCell>\n            </TableRow>\n        </TableFoot>\n    </Table>;\n\nSmsTable.propTypes = {\n  allSelected: PropTypes.bool.isRequired,\n  cleanSelected: PropTypes.func.isRequired,\n  pager: PropTypes.object.isRequired,\n  selected: PropTypes.arrayOf(PropTypes.string).isRequired,\n  smses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  toggleAll: PropTypes.func.isRequired,\n  toggleSelected: PropTypes.func.isRequired\n};\nexport default SmsTable;","import React, { useContext } from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { SingleSelectField, SingleSelectOption } from '@dhis2/ui';\nimport i18n from '../../locales';\nimport RefetchSms from './RefetchSms';\nimport { statusMap } from './translations';\n/**\n * Using ALL instead of a more sensible empty string due to a bug in the Select,\n * which means the select doesn't allow empty strings as values.\n * https://github.com/dhis2/ui/issues/245\n */\n\nexport const parseStatus = status => {\n  if (status === 'ALL') {\n    return '';\n  }\n\n  return status;\n}; // From https://github.com/dhis2/dhis2-core/blob/master/dhis-2/dhis-api/src/main/java/org/hisp/dhis/sms/outbound/OutboundSmsStatus.java\n\nconst statuses = ['DELIVERED', 'ERROR', 'FAILED', 'OUTBOUND', 'PENDING', 'SCHEDULED', 'SENT'];\nconst filterOptions = [{\n  label: i18n.t('All'),\n  value: 'ALL'\n}, // Using the translations from statusmap as labels\n...statuses.map(status => ({\n  label: statusMap[status],\n  value: status\n}))];\n\nconst StatusFilter = ({\n  status,\n  setStatus\n}) => {\n  const {\n    refetchAndClear\n  } = useContext(RefetchSms);\n\n  const onChange = ({\n    selected\n  }) => {\n    setStatus(selected);\n    refetchAndClear({\n      status: parseStatus(selected),\n      // Reset to the first page after filtering\n      page: 1\n    });\n  };\n\n  return <SingleSelectField label={i18n.t('Filter by status')} inputWidth=\"200px\" onChange={onChange} selected={status}>\n            {filterOptions.map(({\n      label,\n      value\n    }) => <SingleSelectOption key={label} label={label} value={value} />)}\n        </SingleSelectField>;\n};\n\nStatusFilter.propTypes = {\n  setStatus: PropTypes.func.isRequired,\n  status: PropTypes.string.isRequired\n};\nexport default StatusFilter;","// Returns an array of all the ids\nexport const getAllIds = smses => smses.map(sms => sms.id); // Returns true if all smses are selected, false if not\n\nexport const getAllSelected = (allIds, selected) => {\n  // If there are no ids there's nothing to select\n  const noIds = allIds.length === 0; // If the lengths don't match we're assuming that they're not all selected (assuming no duplicate ids)\n\n  const noLengthMatch = allIds.length !== selected.length;\n\n  if (noIds || noLengthMatch) {\n    return false;\n  }\n\n  return allIds.every(id => selected.includes(id));\n};","import React, { useContext } from 'react';\nimport { Button } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { useDataMutation } from '@dhis2/app-runtime';\nimport i18n from '../../locales';\nimport { AlertContext } from '../../notifications';\nimport RefetchSms from './RefetchSms';\nconst mutation = {\n  resource: 'sms/outbound',\n  params: ({\n    ids\n  }) => ({\n    ids\n  }),\n  type: 'delete'\n};\n\nconst DeleteSelectedButton = ({\n  selected\n}) => {\n  const disabled = selected.length === 0;\n  const ids = selected.join(',');\n  const {\n    addAlert\n  } = useContext(AlertContext);\n  const {\n    refetchAndClear\n  } = useContext(RefetchSms);\n  const [mutate, {\n    loading\n  }] = useDataMutation(mutation, {\n    onComplete: () => {\n      refetchAndClear();\n    },\n    onError: error => {\n      addAlert({\n        type: 'critical',\n        message: error.message\n      });\n    }\n  });\n  return <Button destructive disabled={disabled || loading} onClick={() => mutate({\n    ids\n  })}>\n            {i18n.t('Delete selected')}\n        </Button>;\n};\n\nDeleteSelectedButton.propTypes = {\n  selected: PropTypes.arrayOf(PropTypes.string).isRequired\n};\nexport default DeleteSelectedButton;","import React, { useState } from 'react';\nimport { useDataQuery } from '@dhis2/app-runtime';\nimport { NoticeBox, CenteredContent, CircularLoader } from '@dhis2/ui';\nimport i18n from '../../locales';\nimport { PageHeadline } from '../../headline';\nimport SmsTable from './SmsTable';\nimport StatusFilter, { parseStatus } from './StatusFilter';\nimport { getAllIds, getAllSelected } from './selectors';\nimport { createToggleAllHandler, createToggleHandler, createCleanSelectedHandler } from './handlers';\nimport DeleteSelectedButton from './DeleteSelectedButton';\nimport RefetchSms from './RefetchSms';\nimport s from './SentSmsList.module.css';\nexport const SENT_SMS_LIST_LABEL = i18n.t('Sent');\nexport const SENT_SMS_LIST_PATH = '/sent';\n\nconst parseParams = ({\n  status,\n  page,\n  pageSize\n}) => {\n  const base = {\n    pageSize,\n    page,\n    fields: ['id', 'message', 'status', 'date', 'recipients']\n  };\n\n  if (!status) {\n    return base;\n  }\n\n  return { ...base,\n    filter: `status:eq:${status}`\n  };\n};\n\nconst query = {\n  sms: {\n    resource: 'sms/outbound',\n    params: parseParams\n  }\n};\nexport const SentSmsList = () => {\n  const [selected, setSelected] = useState([]);\n  const [status, setStatus] = useState('ALL');\n  const {\n    loading,\n    error,\n    data,\n    refetch\n  } = useDataQuery(query, {\n    variables: {\n      status: parseStatus(status),\n      pageSize: 10,\n      page: 1\n    }\n  });\n\n  if (loading) {\n    return <>\n                <PageHeadline>{SENT_SMS_LIST_LABEL}</PageHeadline>\n                <CenteredContent>\n                    <CircularLoader />\n                </CenteredContent>\n            </>;\n  }\n\n  if (error) {\n    const msg = i18n.t('Something went wrong whilst loading sent SMSes');\n    return <>\n                <PageHeadline>{SENT_SMS_LIST_LABEL}</PageHeadline>\n                <NoticeBox error title={msg}>\n                    {error.message}\n                </NoticeBox>\n            </>;\n  } // Selectors\n\n\n  const allIds = getAllIds(data.sms.outboundsmss);\n  const allSelected = getAllSelected(allIds, selected); // Handlers\n\n  const cleanSelected = createCleanSelectedHandler({\n    selected,\n    setSelected\n  });\n  const toggleAll = createToggleAllHandler({\n    allSelected,\n    setSelected,\n    allIds\n  });\n  const toggleSelected = createToggleHandler({\n    selected,\n    setSelected\n  }); // Context\n\n  const context = {\n    refetch,\n    refetchAndClear: params => {\n      setSelected([]);\n      refetch(params);\n    }\n  };\n  return <RefetchSms.Provider value={context}>\n            <PageHeadline>{SENT_SMS_LIST_LABEL}</PageHeadline>\n            <div className={s.header}>\n                <StatusFilter status={status} setStatus={setStatus} />\n                <div className={s.headerRight}>\n                    <DeleteSelectedButton selected={selected} />\n                </div>\n            </div>\n            <SmsTable smses={data.sms.outboundsmss} cleanSelected={cleanSelected} allSelected={allSelected} selected={selected} toggleSelected={toggleSelected} toggleAll={toggleAll} pager={data.sms.pager} />\n        </RefetchSms.Provider>;\n};","// Creates a handler for toggling a single checkbox\nexport const createToggleHandler = ({\n  selected,\n  setSelected\n}) => id => {\n  const isSelected = selected.includes(id);\n\n  if (isSelected) {\n    const filtered = selected.filter(currentId => currentId !== id);\n    return setSelected(filtered);\n  }\n\n  return setSelected([...selected, id]);\n}; // Create a handler for toggling all checkboxes\n\nexport const createToggleAllHandler = ({\n  allSelected,\n  setSelected,\n  allIds\n}) => () => {\n  if (allSelected) {\n    return setSelected([]);\n  }\n\n  return setSelected(allIds);\n}; // Create a handler to remove an id from selected, for after deletion\n\nexport const createCleanSelectedHandler = ({\n  selected,\n  setSelected\n}) => id => {\n  if (selected.includes(id)) {\n    const filtered = selected.filter(current => current != id);\n    setSelected(filtered);\n  }\n};","import { useHistory, useRouteMatch } from 'react-router-dom';\nimport { MenuItem } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\n\nconst useIsItemActive = (path, exactMatch) => {\n  const routeMatch = useRouteMatch(path);\n  if (!routeMatch) return false;\n  if (exactMatch) return routeMatch.isExact;\n  return true;\n};\n\nexport const NavigationItem = ({\n  label,\n  path,\n  exactMatch\n}) => {\n  const history = useHistory();\n  const active = useIsItemActive(path, exactMatch);\n\n  const navigateToPath = () => history.push(path);\n\n  return <MenuItem onClick={navigateToPath} active={active} label={label} dataTest={dataTest('navigation-navigationitem')} />;\n};\nNavigationItem.defualtProps = {\n  exactMatch: false\n};\nNavigationItem.propTypes = {\n  label: PropTypes.string.isRequired,\n  path: PropTypes.string.isRequired,\n  exactMatch: PropTypes.bool\n};","import { Menu } from '@dhis2/ui';\nimport React from 'react';\nimport { GATEWAY_CONFIG_LIST_LABEL, GATEWAY_CONFIG_LIST_PATH, SMS_COMMAND_LIST_LABEL, SMS_COMMAND_LIST_PATH, SENT_SMS_LIST_LABEL, SENT_SMS_LIST_PATH, HOME_PATH, HOME_LABEL, RECEIVED_SMS_LIST_PATH, RECEIVED_SMS_LIST_LABEL } from '../views';\nimport { NavigationItem } from './NavigationItem';\nimport { dataTest } from '../dataTest';\nexport const Navigation = () => <Menu dataTest={dataTest('navigation-navigation')}>\n        <NavigationItem path={HOME_PATH} label={HOME_LABEL} exactMatch={true} />\n\n        <NavigationItem path={GATEWAY_CONFIG_LIST_PATH} label={GATEWAY_CONFIG_LIST_LABEL} />\n\n        <NavigationItem path={SMS_COMMAND_LIST_PATH} label={SMS_COMMAND_LIST_LABEL} />\n\n        <NavigationItem path={SENT_SMS_LIST_PATH} label={SENT_SMS_LIST_LABEL} />\n\n        <NavigationItem path={RECEIVED_SMS_LIST_PATH} label={RECEIVED_SMS_LIST_LABEL} />\n    </Menu>;","import { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { CssVariables } from '@dhis2/ui';\nimport React from 'react';\nimport styles from './App.module.css';\nimport { AlertHandler } from './notifications';\nimport { Navigation } from './navigation';\nimport { GATEWAY_CONFIG_FORM_EDIT_PATH, GATEWAY_CONFIG_FORM_NEW_PATH, GATEWAY_CONFIG_LIST_PATH, RECEIVED_SMS_LIST_PATH, SMS_COMMAND_LIST_PATH, SMS_COMMAND_FORM_EDIT_PATH, SMS_COMMAND_FORM_NEW_PATH, SENT_SMS_LIST_PATH, GatewayConfigFormEdit, GatewayConfigFormNew, GatewayConfigList, ReceivedSmsList, SmsCommandList, SmsCommandFormEdit, SmsCommandFormNew, SentSmsList, HOME_PATH, Home, NoMatch } from './views';\nimport { dataTest } from './dataTest';\n\nconst App = () => <AlertHandler>\n        <CssVariables spacers colors />\n        <BrowserRouter>\n            <CssVariables colors />\n            <div className={styles.container} data-test={dataTest('app')}>\n                <div className={styles.sidebar}>\n                    <Navigation />\n                </div>\n\n                <main className={styles.content}>\n                    <Switch>\n                        <Route exact path={HOME_PATH} component={Home} />\n\n                        {\n          /* Gateway configuration */\n          ''}\n                        <Route exact path={GATEWAY_CONFIG_LIST_PATH} component={GatewayConfigList} />\n\n                        <Route exact path={GATEWAY_CONFIG_FORM_EDIT_PATH} component={GatewayConfigFormEdit} />\n\n                        <Route exact path={GATEWAY_CONFIG_FORM_NEW_PATH} component={GatewayConfigFormNew} />\n\n                        {\n          /* Sms command */\n          ''}\n                        <Route exact path={SMS_COMMAND_LIST_PATH} component={SmsCommandList} />\n\n                        <Route exact path={SMS_COMMAND_FORM_EDIT_PATH} component={SmsCommandFormEdit} />\n\n                        <Route exact path={SMS_COMMAND_FORM_NEW_PATH} component={SmsCommandFormNew} />\n\n                        {\n          /* View sent sms */\n          ''}\n                        <Route exact path={SENT_SMS_LIST_PATH} component={SentSmsList} />\n\n                        {\n          /* View received sms */\n          ''}\n                        <Route exact path={RECEIVED_SMS_LIST_PATH} component={ReceivedSmsList} />\n\n                        <Route component={NoMatch} />\n                    </Switch>\n                </main>\n            </div>\n        </BrowserRouter>\n    </AlertHandler>;\n\nexport default App;"],"sourceRoot":""}