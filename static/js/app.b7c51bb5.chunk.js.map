{"version":3,"sources":["D2App/App.module.css","D2App/headline/PageHeadline.module.css","D2App/headline/PageSubHeadline.module.css","D2App/views/home/Home.module.css","D2App/views/home/HomeCard.module.css","D2App/gateways/GatewayAddKeyValuePair.module.css","D2App/forms/FormRow.module.css","D2App/gateways/GatewayKeyValuePair.module.css","D2App/views/gateway_configuration/GatewayConfigFormEdit.module.css","D2App/gateways/GatewaysTable.module.css","D2App/gateways/GatewayList.module.css","D2App/views/gateway_configuration/GatewayConfigFormNew.module.css","D2App/dataList/ListActions.module.css","D2App/text/Paragraph.module.css","D2App/views/gateway_configuration/GatewayConfigList.module.css","D2App/views/received_sms_list/Filter.module.css","D2App/time/Date.module.css","D2App/time/Time.module.css","D2App/views/received_sms_list/Pagination.module.css","D2App/views/received_sms_list/SmsTable.module.css","D2App/views/received_sms_list/ReceivedSmsList.module.css","D2App/smsCommand/CommandFormActions.module.css","D2App/smsCommandFields/FieldDataElementWithCategoryOptionComboAddFormulaButton.module.css","D2App/smsCommandFields/FieldDataElementWithCategoryOptionCombo.module.css","D2App/smsCommandFields/DataElementTimesCategoryOptionCombos.module.css","D2App/smsCommandFields/FieldCommandSpecialCharacter.module.css","D2App/views/sms_commands/SmsCommandFormEdit.module.css","D2App/views/sms_commands/SmsCommandFormNew.module.css","D2App/views/sms_commands/SmsCommandList.module.css","D2App/views/sent_sms_list/SmsTableItem.module.css","D2App/views/sent_sms_list/Pagination.module.css","D2App/views/sent_sms_list/SmsTable.module.css","D2App/views/sent_sms_list/SentSmsList.module.css","D2App/navigation/NavigationItem.module.css","D2App/notifications/AlertContext.js","D2App/dataTest/dataTest.js","D2App/notifications/AlertHandler.js","D2App/locales/index.js","D2App/headline/PageHeadline.js","D2App/headline/PageSubHeadline.js","D2App/views/home/HomeCard.js","D2App/views/home/Home.js","D2App/gateways/DeleteGatewaysConfirmationDialog.js","D2App/gateways/FieldGatewayAuthToken.js","D2App/gateways/FieldGatewayName.js","D2App/gateways/FieldGatewayPassword.js","D2App/gateways/FieldGatewayPasswordConfirmation.js","D2App/gateways/FieldGatewayUrlTemplate.js","D2App/gateways/FieldGatewayUsername.js","D2App/gateways/GatewayAddKeyValuePair.js","D2App/forms/FormRow.js","D2App/forms/createEqualTo.js","D2App/gateways/GatewayBulkSMSForm.js","D2App/gateways/GatewayClickatellForm.js","D2App/gateways/FieldGatewayConfigurationTemplate.js","D2App/gateways/FieldGatewayUseGet.js","D2App/gateways/FieldGatewaySendUrlParameters.js","D2App/gateways/FieldGatewayContentType.js","D2App/gateways/GatewayGenericForm.js","D2App/gateways/GatewayKeyValuePairValueField.js","D2App/gateways/GatewayKeyValuePairConfidentialValueFields.js","D2App/gateways/GatewayKeyValuePairValue.js","D2App/gateways/GatewayKeyValuePair.js","D2App/cancelDialog/CancelDialog.js","D2App/views/gateway_configuration/GatewayConfigFormEdit.js","D2App/gateways/GatewaysTable.js","D2App/gateways/getTypeLabelByType.js","D2App/gateways/GatewayList.js","D2App/gateways/gatewayTypes.js","D2App/gateways/useCreateBulkSMSGatewayMutation.js","D2App/gateways/useCreateClickatellGatewayMutation.js","D2App/gateways/createGenericGateWayDataFromVariables.js","D2App/gateways/useCreateGenericGatewayMutation.js","D2App/gateways/useDeleteGatewaysMutation.js","D2App/gateways/useReadGatewayQuery.js","D2App/gateways/useReadGatewaysQuery.js","D2App/gateways/useSetDefaultGatewayMutation.js","D2App/gateways/useUpdateGatewayMutation.js","D2App/gateways/useUpdateBulkSMSGatewayMutation.js","D2App/gateways/useUpdateClickatellGatewayMutation.js","D2App/gateways/useUpdateGenericGatewayMutation.js","D2App/views/gateway_configuration/GatewayConfigFormNew.js","D2App/dataList/ListActions.js","D2App/text/Paragraph.js","D2App/views/gateway_configuration/GatewayConfigList.js","D2App/views/received_sms_list/config.js","D2App/views/received_sms_list/DeleteSelectedButton.js","D2App/views/received_sms_list/useQueryParams.js","D2App/views/received_sms_list/createSearchString.js","D2App/views/received_sms_list/Filter.js","D2App/time/Date.js","D2App/time/Time.js","D2App/views/received_sms_list/Pagination.js","D2App/views/received_sms_list/SmsTable.js","D2App/views/received_sms_list/ReceivedSmsList.js","D2App/smsCommandFields/fieldNames.js","D2App/smsCommandFields/CommandsAddSpecialCharacters.js","D2App/smsCommandFields/completenessMethods.js","D2App/smsCommand/SaveCommandButton.js","D2App/smsCommand/SubmitErrors.js","D2App/smsCommand/CommandFormActions.js","D2App/smsCommand/DeleteCommandsConfirmationDialog.js","D2App/smsCommand/isParserType.js","D2App/smsCommand/useCreateSmsCommandMutation.js","D2App/smsCommand/useDeleteSmsCommandMutation.js","D2App/smsCommand/useReadSmsCommandParserTypeQuery.js","D2App/smsCommand/useReadSmsCommandsQuery.js","D2App/smsCommand/useUpdateCommand.js","D2App/dataSet/FieldDataSet.js","D2App/dataSet/useReadDataSetsQuery.js","D2App/dataSet/FieldDataSetWithAutoLoad.js","D2App/dataSet/useReadDataSetQuery.js","D2App/dataElement/useReadDataElementsOfDataSetQuery.js","D2App/smsCommandFields/FieldDataElementWithCategoryOptionComboFormula.js","D2App/smsCommandFields/FieldDataElementWithCategoryOptionComboAddFormulaButton.js","D2App/smsCommandFields/FieldDataElementWithCategoryOptionCombo.js","D2App/smsCommand/DE_COC_toFormName.js","D2App/smsCommandFields/DataElementTimesCategoryOptionCombosCompletenessMessage.js","D2App/smsCommandFields/DataElementTimesCategoryOptionCombos.js","D2App/smsCommandFields/FieldCommandCompletenessMethod.js","D2App/smsCommandFields/FieldCommandConfirmMessage.js","D2App/smsCommandFields/FieldCommandDefaultMessage.js","D2App/smsCommandFields/FieldCommandMoreThanOneOrgUnitMessage.js","D2App/smsCommandFields/FieldCommandName.js","D2App/smsCommandFields/FieldCommandNoUserMessage.js","D2App/smsCommandFields/parserTypes.js","D2App/smsCommandFields/FieldCommandParser.js","D2App/smsCommandFields/FieldCommandSeparator.js","D2App/smsCommandFields/FieldCommandSmsCode.js","D2App/smsCommandFields/FieldCommandSpecialCharacter.js","D2App/smsCommandFields/FieldCommandSuccessMessage.js","D2App/smsCommandFields/FieldCommandUseCurrentPeriodForReporting.js","D2App/smsCommandFields/FieldCommandWrongFormatMessage.js","D2App/smsCommandFields/ProgramStageDataElements.js","D2App/userGroup/FieldUserGroup.js","D2App/userGroup/useReadUserGroupsQuery.js","D2App/userGroup/FieldUserGroupWithAutoLoad.js","D2App/smsCommandUnregisteredParser/CommandEditUnregisteredParserForm.js","D2App/program/FieldProgram.js","D2App/program/useReadProgramsQuery.js","D2App/program/FieldProgramWithAutoLoad.js","D2App/smsCommandTrackedEntityRegistrationParser/CommandEditTrackedEntityRegistrationParserForm.js","D2App/programStage/FieldProgramStage.js","D2App/programStage/useReadProgramStagesQuery.js","D2App/programStage/FieldProgramStageWithLoadingStates.js","D2App/smsCommandProgramStageDataEntryParser/useReadSmsCommandProgramStageDataEntryParserQuery.js","D2App/smsCommandProgramStageDataEntryParser/CommandEditProgramStageDataEntryParserForm.js","D2App/smsCommandWithDataSet/useReadSmsCommandWithDataSetQuery.js","D2App/smsCommandWithDataSet/CommandEditWithDataSetForm.js","D2App/smsCommand/getSmsCodeDuplicates.js","D2App/smsCommandKeyValueParser/CommandEditKeyValueParserForm.js","D2App/smsCommandJ2MEParser/CommandEditJ2MEParserForm.js","D2App/smsCommandEventRegistrationParser/useReadSmsCommandEventRegistrationParserQuery.js","D2App/smsCommandEventRegistrationParser/CommandEditEventRegistrationParserForm.js","D2App/smsCommandAlertParser/CommandEditAlertParserForm.js","D2App/views/sms_commands/SmsCommandFormEdit.js","D2App/views/sms_commands/SmsCommandFormNew.js","D2App/views/sms_commands/SmsCommandList.js","D2App/smsCommand/getLabelByParserType.js","D2App/views/sent_sms_list/translations.js","D2App/views/sent_sms_list/SmsTableItem.js","D2App/views/sent_sms_list/RefetchSms.js","D2App/views/sent_sms_list/Pagination.js","D2App/views/sent_sms_list/SmsTable.js","D2App/views/sent_sms_list/StatusFilter.js","D2App/views/sent_sms_list/selectors.js","D2App/views/sent_sms_list/DeleteSelectedButton.js","D2App/views/sent_sms_list/SentSmsList.js","D2App/views/sent_sms_list/handlers.js","D2App/navigation/NavigationItem.js","D2App/navigation/Navigation.js","D2App/App.js"],"names":["module","exports","AlertContext","createContext","addAlert","Error","dataTest","name","prefix","AlertHandler","children","alerts","setAlerts","useState","Provider","value","message","type","alert","timestamp","Date","now","map","key","i18n","addResources","arTranslations","enTranslations","esTranslations","frTranslations","idTranslations","loTranslations","nbTranslations","prsTranslations","psTranslations","ptTranslations","pt_BRTranslations","ruTranslations","tgTranslations","urTranslations","uz_CyrlTranslations","viTranslations","zhTranslations","zh_CNTranslations","PageHeadline","className","styles","headline","data-test","PageSubHeadline","subHeadline","HomeCard","titleText","bodyText","linkText","to","s","container","title","body","linkContainer","link","Home","t","nsSeparator","explanation","grid","gridItem","GATEWAY_CONFIG_LIST_PATH","SMS_COMMAND_LIST_PATH","SENT_SMS_LIST_PATH","RECEIVED_SMS_LIST_PATH","DeleteGatewaysConfirmationDialog","onCancelClick","onDeleteClick","secondary","onClick","destructive","Field","ReactFinalForm","FieldGatewayAuthToken","required","label","component","InputFieldFF","validate","composeValidators","string","hasValue","FieldGatewayName","FIELD_GATEWAY_PASSWORD_LABEL","FieldGatewayPassword","equalToPassword","createEqualTo","FieldGatewayPasswordConfirmation","FieldGatewayUrlTemplate","url","FieldGatewayUsername","useForm","GatewayAddKeyValuePair","change","getState","button","parameters","values","header","encode","confidential","FormRow","cx","formRow","isEmpty","arrayIndexRegex","description","requireArgument","errorMessage","otherField","allValues","comparisonValue","object","split","reduce","curValue","segment","match","arraySegment","replace","arrayIndex","parseInt","segmentValue","undefined","Form","GatewayBulkSMSForm","onSubmit","initialValues","submitText","keepDirtyOnReinitialize","handleSubmit","submitting","pristine","primary","icon","small","disabled","defaultProps","GatewayClickatellForm","FieldGatewayConfigurationTemplate","helpText","FieldGatewayUseGet","CheckboxFieldFF","FieldGatewaySendUrlParameters","optionApplicationJson","optionApplicationXml","optionFormUrlEncoded","optionTextPlain","options","FieldGatewayContentType","SingleSelectFieldFF","initialValue","GatewayGenericForm","_","index","GatewayKeyValuePair","isStringWithLengthAtLeastOne","createFieldGatewayKeyValuePairValueName","FIELD_GATEWAY_KEY_VALUE_PAIR_VALUE_LABEL","GatewayKeyValuePairValueField","isConfidential","createEqualToConfidentialValue","FIELD_GATEWAY_KEY_VALUE_PAIR_VALUE_CONFIRMATION_LABEL","GatewayKeyValuePairConfidentialValueFields","useField","GatewayKeyValuePairValue","input","textInputs","keyInput","valueInput","checkboxGroup","checkbox","slice","removeKeyValueFromFormState","CancelDialog","onConfirmCancel","onAbortCancel","GATEWAY_CONFIG_FORM_EDIT_PATH","GatewayConfigFormEdit","history","useHistory","id","useParams","showCancelDialog","setShowCancelDialog","loading","error","loadError","data","jsonData","useReadGatewayQuery","saveGenericGateway","saveGenericGatewayError","useUpdateGenericGatewayMutation","saveBulkSMSGateway","saveBulkSMSGatewayError","useUpdateBulkSMSGatewayMutation","saveClickatellGateway","saveClickatellGatewayError","useUpdateClickatellGatewayMutation","saveError","msg","gateway","JSON","parse","gatewayType","hasGateway","FormComponent","GENERIC_FORM","BULK_SMS_FORM","CLICKATELL_FORM","getFormComponent","data-gateway-id","uid","async","formValues","push","e","Promise","reject","GatewaysTable","allGatewaysChecked","checkedGateways","gateways","onGatewayToggle","onToggleAll","onMakeDefaultClick","onChange","checked","checkboxCell","includes","typeCell","defaultCell","isDefault","isDefaultText","makeDefaultButton","editCell","rowActions","GatewayList","setCheckedGateways","processing","length","processingMessage","loadingContainer","findIndex","curId","newCheckedGateways","allGatewayIds","CREATE_BULK_SMS_GATEWAY_MUTATION","resource","username","password","CREATE_CLICKATELL_GATEWAY_MUTATION","authToken","urlTemplate","createGenericGateWayDataFromVariables","configurationTemplate","contentType","sendUrlParameters","useGet","CREATE_GENERIC_GATEWAY_MUTATION","DELETE_GATEWAY_MUTATION","useDeleteGatewaysMutation","setLoading","setError","idToMutationRequest","engine","variables","mutate","idToMutationRequestFactory","useDataEngine","onDone","response","onError","ids","all","then","catch","GATEWAY_QUERY","useDataQuery","GATEWAYS_QUERY","params","fields","filter","SET_DEFAULT_GATEWAY_MUTATION","useUpdateGatewayMutation","query","updatedQuery","UPDATE_BULK_SMS_GATEWAY_MUTATION","UPDATE_CLICKATELL_GATEWAY_MUTATION","UPDATE_GENERIC_GATEWAY_MUTATION","GatewayConfigFormNew","visibleForm","setVisibleForm","useDataMutation","selected","passwordRequired","ListActions","addLabel","deleteLabel","dataTestProp","onAddClick","disableAdd","disableDelete","Paragraph","paragraph","GatewayConfigList","showDeleteDialog","setShowDeleteDialog","loadingReadGateways","errorReadGateways","refetch","refetchReadGateways","join","rest","parsedData","useReadGatewaysQuery","deleteCheckedGateways","loadingDelete","errorDelete","makeGatewayDefault","loadingSetDefault","errorSetDefault","hasGateways","info","RECEIVED_SMS_LIST_LABEL","STATUS_FILTER_OPTIONS","mutation","DeleteSelectedButton","selectedIds","onComplete","useContext","useQueryParams","searchParams","URLSearchParams","useLocation","search","status","get","phoneNumber","page","pageSize","createSearchString","queryString","Object","keys","acc","paramKey","paramValue","Filter","inputStrip","inputWidth","phoneNumberField","large","date","formatted","moment","format","Time","time","PAGE_LENGTHS","Pagination","pageCount","total","firstItem","Math","min","lastItem","availablePages","Array","from","_x","i","toString","navigateToPage","newPage","verticalAlign","dense","select","summary","buttonPrevious","availablePage","buttonNext","SmsTable","messages","pager","setSelectedIds","selectedIdSet","Set","allSelected","toggle","has","delete","add","colSpan","noResults","bind","text","originator","smsstatus","user","userCredentials","receiveddate","inboundSms","order","filters","filterParams","ReceivedSmsList","called","lazy","useEffect","inboundsmss","topBar","FIELD_COMMAND_COMPLETENESS_METHOD_NAME","FIELD_COMMAND_DEFAULT_MESSAGE_NAME","FIELD_COMMAND_ID_NAME","FIELD_COMMAND_MORE_THAN_ONE_ORG_UNIT_MESSAGE_NAME","FIELD_COMMAND_NAME_NAME","FIELD_COMMAND_NO_USER_MESSAGE_NAME","FIELD_COMMAND_PARSER_NAME","FIELD_COMMAND_PROGAM_NAME","FIELD_COMMAND_PROGAM_STAGE_NAME","FIELD_COMMAND_SEPARATOR_NAME","FIELD_COMMAND_SMS_CODES_NAME","FIELD_COMMAND_SPECIAL_CHARS_NAME","FIELD_COMMAND_SUCCESS_MESSAGE_NAME","FIELD_COMMAND_USE_CURRENT_PERIOD_FOR_REPORTING_NAME","FIELD_COMMAND_WRONG_FORMAT_MESSAGE_NAME","FIELD_COMMAND_CONFIRM_MESSAGE_NAME","CommandsAddSpecialCharacters","newSpecialChars","ALL_DATAVALUE","AT_LEAST_ONE_DATAVALUE","DO_NOT_MARK_COMPLETE","useFormState","subscription","SaveCommandButton","enabled","submitError","hasSubmitErrors","SubmitErrors","CommandFormActions","enableSubmit","onCancel","DeleteCommandsConfirmationDialog","isParserType","parserType","parser","CREATE_SMS_COMMAND_MUTATION","dataset","userGroup","program","programStage","KEY_VALUE_PARSER","J2ME_PARSER","ALERT_PARSER","UNREGISTERED_PARSER","TRACKED_ENTITY_REGISTRATION_PARSER","PROGRAM_STAGE_DATAENTRY_PARSER","EVENT_REGISTRATION_PARSER","DELETE_SMS_COMMAND_MUTATION","useDeleteSmsCommandMutation","READ_SMS_COMMAND_PARSER_TYPE_QUERY","smsCommand","paging","SMS_COMMANDS_QUERY","smsCommands","FORM_ERROR","FinalForm","identity","REPLACE_SMS_COMMAND_MUTATION","commandId","UPDATE_SMS_COMMAND_MUTATION","partial","useUpdateCommand","onAfterChange","formatCommand","allVariables","fallback","FieldDataSet","dataSets","errorText","validationText","DATA_SETS_QUERY","FieldDataSetWithAutoLoad","showLoadingStatus","programs","displayName","DATA_ELEMENTS_QUERY","dataSet","useReadDataElementsOfDataSetQuery","dataSetId","setData","dataSetElements","dataElement","queryDataElementsOfDataSet","finally","FieldDataElementWithCategoryOptionComboFormula","baseName","combo","targetFieldName","onClose","form","smsCode","initialFormula","formula","operator","useMemo","dataElementCode","code","onRemove","newFormula","event","stopPropagation","FieldDataElementWithCategoryOptionComboAddFormulaButton","setCalled","formulaDataElementName","setFormulaDataElementName","dataElements","formulaInWords","formulaInWordsLabel","FieldDataElementWithCategoryOptionCombo","categoryOptionCombo","showFormula","setShowFormula","dataElementId","cocCode","DE_COC_toFormName","formulaName","field","invalid","touched","meta","codeField","formulaFieldName","DataElementTimesCategoryOptionCombosCompletenessMessage","completenessMethod","warning","DataElementTimesCategoryOptionCombos","DE_COC_combinations","allRequired","completenessMethods","FieldCommandCompletenessMethod","FieldCommandConfirmMessage","TextAreaFieldFF","FieldCommandDefaultMessage","FieldCommandMoreThanOneOrgUnitMessage","FieldCommandName","FieldCommandNoUserMessage","commandTypes","sort","a","b","FieldCommandParser","FieldCommandSeparator","FieldCommandSmsCode","valueType","nextCode","trackedEntityAttribute","FieldCommandSpecialCharacter","onSpecialKeyRemoved","specialChars","FieldCommandSuccessMessage","FieldCommandUseCurrentPeriodForReporting","FieldCommandWrongFormatMessage","ProgramStageDataElements","programStageDataElements","smsCodes","FieldUserGroup","userGroups","USER_GROUPS_QUERY","FieldUserGroupWithAutoLoad","CommandEditUnregisteredParserForm","updateCommand","receivedMessage","FieldProgram","PROGRAMS_QUERY","registration","FieldProgramWithAutoLoad","useReadProgramsQuery","formatSmsCodes","updates","CommandEditTrackedEntityRegistrationParserForm","separator","defaultMessage","wrongFormatMessage","noUserMessage","moreThanOneOrgUnitMessage","successMessage","smsCodesOriginal","curSmsCodes","selectedProgramOption","dynamicFields","programTrackedEntityAttributes","merged","dynamicField","FieldProgramStage","programStages","iinitialValue","PROGRAM_STAGES_QUERY","programId","FieldProgramStageWithLoadingStates","useReadProgramStagesQuery","isEventRegistrationParser","programStageValueForEventRegistration","READ_SMS_COMMAND_PROGRAM_STAGE_DATA_ENTRY_PARSER_QUERY","CommandEditProgramStageDataEntryParserForm","loadingCommandError","commandData","programStageId","command","getInitialFormState","selectedProgramStageOption","READ_SMS_COMMAND_KEY_VALUE_PARSER_QUERY","FormSpy","globalValidate","hasErrors","errors","smsCodesFormState","smsCodesWithValue","entries","duplicates","curDuplicates","potentialDuplicates","curCode","curIndex","newlyFoundDuplicates","curWithCodeDuplicates","curName","getSmsCodeDuplicates","duplicateErrors","forEach","duplicate","assign","formattedSmsCodes","compulsory","optionId","formattedSmsCode","DE_COC_combination_data","hasSpecialChars","selectedDataSetOption","specialKeyRemoved","setSpecialKeyRemoved","CommandEditWithDataSetForm","initialCompletenessMethod","useCurrentPeriodForReporting","specialCharacters","curCombinations","categoryCombo","combos","COC","dirty","CommandEditKeyValueParserForm","CommandEditJ2MEParserForm","READ_SMS_COMMAND_EVENT_REGISTRATION_PARSER_QUERY","CommandEditEventRegistrationParserForm","CommandEditAlertParserForm","SMS_COMMAND_FORM_EDIT_PATH","SmsCommandFormEdit","useReadSmsCommandParserTypeQuery","isParser","getSmsCommandEditFormComponent","goBack","ActualForm","prevValues","setPrevValues","subscribe","batch","prevProgram","prevParserType","useResetFormFields","showDataSetField","showUserGroupField","showProgramField","showProgramStageField","shouldProgramsBeWithRegistration","disableProgramStage","SmsCommandFormNew","createSmsCommand","useCreateSmsCommandMutation","destroyOnUnregister","SMS_COMMAND_LIST_LABEL","SmsCommandList","checkedSmsCommands","setCheckedSmsCommands","showDeleteConfirmationDialog","setShowDeleteConfirmationDialog","loadingReadSmsCommands","errorReadSmsCommands","deleteSmsCommands","allChecked","hasCommands","find","checkedId","toggleSmsCommand","parserTypes","getLabelByParserTypes","editButtonCell","statusMap","DELIVERED","ERROR","FAILED","OUTBOUND","PENDING","SCHEDULED","SENT","SmsTableItem","sms","toggleSelected","isSelected","recipients","recipient","throwError","RefetchSms","refetchAndClear","pageSizes","changePage","left","size","right","amount","pageselection","smses","toggleAll","parseStatus","filterOptions","StatusFilter","setStatus","SENT_SMS_LIST_LABEL","base","SentSmsList","setSelected","allIds","getAllIds","outboundsmss","noIds","noLengthMatch","every","getAllSelected","cleanSelected","filtered","current","createCleanSelectedHandler","createToggleAllHandler","currentId","createToggleHandler","context","headerRight","NavigationItem","path","exactMatch","active","routeMatch","useRouteMatch","isExact","useIsItemActive","item","defualtProps","Navigation","App","spacers","colors","sidebar","content","exact"],"mappings":"iHACAA,EAAOC,QAAU,CAAC,UAAY,uBAAuB,QAAU,qBAAqB,QAAU,uB,mi6HCA9FD,EAAOC,QAAU,CAAC,SAAW,iC,oBCA7BD,EAAOC,QAAU,CAAC,YAAc,uC,oBCAhCD,EAAOC,QAAU,CAAC,UAAY,wBAAwB,YAAc,0BAA0B,KAAO,mBAAmB,SAAW,yB,oBCAnID,EAAOC,QAAU,CAAC,UAAY,4BAA4B,MAAQ,wBAAwB,KAAO,uBAAuB,cAAgB,gCAAgC,KAAO,yB,oBCA/KD,EAAOC,QAAU,CAAC,OAAS,yC,oBCA3BD,EAAOC,QAAU,CAAC,QAAU,2B,oBCA5BD,EAAOC,QAAU,CAAC,UAAY,uCAAuC,WAAa,wCAAwC,SAAW,sCAAsC,WAAa,wCAAwC,cAAgB,2CAA2C,SAAW,wC,oBCAtSD,EAAOC,QAAU,CAAC,UAAY,2C,oBCA9BD,EAAOC,QAAU,CAAC,WAAa,kCAAkC,aAAe,oCAAoC,SAAW,gCAAgC,SAAW,gCAAgC,YAAc,mCAAmC,kBAAoB,yCAAyC,cAAgB,uC,oBCAxUD,EAAOC,QAAU,CAAC,UAAY,+BAA+B,kBAAoB,uCAAuC,iBAAmB,wC,oBCA3ID,EAAOC,QAAU,CAAC,UAAY,0C,oBCA9BD,EAAOC,QAAU,CAAC,UAAY,iC,oBCA9BD,EAAOC,QAAU,CAAC,UAAY,+B,oBCA9BD,EAAOC,QAAU,CAAC,UAAY,qCAAqC,QAAU,qC,oBCA7ED,EAAOC,QAAU,CAAC,UAAY,0BAA0B,WAAa,6B,oBCArED,EAAOC,QAAU,CAAC,KAAO,qB,oBCAzBD,EAAOC,QAAU,CAAC,KAAO,qB,oBCAzBD,EAAOC,QAAU,CAAC,UAAY,8BAA8B,cAAgB,kCAAkC,OAAS,2BAA2B,eAAiB,mCAAmC,WAAa,+BAA+B,QAAU,8B,oBCA5PD,EAAOC,QAAU,CAAC,UAAY,4BAA4B,WAAa,+B,oBCAvED,EAAOC,QAAU,CAAC,UAAY,mCAAmC,OAAS,kC,oBCA1ED,EAAOC,QAAU,CAAC,UAAY,wC,oBCA9BD,EAAOC,QAAU,CAAC,eAAiB,gFAAgF,oBAAsB,uF,oBCAzID,EAAOC,QAAU,CAAC,UAAY,2DAA2D,MAAQ,uDAAuD,UAAY,6D,oBCApKD,EAAOC,QAAU,CAAC,QAAU,wD,oBCA5BD,EAAOC,QAAU,CAAC,UAAY,gDAAgD,MAAQ,4CAA4C,OAAS,+C,oBCA3ID,EAAOC,QAAU,CAAC,UAAY,wC,oBCA9BD,EAAOC,QAAU,CAAC,UAAY,uC,oBCA9BD,EAAOC,QAAU,CAAC,UAAY,kCAAkC,eAAiB,uCAAuC,SAAW,iCAAiC,UAAY,oC,oBCAhLD,EAAOC,QAAU,CAAC,UAAY,kC,oBCA9BD,EAAOC,QAAU,CAAC,UAAY,8BAA8B,KAAO,yBAAyB,MAAQ,0BAA0B,OAAS,2BAA2B,cAAgB,oC,oBCAlLD,EAAOC,QAAU,CAAC,UAAY,8B,oBCA9BD,EAAOC,QAAU,CAAC,UAAY,+BAA+B,OAAS,4BAA4B,YAAc,mC,oBCAhHD,EAAOC,QAAU,CAAC,KAAO,+B,y2GCAlB,MAAMC,EAAeC,wBAAc,CACxCC,SAAU,KACR,MAAM,IAAIC,MAAM,iDCFPC,EAAW,CAACC,EAAMC,EADT,2BACE,UAAqCA,EAArC,YAA+CD,GCI1DE,EAAe,EAC1BC,eAEA,MAAOC,EAAQC,GAAaC,mBAAS,IAerC,OAAO,kBAACX,EAAaY,SAAd,CAAuBC,MAAO,CACnCX,SAde,EACfY,UACAC,WAEA,MAAMC,EAAQ,CACZF,UACAC,OAEAE,UAAWC,KAAKC,OAElBT,EAAU,IAAID,EAAQO,OAMbR,EAED,kBAAC,IAAD,CAAYJ,SAAUA,EAAS,+BAC1BK,EAAOW,IAAI,EACpBN,UACAC,OACAE,eACI,kBAAC,IAAD,eAAUb,SAAUA,EAAS,uBAAwBiB,IAAG,UAAKP,GAAL,OAAeG,IAAiB,CAC5F,CAACF,IAAO,IAESD,O,sLCRzBQ,IAAKC,aAAa,KADA,UACiBC,GACnCF,IAAKC,aAAa,KAFA,UAEiBE,GACnCH,IAAKC,aAAa,KAHA,UAGiBG,GACnCJ,IAAKC,aAAa,KAJA,UAIiBI,GACnCL,IAAKC,aAAa,KALA,UAKiBK,GACnCN,IAAKC,aAAa,KANA,UAMiBM,GACnCP,IAAKC,aAAa,KAPA,UAOiBO,GACnCR,IAAKC,aAAa,MARA,UAQkBQ,GACpCT,IAAKC,aAAa,KATA,UASiBS,GACnCV,IAAKC,aAAa,KAVA,UAUiBU,GACnCX,IAAKC,aAAa,QAXA,UAWoBW,GACtCZ,IAAKC,aAAa,KAZA,UAYiBY,GACnCb,IAAKC,aAAa,KAbA,UAaiBa,GACnCd,IAAKC,aAAa,KAdA,UAciBc,GACnCf,IAAKC,aAAa,UAfA,UAesBe,GACxChB,IAAKC,aAAa,KAhBA,UAgBiBgB,GACnCjB,IAAKC,aAAa,KAjBA,UAiBiBiB,GACnClB,IAAKC,aAAa,QAlBA,UAkBoBkB,GACvBnB,QAAf,E,kBC1CO,MAAMoB,EAAe,EAC1BlC,cACI,wBAAImC,UAAWC,IAAOC,SAAUC,YAAW1C,EAAS,0BACjDI,G,sBCHF,MAAMuC,EAAkB,EAC7BvC,cACI,wBAAImC,UAAWC,IAAOI,YAAaF,YAAW1C,EAAS,6BACpDI,G,wCCwBMyC,MAzBE,EACfC,YACAC,WACAC,WACAC,QAEO,kBAAC,IAAD,KACG,yBAAKV,UAAWW,IAAEC,WACd,wBAAIZ,UAAWW,IAAEE,OAAQN,GACzB,uBAAGP,UAAWW,IAAEG,MAAON,GACvB,yBAAKR,UAAWW,IAAEI,eACd,kBAAC,IAAD,CAAMf,UAAWW,IAAEK,KAAMN,GAAIA,GACxBD,MCXlB,MAEMQ,EAAO,IACX,yBAAKd,YAAW1C,EAAS,cAAeuC,UAAWW,IAAEC,WAClD,kBAACb,EAAD,KACKpB,EAAKuC,EAAE,8BAA+B,CAC/CC,YAAa,OAGT,uBAAGnB,UAAWW,IAAES,aACXzC,EAAKuC,EAAE,kGAEZ,yBAAKlB,UAAWW,IAAEU,MACd,yBAAKrB,UAAWW,IAAEW,UACd,kBAAC,EAAD,CAAUf,UAAW5B,EAAKuC,EAAE,yBAA0BV,SAAU7B,EAAKuC,EAAE,4EAA6ET,SAAU9B,EAAKuC,EAAE,mBAAoBR,GAAIa,MAEjM,yBAAKvB,UAAWW,IAAEW,UACd,kBAAC,EAAD,CAAUf,UAAW5B,EAAKuC,EAAE,gBAAiBV,SAAU7B,EAAKuC,EAAE,2FAA4FT,SAAU9B,EAAKuC,EAAE,uBAAwBR,GAAIc,MAE3M,yBAAKxB,UAAWW,IAAEW,UACd,kBAAC,EAAD,CAAUf,UAAW5B,EAAKuC,EAAE,qBAAsBV,SAAU7B,EAAKuC,EAAE,kDAAmDT,SAAU9B,EAAKuC,EAAE,qBAAsBR,GAAIe,MAErK,yBAAKzB,UAAWW,IAAEW,UACd,kBAAC,EAAD,CAAUf,UAAW5B,EAAKuC,EAAE,yBAA0BV,SAAU7B,EAAKuC,EAAE,oDAAqDT,SAAU9B,EAAKuC,EAAE,yBAA0BR,GAAIgB,QCzBlLC,EAAmC,EAC9CC,gBACAC,mBACI,kBAAC,IAAD,CAAOpE,SAAUA,EAAS,sCACxB,kBAAC,IAAD,KAAakB,EAAKuC,EAAE,qBACpB,kBAAC,IAAD,KACKvC,EAAKuC,EAAE,2DAEZ,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQY,WAAS,EAACC,QAASH,EAAenE,SAAUA,EAAS,6CAA7D,UAIA,kBAAC,IAAD,CAAQuE,aAAW,EAACD,QAASF,EAAepE,SAAUA,EAAS,8CAA/D,cCfV,MACJwE,GACEC,IACSC,EAAwB,IAAM,kBAACF,EAAD,CAAOG,UAAQ,EAAC3E,SAAUA,EAAS,kCAAmCC,KAAK,YAAY2E,MAAO1D,EAAKuC,EAAE,cAAeoB,UAAWC,IAAcC,SAAUC,YAAkBC,IAAQC,QCF1NV,MADI,GAEFC,IACSU,EAAmB,IAAM,kBAAC,EAAD,CAAOR,UAAQ,EAAC3E,SAAUA,EAAS,6BAA8BC,KAAK,OAAO2E,MAAO1D,EAAKuC,EAAE,QAASoB,UAAWC,IAAcC,SAAUC,YAAkBC,IAAQC,QCFrMV,MADI,IAEFC,IAESW,GAA+BlE,EAAKuC,EAAE,YACtC4B,GAAuB,IAAM,kBAAC,GAAD,CAAOV,UAAQ,EAAChE,KAAK,WAAWX,SAAUA,EAAS,iCAAkCC,KAFpF,WAEuH2E,MAAOQ,GAA8BP,UAAWC,IAAcC,SAAUC,YAAkBC,IAAQC,QCHlQV,MADI,IAEFC,IACEa,GAAkBC,YDDmB,WCCwBH,IACtDI,GAAmC,IAAM,kBAAC,GAAD,CAAOb,UAAQ,EAAChE,KAAK,WAAWX,SAAUA,EAAS,6CAA8CC,KAAK,wBAAwB2E,MAAO1D,EAAKuC,EAAE,oBAAqBoB,UAAWC,IAAcC,SAAUC,YAAkBC,IAAQC,IAAUI,OCJ5Rd,MADI,IAEFC,IACSgB,GAA0B,IAAM,kBAAC,GAAD,CAAOd,UAAQ,EAAC3E,SAAUA,EAAS,oCAAqCC,KAAK,cAAc2E,MAAO1D,EAAKuC,EAAE,gBAAiBoB,UAAWC,IAAcC,SAAUC,YAAkBU,IAAKR,QCF/NV,MADI,IAEFC,IACSkB,GAAuB,IAAM,kBAAC,GAAD,CAAOhB,UAAQ,EAAC3E,SAAUA,EAAS,iCAAkCC,KAAK,WAAW2E,MAAO1D,EAAKuC,EAAE,aAAcoB,UAAWC,IAAcC,SAAUC,YAAkBC,IAAQC,O,yBCFxN,MAAM,QACJU,IACEnB,IACSoB,GAAyB,KACpC,MAAM,OACJC,EADI,SAEJC,GACEH,KAeJ,OAAO,kBAAC,IAAD,CAAQrD,UAAWC,KAAOwD,OAAQ1B,QAbV,KAC7B,MAAM,WACJ2B,GACEF,IAAWG,OACfJ,EAAO,aAAc,IAAIG,EAAY,CACnCE,QAAQ,EACRC,QAAQ,EACRnF,IAAK,GACLR,MAAO,GACP4F,cAAc,MAIwDrG,SAAUA,EAAS,oCAClFkB,EAAKuC,EAAE,wB,4CCvBb,MAAM6C,GAAU,EACrBlG,WACAmC,eACI,yBAAKA,UAAWgE,KAAG/D,KAAOgE,QAASjE,GAAYG,YAAW1C,EAAS,kBAChEI,GCPHqG,GAAUhG,GAA0B,qBAAVA,GAAmC,OAAVA,GAA4B,KAAVA,EAQrEiG,GAAkB,aAsBXnB,GAAgB,CAACtE,EAAK0F,KA3BJ,EAAClG,EAAOE,KACrC,GAAI8F,GAAQhG,WAAiBA,IAAUE,EACrC,MAAM,IAAIZ,MAH8B,yDA6B1C6G,CAAgB3F,EAAK,UACrB,MAAM4F,EAAe3F,IAAKuC,EAAE,kFAAmF,CAC7GqD,WAAYH,GAAe1F,IAE7B,MAAO,CAACR,EAAOsG,KACb,MAAMC,GAzBeC,EAyBkBF,EAAL9F,EAxBdiG,MAHN,KAIOC,OAAO,CAACC,EAAUC,KACvC,IAAKD,EAAU,OAAOA,EAEtB,GAAIC,EAAQC,MAAMZ,IAAkB,CAClC,MAAMa,EAAeF,EAAQG,QAAQd,GAAiB,IAChDe,EAAaC,SAASL,EAAQC,MAAMZ,IAAiB,GAAI,IAC/D,OAAKU,EAASG,GACPH,EAASG,GAAcE,GADML,EAASG,GAI/C,MAAMI,EAAeP,EAASC,GAC9B,OAAKM,GAAqB,MAEzBV,IAfa,IAAOA,EA0BrB,OAAOR,GAAQhG,IAAUA,IAAUuG,OAAkBY,EAAYf,KChC/D,KACJgB,IACEpD,IACSqD,GAAqB,EAChC3D,gBACA4D,WACAC,oBAEA,MAAMC,EAAaD,EAAgB9G,EAAKuC,EAAE,gBAAkBvC,EAAKuC,EAAE,eACnE,OAAO,kBAACoE,GAAD,CAAMK,yBAAuB,EAACH,SAAUA,EAAUC,cAAeA,GAC7D,EACPG,eACAC,aACAC,cACI,0BAAMN,SAAUI,EAAczF,YAAW1C,EAAS,gCACxC,kBAACsG,GAAD,KACI,kBAACnB,EAAD,OAGJ,kBAACmB,GAAD,KACI,kBAACX,GAAD,OAGJ,kBAACW,GAAD,KACI,kBAACjB,GAAD,OAGJ,kBAACiB,GAAD,KACI,kBAACd,GAAD,OAGJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQ8C,SAAO,EAAC3H,KAAK,SAAS4H,KAAMH,EAAa,kBAAC,IAAD,CAAgBI,OAAK,IAAM,KAAMC,SAAUL,EAAYpI,SAAUA,EAAS,oCACtHiI,GAGL,kBAAC,IAAD,CAAQ3D,QAAS,IAAMH,EAAckE,IAChCnH,EAAKuC,EAAE,eAMpCqE,GAAmBY,aAAe,CAChCV,cAAe,IC5CjB,MACEH,KADI,IAEFpD,IACSkE,GAAwB,EACnCxE,gBACA4D,WACAC,oBAEA,MAAMC,EAAaD,EAAgB9G,EAAKuC,EAAE,gBAAkBvC,EAAKuC,EAAE,eACnE,OAAO,kBAAC,GAAD,CAAMyE,yBAAuB,EAACH,SAAUA,EAAUC,cAAeA,GAC7D,EACPG,eACAC,aACAC,cACI,0BAAMN,SAAUI,EAAczF,YAAW1C,EAAS,mCACxC,kBAACsG,GAAD,KACI,kBAACnB,EAAD,OAGJ,kBAACmB,GAAD,KACI,kBAACX,GAAD,OAGJ,kBAACW,GAAD,KACI,kBAAC5B,EAAD,OAGJ,kBAAC4B,GAAD,KACI,kBAACb,GAAD,OAGJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQ6C,SAAO,EAAC3H,KAAK,SAAS4H,KAAMH,EAAa,kBAAC,IAAD,CAAgBI,OAAK,IAAM,KAAMC,SAAUL,EAAYpI,SAAUA,EAAS,uCACtHiI,GAGL,kBAAC,IAAD,CAAQ3D,QAAS,IAAMH,EAAckE,IAChCnH,EAAKuC,EAAE,eAMpCkF,GAAsBD,aAAe,CACnCV,cAAe,IC/CjB,MACExD,MADI,IAEFC,IACSmE,GAAoC,IAAM,kBAAC,GAAD,CAAOjE,UAAQ,EAAC3E,SAAUA,EAAS,8CAA+CC,KAAK,wBAAwB2E,MAAO1D,EAAKuC,EAAE,0BAA2BoB,UAAWC,IAAcC,SAAUC,YAAkBC,IAAQC,KAAW2D,SAAU3H,EAAKuC,EAAE,4DCFtSe,MADI,IAEFC,IACSqE,GAAqB,IAAM,kBAAC,GAAD,CAAOnI,KAAK,WAAWX,SAAUA,EAAS,+BAAgCC,KAAK,SAAS2E,MAAO1D,EAAKuC,EAAE,WAAYoB,UAAWkE,IAAiBF,SAAU3H,EAAKuC,EAAE,sDCFrMe,MADI,IAEFC,IACSuE,GAAgC,IAAM,kBAAC,GAAD,CAAOrI,KAAK,WAAWX,SAAUA,EAAS,0CAA2CC,KAAK,oBAAoB2E,MAAO1D,EAAKuC,EAAE,uBAAwBoB,UAAWkE,OCFhNvE,MADI,IAEFC,IACEwE,GAAwB,CAC5BrE,MAAO1D,EAAKuC,EAAE,oBACdhD,MAAO,oBAEHyI,GAAuB,CAC3BtE,MAAO1D,EAAKuC,EAAE,mBACdhD,MAAO,mBAEH0I,GAAuB,CAC3BvE,MAAO1D,EAAKuC,EAAE,oBACdhD,MAAO,oBAEH2I,GAAkB,CACtBxE,MAAO1D,EAAKuC,EAAE,cACdhD,MAAO,cAEH4I,GAAU,CAACJ,GAAuBC,GAAsBC,GAAsBC,IACvEE,GAA0B,IAAM,kBAAC,GAAD,CAAOtJ,SAAUA,EAAS,oCAAqCC,KAAK,cAAc2E,MAAO1D,EAAKuC,EAAE,gBAAiBoB,UAAW0E,IAAqBF,QAASA,GAASG,aAAcP,GAAsBxI,SCXlPoH,KADI,IAEFpD,IACSgF,GAAqB,EAChCtF,gBACA4D,WACAC,oBAEA,MAAMC,EAAaD,EAAgB9G,EAAKuC,EAAE,gBAAkBvC,EAAKuC,EAAE,eACnE,OAAO,kBAAC,GAAD,CAAMyE,yBAAuB,EAACH,SAAUA,EAAUC,cAAeA,GAC7D,EACPG,eACAjC,SACAkC,aACAC,cACI,0BAAMN,SAAUI,EAAczF,YAAW1C,EAAS,gCACxC,kBAAC2C,EAAD,KAAkBzB,EAAKuC,EAAE,kBAEzB,kBAAC6C,GAAD,KACI,kBAACnB,EAAD,OAGJ,kBAACmB,GAAD,KACI,kBAACb,GAAD,OAGJ,kBAACa,GAAD,KACI,kBAACsC,GAAD,OAGJ,kBAACtC,GAAD,KACI,kBAACgD,GAAD,OAGJ,kBAAChD,GAAD,KACI,kBAACwC,GAAD,OAGJ,kBAACxC,GAAD,KACI,kBAAC0C,GAAD,OAGJ,kBAACrG,EAAD,KACKzB,EAAKuC,EAAE,oBAGXyC,EAAOD,WAAWjF,IAAI,CAAC0I,EAAGC,IAAU,kBAACC,GAAD,CAAqBD,MAAOA,EAAO1I,IAAK0I,KAE7E,kBAAC9D,GAAD,MAEA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQyC,SAAO,EAAC3H,KAAK,SAASX,SAAUA,EAAS,mCAAoCyI,SAAUL,EAAYG,KAAMH,EAAa,kBAAC,IAAD,CAAgBI,OAAK,IAAM,MACpJP,GAGL,kBAAC,IAAD,CAAQ3D,QAAS,IAAMH,EAAckE,IAChCnH,EAAKuC,EAAE,eAMpCgG,GAAmBf,aAAe,CAChCV,cAAe,CACb/B,WAAY,KCvEhB,MACEzB,MADI,IAEFC,IACEoF,GAA+B7E,YAAkBC,IAAQC,KAClD4E,GAA0CH,GAAK,qBAAkBA,EAAlB,WAC/CI,GAA2C7I,EAAKuC,EAAE,SAClDuG,GAAgC,EAC3CL,QACAM,oBACI,kBAAC,GAAD,CAAOtJ,KAAMsJ,EAAiB,WAAa,OAAQjK,SAAUA,EAAS,sCAAuCC,KAAM6J,GAAwCH,GAAQ/E,MAAOmF,GAA0ClF,UAAWC,IAAcC,SAAU8E,KAC7PG,GAA8BtB,aAAe,CAC3CuB,gBAAgB,GCTlB,MACEzF,MADI,IAEFC,IAEEyF,GAAiCP,GAASpE,GAAcuE,GAAwCH,GAAQI,IAEjGI,GAAwDjJ,EAAKuC,EAAE,8BAC/D2G,GAA6C,EACxDT,WAEO,oCACG,kBAACrD,GAAD,KACI,kBAAC0D,GAAD,CAA+BC,gBAAc,EAACN,MAAOA,KAGzD,kBAAC,GAAD,CAAO3J,SAAUA,EAAS,kDAAmDW,KAAK,WAAWV,KAAI,uBAAkB0J,EAAlB,KAA4B/E,MAAOuF,GAAuDtF,UAAWC,IAAcC,SAAUC,YAAkBC,IAAQC,IAAUgF,GAA+BP,QCjBvS,SACJU,IACE5F,IACS6F,GAA2B,EACtCX,YAEA,MAAM,MACJY,GACEF,GAAS,cAAD,OAAeV,EAAf,OACN,aACJtD,GACEkE,EAAM9J,MAEV,OAAI4F,EACK,kBAAC+D,GAAD,CAA4CT,MAAOA,IAGrD,kBAACK,GAAD,CAA+BL,MAAOA,K,yBCf/C,MACEnF,MADI,GAEJoB,QAFI,IAGFnB,IACEoF,GAA+B7E,YAAkBC,IAAQC,KAClD0E,GAAsB,EACjCD,YAEA,MAAM,OACJ7D,EADI,SAEJC,GACEH,KAcJ,OAAO,yBAAKrD,UAAWC,KAAOW,UAAWT,YAAW1C,EAAS,iCACnD,yBAAKuC,UAAWC,KAAOgI,YACnB,kBAAC,GAAD,CAAOxK,SAAUA,EAAS,oCAAqCuC,UAAWC,KAAOiI,SAAUxK,KAAI,qBAAgB0J,EAAhB,SAA8B/E,MAAO1D,EAAKuC,EAAE,OAAQoB,UAAWC,IAAcC,SAAU8E,KAEtL,yBAAKtH,UAAWC,KAAOkI,YACnB,kBAACJ,GAAD,CAA0BX,MAAOA,MAIzC,yBAAKpH,UAAWC,KAAOmI,eACnB,kBAAC,GAAD,CAAO3K,SAAUA,EAAS,yCAA0CuC,UAAWC,KAAOoI,SAAUjK,KAAK,WAAWV,KAAI,qBAAgB0J,EAAhB,YAAiC/E,MAAO1D,EAAKuC,EAAE,kBAAmBoB,UAAWkE,MAEjM,kBAAC,GAAD,CAAO/I,SAAUA,EAAS,0CAA2CuC,UAAWC,KAAOoI,SAAUjK,KAAK,WAAWV,KAAI,qBAAgB0J,EAAhB,YAAiC/E,MAAO1D,EAAKuC,EAAE,UAAWoB,UAAWkE,MAE1L,kBAAC,GAAD,CAAO/I,SAAUA,EAAS,+CAAgDuC,UAAWC,KAAOoI,SAAUjK,KAAK,WAAWV,KAAI,qBAAgB0J,EAAhB,kBAAuC/E,MAAO1D,EAAKuC,EAAE,gBAAiBoB,UAAWkE,OAG/M,kBAAC,IAAD,CAAQP,OAAK,EAACnE,WAAS,EAACrE,SAAUA,EAAS,uCAAwCsE,QAAS,IA7BlEqF,KAClC,MAAM,WACJ1D,GACEF,IAAWG,OAGbJ,EAAO,aADK,IAAV6D,EACmB1D,EAAW4E,MAAM,GAEjB,IAAI5E,EAAW4E,MAAM,EAAGlB,MAAW1D,EAAW4E,MAAMlB,EAAQ,MAqBuBmB,CAA4BnB,IACzHzI,EAAKuC,EAAE,4BC9CXsH,GAAe,EAC1BC,kBACAC,mBACI,kBAAC,IAAD,KACE,kBAAC,IAAD,KACK/J,EAAKuC,EAAE,kEAGZ,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQa,QAAS2G,GACZ/J,EAAKuC,EAAE,qBAGZ,kBAAC,IAAD,CAAQ6E,SAAO,EAAChE,QAAS0G,GACpB9J,EAAKuC,EAAE,mB,yBCTrB,MACMyH,GAA6B,UADU,oBACV,QAkB7BC,GAAwB,KAAO,IAAD,EACzC,MAAMC,EAAUC,eACV,GACJC,GACEC,eACGC,EAAkBC,GAAuBlL,oBAAS,IACnD,QACJmL,EACAC,MAAOC,EACPC,KAAMC,GACJC,GAAoBT,IACjBU,GACLL,MAAOM,IACJC,MACEC,GACLR,MAAOS,IACJC,MACEC,GACLX,MAAOY,IACJC,KACCC,EAAYR,GAA2BG,GAA2BG,EAExE,GAAIb,EACF,OAAO,oCACK,kBAACpJ,EAAD,KAAepB,EAAKuC,EAAE,SACtB,kBAAC,IAAD,KACI,kBAAC,IAAD,QAKlB,GAAImI,EAAW,CACb,MAAMc,EAAMxL,EAAKuC,EAAE,gDACnB,OAAO,oCACK,kBAACnB,EAAD,KAAepB,EAAKuC,EAAE,SACtB,kBAAC,IAAD,CAAWkI,OAAK,EAACvI,MAAOsJ,GACnBd,EAAUlL,UAK7B,MAAMmL,EAMNC,GAAwC,kBAArBA,EAASa,QAAuB,CACjDA,QAASC,KAAKC,MAAMf,EAASa,UAC3Bb,EACEgB,EAAW,OAAGjB,QAAH,IAAGA,GAAH,UAAGA,EAAMc,eAAT,aAAG,EAAehM,KA0B7BoM,EAAU,OAAGlB,QAAH,IAAGA,OAAH,EAAGA,EAAMc,QACnBK,EA7FiBF,KACvB,GAAIA,IAAgBG,GAClB,OAAOxD,GAGT,GAAIqD,IAAgBI,GAClB,OAAOpF,GAGT,GAAIgF,IAAgBK,GAClB,OAAOxE,GAGT,MAAM,IAAI5I,MAAJ,gDAAmD+M,EAAnD,OAgFgBM,CAAiBN,GACvC,OAAO,yBAAKpK,YAAW1C,EAAS,+BAAgCuC,UAAWC,KAAOW,WACxE,kBAACb,EAAD,KAAepB,EAAKuC,EAAE,iBAErBsJ,EAAa,yBAAKrK,YAAW1C,EAAS,6CAA8CqN,kBAAiBxB,EAAKc,QAAQW,KAC1Gb,GAAa,kBAAC,IAAD,CAAWd,OAAK,EAACvI,MAAOlC,EAAKuC,EAAE,gDACpCgJ,EAAU/L,SAGnB,kBAACsM,EAAD,CAAehF,cAAe6D,EAAKc,QAAS5E,SAlC7CwF,UACf,MAAMrH,EAAS,IAAKsH,EAClBlC,GAAIO,EAAKc,QAAQW,KAGnB,IACMpH,EAAOvF,OAASsM,UACZjB,EAAmB9F,GAGvBA,EAAOvF,OAASuM,UACZf,EAAmBjG,GAGvBA,EAAOvF,OAASwM,UACZb,EAAsBpG,GAG9BkF,EAAQqC,KAAK3J,IACb,MAAO4J,GACP,OAAOC,QAAQC,OAAOF,KAcwDvJ,cAAekE,GAAYA,EAAW+C,EAAQqC,KAAK3J,IAA4B2H,GAAoB,MAC9J,kBAAC,IAAD,CAAWE,OAAK,EAACvI,MAAOlC,EAAKuC,EAAE,sBACnCvC,EAAKuC,EAAE,8CAGf+H,GAAoB,kBAACT,GAAD,CAAcC,gBAAiB,IAAMI,EAAQqC,KAAK3J,IAA2BmH,cAAe,IAAMQ,GAAoB,O,yBC/GhJ,MAAMoC,GAAgB,EAC3BC,qBACAC,kBACAC,WACAC,kBACAC,cACAC,yBAEA,MAAM/C,EAAUC,cAChB,OAAO,kBAAC,IAAD,CAAOrL,SAAUA,EAAS,2BACvB,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAeA,SAAUA,EAAS,oCAC9B,kBAAC,IAAD,CAAUoO,SAAUF,EAAaG,QAASP,KAE9C,kBAAC,IAAD,KAAgB5M,EAAKuC,EAAE,SACvB,kBAAC,IAAD,KAAgBvC,EAAKuC,EAAE,SACvB,kBAAC,IAAD,MACA,kBAAC,IAAD,QAIR,kBAAC,IAAD,KACKuK,EAAShN,IAAI2L,IAAW,yBAAC,IAAD,CAAU1L,IAAK0L,EAAQW,IAAKtN,SAAUA,EAAS,+BAChE,kBAAC,IAAD,CAAWuC,UAAWC,KAAO8L,aAActO,SAAUA,EAAS,oCAC1D,kBAAC,IAAD,CAAUS,MAAOkM,EAAQW,IAAKc,SAAU,IAAMH,EAAgBtB,EAAQW,KAAMe,QAASN,EAAgBQ,SAAS5B,EAAQW,KAAMtN,SAAUA,EAAS,gCAGnJ,kBAAC,IAAD,CAAWA,SAAUA,EAAS,gCACzB2M,EAAQ1M,MAGb,kBAAC,IAAD,CAAWsC,UAAWC,KAAOgM,SAAUxO,SAAUA,EAAS,gCClCnE,aADmBW,EDoCcgM,EAAQhM,MClC7CO,EAAKuC,EAAE,WAGH,eAAT9C,EACKO,EAAKuC,EAAE,cAGH,SAAT9C,GAAoBA,EAIjBA,EAHEO,EAAKuC,EAAE,YD6BM,kBAAC,IAAD,CAAWlB,UAAWC,KAAOiM,aACvB9B,EAAQ+B,UAEM,0BAAMnM,UAAWC,KAAOmM,eAC/BzN,EAAKuC,EAAE,oBAHM,kBAAC,IAAD,CAAQzD,SAAUA,EAAS,sCAAuCsE,QAAS,IAAM6J,EAAmBxB,EAAQW,KAAM/K,UAAWC,KAAOoM,mBACjJ1N,EAAKuC,EAAE,kBAMpB,kBAAC,IAAD,CAAWzD,SAAUA,EAAS,kCAAmCuC,UAAWC,KAAOqM,UAC/E,kBAAC,IAAD,CAAatM,UAAWC,KAAOsM,YAC3B,kBAAC,IAAD,CAAQ9O,SAAUA,EAAS,+BAAgCsE,QAAS,KACtF8G,EAAQqC,KAAR,UD9CsC,oBC8CtC,YAAwDd,EAAQW,QAEzCpM,EAAKuC,EAAE,YCpDV9C,W,yBCA3B,MAAMoO,GAAc,EACzBhB,kBACAC,WACAgB,qBACAb,qBACAc,iBAEA,MAAMnB,EAAqBC,EAAgBmB,SAAWlB,EAASkB,OAuB/D,OAAO,yBAAK3M,UAAWC,KAAOW,UAAWT,YAAW1C,EAAS,yBAClDiP,GAAc,yBAAK1M,UAAWC,KAAO2M,mBAC9B,yBAAK5M,UAAWC,KAAO4M,kBACnB,kBAAC,IAAD,QAIZ,kBAACvB,GAAD,CAAeC,mBAAoBA,EAAoBE,SAAUA,EAAUD,gBAAiBA,EAAiBE,gBA5BjG3C,IACpB,GAAIyC,EAAgBQ,SAASjD,GAAK,CAChC,MAAM3B,EAAQoE,EAAgBsB,UAAUC,GAASA,IAAUhE,GACrDiE,EAA+B,IAAV5F,EAAcoE,EAAgBlD,MAAM,GAAK,IAAIkD,EAAgBlD,MAAM,EAAGlB,MAAWoE,EAAgBlD,MAAMlB,EAAQ,IAC1IqF,EAAmBO,QAEnBP,EAAmB,IAAIjB,EAAiBzC,KAsB2G6C,mBAAoBA,EAAoBD,YAlB7K,KAChB,GAAKJ,EAMHkB,EAAmB,QANI,CACvB,MAAMQ,EAAgBxB,EAAShN,IAAI,EACjCsM,SACIA,GACN0B,EAAmBQ,SC9BZvC,GAAe,OACfC,GAAgB,UAChBC,GAAkB,a,aCDxB,MAAMsC,GAAmC,CAC9CC,SAAU,WACV/O,KAAM,SACNkL,KAAM,EACJ5L,OACA0P,WACAC,eAHI,CAKJjP,KAAM,UACNV,OACA0P,WACAC,cCXSC,GAAqC,CAChDH,SAAU,WACV/O,KAAM,SACNkL,KAAM,EACJ5L,OACA0P,WACAG,YACAC,kBAJI,CAMJpP,KAAM,aACNV,OACA0P,WACAG,YACAC,iBCUSC,GAAwC,EACnDC,wBACAC,cACAjQ,OACAgG,aACAkK,oBACAJ,cACAK,aAPmD,CASnDzP,KAAM,OACNsP,wBACAC,cACAjQ,OACAgG,aACAkK,oBACAJ,cACAK,WCtCWC,GAAkC,CAC7CX,SAAU,WACV/O,KAAM,SACNkL,KAAMmE,ICHKM,GAA0B,CACrCZ,SAAU,WACV/O,KAAM,SACN2K,GAAI,EACFA,QACIA,GAYKiF,GAA4B,KACvC,MAAO7E,EAAS8E,GAAcjQ,oBAAS,IAChCoL,EAAO8E,GAAYlQ,mBAAS,MAE7BmQ,EAb2BC,IAAUrF,IAC3C,MAAMsF,EAAY,CAChBtF,MAEF,OAAOqF,EAAOE,OAAOP,GAAyB,CAC5CM,eAQ0BE,CADbC,gBAKTC,EAASC,IACbT,GAAW,GACJS,GAGHC,EAAUvF,IACd8E,EAAS9E,GACT6E,GAAW,IAUb,MAAO,CAPQ,EACbW,UAboBX,GAAW,GAgBxB7C,QAAQyD,IAAID,EAAInQ,IAAI0P,IAAsBW,KAAKL,GAAQM,MAAMJ,IAGtD,CACdxF,UACAC,WCnCS4F,GAAgB,CAC3B5E,QAAS,CACP+C,SAAU,WACVpE,GAAI,EACFA,QACIA,IAGGS,GAAsBT,GAAMkG,aAAaD,GAAe,CACnEX,UAAW,CACTtF,QCVSmG,GAAiB,CAC5BzD,SAAU,CACR0B,SAAU,gBACVgC,OAAQ,EACNC,SACAC,aAEA,MAAMF,EAAS,GAUf,OARIC,IACFD,EAAOC,OAASA,GAGdC,IACFF,EAAOE,OAASA,GAGXF,KC3BAG,GAA+B,CAC1CnC,SAAU,mBACV/O,KAAM,UACN2K,GAAI,EACFA,QACIA,GCMKwG,GAA2BC,IACtC,MAAOrG,EAAS8E,GAAcjQ,oBAAS,IAChCoL,EAAO8E,GAAYlQ,mBAAS,MAC7BoQ,EAASI,eAoBf,MAAO,CAlBSH,IACd,MAAMoB,EAAe,IAAKD,EACxBzG,GAAIsF,EAAUtF,IAIhB,OAFAkF,GAAW,GACXC,EAAS,MACFE,EAAOE,OAAOmB,EAAc,CACjCpB,cACCS,KAAKxF,IACN2E,GAAW,GACJ3E,IACNyF,MAAM3F,IAGP,MAFA6E,GAAW,GACXC,EAAS9E,GACHA,KAIO,CACfD,UACAC,WCpCSsG,GAAmC,CAC9CvC,SAAU,WACVpE,GAAI,EACFA,QACIA,EACN3K,KAAM,SACNkL,KAAM,EACJ5L,OACA0P,WACAC,eAHI,CAKJjP,KAAM,UACNV,OACA0P,WACAC,cAGSvD,GAAkC,IAAMyF,GAAyBG,ICjBjEC,GAAqC,CAChDxC,SAAU,WACVpE,GAAI,EACFA,QACIA,EACN3K,KAAM,SACNkL,KAAM,EACJ5L,OACA0P,WACAG,YACAC,kBAJI,CAMJpP,KAAM,aACNV,OACA0P,WACAG,YACAC,iBAGSvD,GAAqC,IAAMsF,GAAyBI,IClBpEC,GAAkC,CAC7CzC,SAAU,WACVpE,GAAI,EACFA,QACIA,EACN3K,KAAM,UACNkL,KAAMmE,IAEK9D,GAAkC,IAAM4F,GAAyBK,I,yBCCvE,MACMC,GAAuB,KAClC,MAAMhH,EAAUC,eACTgH,EAAaC,GAAkB/R,mBAAS0M,KACxCjB,GACLL,MAAOM,ITT0CsG,aAAgBlC,KSW5DlE,GACLR,MAAOS,IZJ0CmG,aAAgB9C,KYM5DnD,GACLX,MAAOY,IXL6CgG,aAAgB1C,IWOhElE,EAAQM,GAA2BG,GAA2BG,EAEpE,GAAIZ,EAAO,CACT,MAAMe,EAAMxL,EAAKuC,EAAE,kDACnB,OAAO,yBAAKf,YAAW1C,EAAS,+BACpB,kBAACsC,EAAD,KAAepB,EAAKuC,EAAE,gBACtB,kBAAC,IAAD,CAAWkI,OAAK,EAACvI,MAAOsJ,GACnBf,EAAMjL,UAKzB,MAAMqH,EAAWwF,UACf,IACM8E,IAAgBpF,UACZjB,EAAmB9F,GAGvBmM,IAAgBnF,UACZf,EAAmBjG,GAGvBmM,IAAgBlF,UACZb,EAAsBpG,GAG9BkF,EAAQqC,KAAK3J,IACb,MAAO4J,GACP,OAAOC,QAAQC,OAAOF,KAIpBvJ,EAAgB,IAAMiH,EAAQqC,KAAK3J,IAEzC,OAAO,yBAAKpB,YAAW1C,EAAS,8BAA+BuC,UAAWC,KAAOW,WACvE,kBAACb,EAAD,KAAepB,EAAKuC,EAAE,gBAEtB,kBAAC6C,GAAD,KACI,kBAAC,IAAD,CAAmB1B,MAAO1D,EAAKuC,EAAE,QAAS2K,SAAU,EAC5DoE,cACIF,EAAeE,GAAWA,SAAUH,EAAarS,SAAUA,EAAS,2CAC5D,kBAAC,IAAD,CAAoBS,MAAOwM,GAAcrI,MAAO1D,EAAKuC,EAAE,aAEvD,kBAAC,IAAD,CAAoBhD,MAAOyM,GAAetI,MAAO1D,EAAKuC,EAAE,aAExD,kBAAC,IAAD,CAAoBhD,MAAO0M,GAAiBvI,MAAO1D,EAAKuC,EAAE,kBAIlE,kBAAC6C,GAAD,KACK+L,IAAgBpF,IAAgB,kBAACxD,GAAD,CAAoB1B,SAAUA,EAAU5D,cAAeA,IAEvFkO,IAAgBnF,IAAiB,kBAACpF,GAAD,CAAoBC,SAAUA,EAAU0K,kBAAkB,EAAMtO,cAAeA,IAEhHkO,IAAgBlF,IAAmB,kBAACxE,GAAD,CAAuBZ,SAAUA,EAAU0K,kBAAkB,EAAMtO,cAAeA,O,yBCzE/H,MAAMuO,GAAc,EACzBC,WACAC,cACA5S,SAAU6S,EACVC,aACA1O,gBACA2O,aACAC,mBAEO,yBAAKzQ,UAAWC,KAAOW,WACpB,kBAAC,IAAD,CAAaT,YAAW1C,EAAS,GAAD,OAAI6S,EAAJ,cAC5B,kBAAC,IAAD,CAAQvK,SAAO,EAAChE,QAASwO,EAAYrK,SAAUsK,EAAY/S,SAAUA,EAAS,GAAD,OAAI6S,EAAJ,UACxEF,GAGL,kBAAC,IAAD,CAAQpO,aAAW,EAACD,QAASF,EAAeqE,SAAUuK,EAAehT,SAAUA,EAAS,GAAD,OAAI6S,EAAJ,aAClFD,K,yBCjBd,MAAMK,GAAY,EACvB7S,cACI,uBAAGmC,UAAWC,KAAO0Q,UAAWxQ,YAAW1C,EAAS,mBACjDI,G,yBCIF,MAAM0D,GAA2B,eAE3BqP,GAAoB,KAAO,IAAD,IACrC,MAAM/H,EAAUC,eAIT0C,EAAiBiB,GAAsBzO,mBAAS,KAChD6S,EAAkBC,GAAuB9S,oBAAS,IAEvDmL,QAAS4H,EACT3H,MAAO4H,EAFH,KAGJ1H,EACA2H,QAASC,GTauBtC,KAAQ,IAAD,EAQ7B,wBAAaA,QAAb,IAAaA,OAAb,EAAaA,EAAKuC,KAAK,KAAvB,KAAZ,MACM9C,EAEF,IAGF/E,KAAMC,KACH6H,GACDnC,aAAaC,GAAgB,CAC/Bb,cAEIgD,EAMN9H,GAAyC,kBAAtBA,EAASkC,SAAwB,CAClDA,SAAUpB,KAAKC,MAAMf,EAASkC,WAC5BlC,EAQJ,MAAO,CACLD,KARWsF,IAAG,OAAIyC,QAAJ,IAAIA,GAAJ,UAAIA,EAAY5F,gBAAhB,aAAI,EAAsBA,UAAW,CACnDA,SAAU,CACRA,SAAU4F,EAAW5F,SAASA,SAAS4D,OAAO,EAC5CtE,SACI6D,EAAI5C,SAASjB,MAEnBsG,KAGCD,ISjDDE,IACGC,GACLpI,QAASqI,EACTpI,MAAOqI,IACJzD,MACE0D,GACLvI,QAASwI,EACTvI,MAAOwI,IRxBuC5B,aAAgBV,IQ0C1DnG,EAAU4H,GAAuBS,GAAiBG,EAExD,GAAIxI,EACF,OAAO,oCACK,kBAACpJ,EAAD,KA1CyB,yBA2CzB,kBAAC,IAAD,KACI,kBAAC,IAAD,QAKlB,MAAMqJ,EAAQ4H,GAAqBS,GAAeG,EAElD,GAAIxI,EAAO,CACT,MAAMe,EAAMxL,EAAKuC,EAAE,kEACnB,OAAO,oCACK,kBAACnB,EAAD,KAtDyB,yBAuDzB,kBAAC,IAAD,CAAWqJ,OAAK,EAACvI,MAAOsJ,GACnBf,EAAMjL,UAKzB,MAAM0T,KAAe,OAACvI,QAAD,IAACA,GAAD,UAACA,EAAMmC,gBAAP,iBAAC,EAAgBA,gBAAjB,aAAC,EAA0BkB,QAChD,OAAO,yBAAK3M,UAAWC,KAAOW,UAAWT,YAAW1C,EAAS,4BACnD,kBAACsC,EAAD,KA/D6B,yBAiE7B,kBAAC2Q,GAAD,KACK/R,EAAKuC,EAAE,uUAGZ,kBAACiP,GAAD,CAAaC,SAAUzR,EAAKuC,EAAE,eAAgBmP,YAAa1R,EAAKuC,EAAE,mBAAoBzD,SAAS,0BAA0B8S,WAjEzG,IAAM1H,EAAQqC,KHLE,oBGsEwHrJ,cAAe,IAAMiP,GAAoB,GAAON,WAAYgB,EAAef,eAAgBjF,EAAgBmB,QAAU6E,IAE5QK,EAAc,kBAACrF,GAAD,CAAaE,WAAYvD,EAASqC,gBAAiBA,EAAiBiB,mBAAoBA,EAAoBhB,SAAUnC,EAAKmC,SAASA,SAAUG,mBAxC5I7C,IAIzB2I,EAHkB,CAChB3I,OAE4B+F,KAAKoC,MAoC+K,kBAAC,IAAD,CAAWY,MAAI,EAACjR,MAAOlC,EAAKuC,EAAE,sBAC/NvC,EAAKuC,EAAE,oFAGf2P,GAAoB,kBAAClP,EAAD,CAAkCC,cAAe,IAAMkP,GAAoB,GAAQjP,cApD5F,KAIpB0P,EAHkB,CAChB3C,IAAKpD,IAE0BsD,KAAKoC,GACtCJ,GAAoB,Q,aCvCjB,MAAMiB,GAA0BpT,IAAKuC,EAAE,YACjCQ,GAAyB,YAGzBsQ,GAAwB,CAAC,CACpC9T,MAHwB,MAIxBmE,MAAO1D,IAAKuC,EAAE,QACb,CACDhD,MAAO,SACPmE,MAAO1D,IAAKuC,EAAE,WACb,CACDhD,MAAO,WACPmE,MAAO1D,IAAKuC,EAAE,aACb,CACDhD,MAAO,YACPmE,MAAO1D,IAAKuC,EAAE,cACb,CACDhD,MAAO,aACPmE,MAAO1D,IAAKuC,EAAE,eACb,CACDhD,MAAO,OACPmE,MAAO1D,IAAKuC,EAAE,SACb,CACDhD,MAAO,YACPmE,MAAO1D,IAAKuC,EAAE,eCnBV+Q,GAAW,CACf9E,SAAU,cACV/O,KAAM,SACN+Q,OAAQ,EACNP,UADM,CAGNA,SAIEsD,GAAuB,EAC3BC,cACAC,iBAEA,MAAM,SACJ7U,GACE8U,qBAAWhV,IACRiR,GAAU0B,aAAgBiC,GAAU,CACzCG,aACAzD,QAASvF,IACP7L,EAAS,CACPa,KAAM,WACND,QAASiL,EAAMjL,aAIrB,OAAO,kBAAC,IAAD,CAAQ6D,aAAW,EAACD,QAAS,IAAMuM,EAAO,CAC/CM,IAAKuD,EAAYhB,SACfjL,SAAiC,IAAvBiM,EAAYxF,QACfhO,IAAKuC,EAAE,qBCjCPoR,GAAiB,KAC5B,MAAMC,EAAe,IAAIC,gBAAgBC,cAAcC,QACvD,MAAO,CACLC,OAAQJ,EAAaK,IAAI,WFFH,MEGtBC,YAAaN,EAAaK,IAAI,gBAAkB,GAChDE,KAAM3N,SAASoN,EAAaK,IAAI,SAAW,GAC3CG,SAAU5N,SAASoN,EAAaK,IAAI,aAAe,MCP1CI,GAAqBxD,IAChC,MAAMyD,EAAcC,OAAOC,KAAK3D,GAAO5K,OAAO,CAACwO,EAAKC,KAClD,MAAMC,EAAa9D,EAAM6D,GAOzB,OAJIC,KAFiC,WAAbD,GHDF,QGC2BC,IAG/CF,EAAIlI,KAAJ,UAAYmI,EAAZ,YAAwBC,IAGnBF,GACN,IAAIjC,KAAK,KACZ,MAAM,IAAN,OAAW8B,I,yBCFb,MACE3N,KADI,GAEJrD,MAFI,IAGFC,IAEEqR,GAAS,EACbpK,cAEA,MAAM,OACJwJ,EADI,YAEJE,EAFI,SAGJE,GACET,KACE7M,EAAgB,CACpBkN,SACAE,eAEIhK,EAAUC,cAgBhB,OAAO,yBAAK3I,YAAW1C,EAAS,4BAA6BuC,UAAWC,KAAOW,WACrE,kBAAC,GAAD,CAAM4E,SAfc,EAC5BmN,SACAE,kBAEAhK,EAAQqC,KAAK,CACXwH,OAAQM,GAAmB,CACzBL,SACAE,cACAE,WACAD,KAAM,OAMqCrN,cAAeA,GACjD,EACTG,eACAE,cACI,0BAAMN,SAAUI,EAAc5F,UAAWC,KAAOuT,YACpC,kBAAC,GAAD,CAAO9V,KAAK,SAAS4E,UAAW0E,IAAqBF,QAASkL,GAAuB3P,MAAO1D,IAAKuC,EAAE,oBAAqBuS,WAAW,UACnI,kBAAC,GAAD,CAAO/V,KAAK,cAAc4E,UAAWC,IAAcF,MAAO1D,IAAKuC,EAAE,0BAA2BlB,UAAWC,KAAOyT,iBAAkBD,WAAW,UAC3I,kBAAC,IAAD,CAAQE,OAAK,EAACvV,KAAK,SAAS8H,SAAUiD,GAAWrD,GAC5CnH,IAAKuC,EAAE,e,6CChD7B,MAAM3C,GAAO,EAClBqV,WAEA,MACMC,EADaC,KAAOF,GACGG,OAAO,eACpC,OAAO,0BAAM/T,UAAWC,KAAO2T,MAAOC,I,yBCLjC,MAAMG,GAAO,EAClBC,WAEA,MACMJ,EADaC,KAAOG,GACGF,OAAO,YACpC,OAAO,0BAAM/T,UAAWC,KAAOgU,MAAOJ,I,yBCDxC,MAAMK,GAAe,CAAC,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,OAExDC,GAAa,EACjBrB,OACAsB,YACArB,WACAsB,YAEA,MAAMC,EAAYC,KAAKC,KAAK1B,EAAO,GAAKC,EAAW,EAAGsB,GAChDI,EAAWF,KAAKC,IAAIF,EAAYvB,EAAW,EAAGsB,GAC9CK,EAAiBC,MAAMC,KAAK,CAChCjI,OAAQyH,GACP,CAACS,EAAIC,KAAOA,EAAI,GAAGC,aAChB,OACJpC,EADI,YAEJE,GACEP,KACEzJ,EAAUC,cAEVkM,EAAiBC,IACrBpM,EAAQqC,KAAK,CACXwH,OAAQM,GAAmB,CACzBL,SACAE,cACAE,WACAD,KAAMmC,OAkBZ,OAAO,yBAAKjV,UAAWC,KAAOW,WACpB,yBAAKZ,UAAWC,KAAOiV,eAClBvW,IAAKuC,EAAE,QACR,kBAAC,IAAD,CAAciU,OAAK,EAAClF,SAAU8C,EAASgC,WAAYlJ,SAhBnC,EAC5BoE,eAEApH,EAAQqC,KAAK,CACXwH,OAAQM,GAAmB,CACzBL,SACAE,cACAE,SAAU9C,EACV6C,KAAM,OAQsF9S,UAAWC,KAAOmV,QACjGlB,GAAazV,IAAIkO,GAAU,kBAAC,IAAD,CAAoBjO,IAAKiO,EAAQzO,MAAOyO,EAAQtK,MAAOsK,MAEtFhO,IAAKuC,EAAE,aAGZ,yBAAKlB,UAAWC,KAAOiV,eACnB,0BAAMlV,UAAWC,KAAOoV,SACnB1W,IAAKuC,EAAE,kDAAmD,CACrEoT,YACAG,WACAJ,WAGM,kBAAC,IAAD,CAAQrU,UAAWC,KAAOqV,eAAgBrP,OAAK,EAACC,SAAmB,IAAT4M,EAAY/Q,QAAS,IAAMiT,EAAelC,EAAO,IACtGnU,IAAKuC,EAAE,aAEZ,8BAAOvC,IAAKuC,EAAE,SACd,kBAAC,IAAD,CAAciU,OAAK,EAAC1B,WAAW,QAAQxD,SAAU6C,EAAKiC,WAAYlJ,SAAU,EACpFoE,cACI+E,EAAe/E,GAAWjQ,UAAWC,KAAOmV,QACnCV,EAAejW,IAAI8W,GAAiB,kBAAC,IAAD,CAAoB7W,IAAK6W,EAAerX,MAAOqX,EAAelT,MAAOkT,MAE9G,8BAAO5W,IAAKuC,EAAE,mBAAoB,CACxCkT,eAEM,kBAAC,IAAD,CAAQpU,UAAWC,KAAOuV,WAAYvP,OAAK,EAACC,SAAU4M,IAASsB,EAAWrS,QAAS,IAAMiT,EAAelC,EAAO,IAC1GnU,IAAKuC,EAAE,Y,yBCzE5B,MAAMuU,GAAW,EACfC,WACAC,QACAxD,cACAyD,qBAEA,MAAMC,EAAgB,IAAIC,IAAI3D,GACxB4D,EAAcL,EAAS/I,OAAS,GAAKwF,EAAYxF,SAAW+I,EAAS/I,OAErEqJ,EAASjN,IACT8M,EAAcI,IAAIlN,GACpB8M,EAAcK,OAAOnN,GAErB8M,EAAcM,IAAIpN,GAGpB6M,EAAejB,MAAMC,KAAKiB,KAa5B,OAAO,kBAAC,IAAD,KACG,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAU/J,QAASiK,EAAalK,SAdpC,KAEd+J,EADEG,EACa,GAEAL,EAASjX,IAAI,EAC1BsK,QACIA,QAUQ,kBAAC,IAAD,KAAgBpK,IAAKuC,EAAE,YACvB,kBAAC,IAAD,KAAgBvC,IAAKuC,EAAE,iBACvB,kBAAC,IAAD,KAAgBvC,IAAKuC,EAAE,WACvB,kBAAC,IAAD,KAAgBvC,IAAKuC,EAAE,WACvB,kBAAC,IAAD,KAAgBvC,IAAKuC,EAAE,eAG/B,kBAAC,IAAD,KACyB,IAApBwU,EAAS/I,OAAe,kBAAC,IAAD,KACjB,kBAAC,IAAD,CAAWyJ,QAAQ,IAAIpW,UAAWC,KAAOoW,WACpC1X,IAAKuC,EAAE,yBAEFwU,EAASjX,IAAIN,IAAO,eAAI,kBAAC,IAAD,CAAUO,IAAKP,EAAQ4K,IACrD,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAU+C,QAAS+J,EAAcI,IAAI9X,EAAQ4K,IAAK8C,SAAUmK,EAAOM,KAAK,KAAMnY,EAAQ4K,OAE1F,kBAAC,IAAD,KAAY5K,EAAQoY,MACpB,kBAAC,IAAD,KACI,0BAAMvW,UAAWC,KAAOuW,YACnBrY,EAAQqY,aAGjB,kBAAC,IAAD,KAAYrY,EAAQsY,WACpB,kBAAC,IAAD,MACK,UAAAtY,EAAQuY,YAAR,mBAAcC,uBAAd,eAA+BvJ,WAAYzO,IAAKuC,EAAE,YAEvD,kBAAC,IAAD,KACI,kBAAC,GAAD,CAAM0S,KAAMzV,EAAQyY,eACnB,KACD,6BACA,kBAAC5C,GAAD,CAAMC,KAAM9V,EAAQyY,oBAIxC,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAWR,QAAQ,KACf,kBAACjC,GAAewB,Q,yBCpExC,MAAMnG,GAAQ,CACZqH,WAAY,CACV1J,SAAU,cACVgC,OAAQ,EACN2D,OACAC,WACAF,cACAF,aAEA,MAAMxD,EAAS,CACb2D,OACAC,WACA3D,OAAQ,CAAC,KAAM,OAAQ,aAAc,YAAa,kCAClD,gBACA0H,MAAO,qBAEHC,EAAU,GAEZlE,GACFkE,EAAQ7L,KAAR,2BAAiC2H,IAG/BF,GT/BgB,QS+BNA,GACZoE,EAAQ7L,KAAR,uBAA6ByH,IAG/B,MAAMqE,EAAeD,EAAQ5F,KAAK,KAMlC,OAJI6F,IACF7H,EAAOE,OAAS2H,GAGX7H,KAKP8H,GAAkB,KAAO,IAAD,EAC5B,MAAO9E,EAAayD,GAAkB5X,mBAAS,KACzC,KACJ8U,EADI,SAEJC,EAFI,YAGJF,EAHI,OAIJF,GACEL,MACE,OACJ4E,EADI,QAEJ/N,EAFI,MAGJC,EAHI,KAIJE,EAJI,QAKJ2H,GACEhC,aAAaO,GAAO,CACtB2H,MAAM,IAiBR,GATAC,oBAAU,KACRnG,EAAQ,CACN6B,OACAC,WACAF,cACAF,YAED,CAACG,EAAMC,EAAUF,EAAaF,IAE7BxJ,IAAY+N,EACd,OAAO,oCACK,kBAACnX,EAAD,KAAegS,IACf,kBAAC,IAAD,KACI,kBAAC,IAAD,QAKlB,GAAI3I,EAAO,CACT,MAAMe,EAAMxL,EAAKuC,EAAE,sDACnB,OAAO,oCACK,kBAACnB,EAAD,KAAegS,IACf,kBAAC,IAAD,CAAW3I,OAAK,EAACvI,MAAOsJ,GACnBf,EAAMjL,UAKzB,MAAMuX,GAAe,OAAJpM,QAAI,IAAJA,GAAA,UAAAA,EAAMuN,kBAAN,eAAkBQ,cAAe,GAClD,OAAO,yBAAKlX,YAAW1C,EAAS,yBAA0BuC,UAAWC,KAAOW,WAClE,kBAACb,EAAD,KAAegS,IAEf,yBAAK/R,UAAWC,KAAOqX,QACnB,kBAAC/D,GAAD,CAAQpK,QAASA,IACjB,kBAAC+I,GAAD,CAAsBE,WAvCZ,KACtBnB,IACA2E,EAAe,KAqCgDzD,YAAaA,KAGpE,6BACK,kBAACsD,GAAD,CAAUC,SAAUA,EAAUC,MAAOrM,EAAKuN,WAAWlB,MAAOxD,YAAaA,EAAayD,eAAgBA,OC9G1G2B,GAAyC,qBACzCC,GAAqC,iBACrCC,GAAwB,KACxBC,GAAoD,4BACpDC,GAA0B,OAC1BC,GAAqC,gBACrCC,GAA4B,aAC5BC,GAA4B,UAC5BC,GAAkC,eAClCC,GAA+B,YAC/BC,GAA+B,WAC/BC,GAAmC,oBACnCC,GAAqC,iBACrCC,GAAsD,gCACtDC,GAA0C,qBAC1CC,GAAqC,mBCRhDjV,QADI,IAEFnB,IACSqW,GAA+B,KAC1C,MAAM,OACJhV,EADI,SAEJC,GACEH,KAWJ,OAAO,kBAACU,GAAD,KACG,kBAAC,IAAD,CAAQhC,QAVqB,KACrC,MACMyW,EAAkB,IADHhV,IAAWG,OAAOuU,IACG,CACxCxa,KAAM,GACNQ,MAAO,KAETqF,EAAO2U,GAAkCM,IAIgB/a,SAAUA,EAAS,uCAC/DkB,EAAKuC,EAAE,4BCzBXuX,GAAgB,CAC3Bva,MAAO,gBACPmE,MAAO1D,EAAKuC,EAAE,4BAEHwX,GAAyB,CACpCxa,MAAO,yBACPmE,MAAO1D,EAAKuC,EAAE,oCAEHyX,GAAuB,CAClCza,MAAO,uBACPmE,MAAO1D,EAAKuC,EAAE,6BCPV,aACJ0X,IACE1W,IACE2W,GAAe,CACnBhT,YAAY,EACZC,UAAU,GAECgT,GAAoB,EAC/BC,cAEA,MAAM,WACJlT,EADI,SAEJC,GACE8S,GAAa,CACfC,kBAEI3S,EAAWJ,GAAYD,EAC7B,OAAO,kBAAC,IAAD,CAAQE,SAAO,EAAC3H,KAAK,SAAS8H,UAAW6S,GAAW7S,EAAUF,KAAMH,EAAa,kBAAC,IAAD,CAAgBI,OAAK,IAAM,MACxGtH,EAAKuC,EAAE,kBAGpB4X,GAAkB3S,aAAe,CAC/B4S,SAAS,GCtBX,MACEH,aADI,IAEF1W,IACE2W,GAAe,CACnBG,aAAa,EACbC,iBAAiB,GAENC,GAAe,KAC1B,MAAM,YACJF,EADI,gBAEJC,GACEL,GAAa,CACfC,aADe,KAGjB,OAAKI,EACE,kBAAClV,GAAD,KACG,kBAAC,IAAD,CAAWqF,OAAK,EAACvI,MAAOlC,EAAKuC,EAAE,oDAC1B8X,IAHc,M,yBCXxB,MAAMG,GAAqB,EAChCC,eACAC,cACI,yBAAKrZ,UAAWC,KAAOW,WACrB,kBAACsY,GAAD,MAEA,kBAAC,IAAD,KACI,kBAACJ,GAAD,CAAmBC,QAASK,IAC5B,kBAAC,IAAD,CAAQrX,QAASsX,GAAW1a,EAAKuC,EAAE,aCVlCoY,GAAmC,EAC9C1X,gBACAC,mBAEO,kBAAC,IAAD,CAAOpE,SAAUA,EAAS,sCACvB,kBAAC,IAAD,KAAakB,EAAKuC,EAAE,qBACpB,kBAAC,IAAD,KACKvC,EAAKuC,EAAE,2DAEZ,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQY,WAAS,EAACC,QAASH,EAAenE,SAAUA,EAAS,6CACxDkB,EAAKuC,EAAE,WAGZ,kBAAC,IAAD,CAAQ6E,SAAO,EAAChE,QAASF,EAAepE,SAAUA,EAAS,8CACtDkB,EAAKuC,EAAE,cCfnBqY,GAAe,CAACC,EAAYC,IAAWD,IAAeC,EAAOvb,MCJ7Dwb,GAA8B,CACzCvM,SAAU,cACV/O,KAAM,SAYNkL,KAAM,EACJkQ,aACA9b,OACAic,UACAC,YACAC,UACAC,mBAEA,GAAIN,IAAeO,GAAiB7b,OAASsb,IAAeQ,GAAY9b,MACtE,MAAO,CACLsb,aACA9b,OACAic,WAIJ,GAAIH,IAAeS,GAAa/b,OAASsb,IAAeU,GAAoBhc,MAC1E,MAAO,CACLsb,aACA9b,OACAkc,UAAW,CACT7Q,GAAI6Q,IAKV,GAAIJ,IAAeW,GAAmCjc,MACpD,MAAO,CACLsb,aACA9b,OACAmc,WAIJ,GAAIL,IAAeY,GAA+Blc,OAASsb,IAAea,GAA0Bnc,MAClG,MAAO,CACLsb,aACA9b,OACAmc,UACAC,gBAIJ,MAAM,IAAItc,MAAJ,mDAAsDgc,EAAtD,QCzDGc,GAA8B,CACzCnN,SAAU,cACV/O,KAAM,SACN2K,GAAI,EACFA,QACIA,GAYKwR,GAA8B,KACzC,MAAOpR,EAAS8E,GAAcjQ,oBAAS,IAChCoL,EAAO8E,GAAYlQ,mBAAS,MAE7BmQ,EAb2BC,IAAUrF,IAC3C,MAAMsF,EAAY,CAChBtF,MAEF,OAAOqF,EAAOE,OAAOgM,GAA6B,CAChDjM,eAQ0BE,CADbC,gBAKTC,EAASC,IACbT,GAAW,GACJS,GAGHC,EAAUvF,IACd8E,EAAS9E,GACT6E,GAAW,IAUb,MAAO,CAPQ,EACbW,UAboBX,GAAW,GAgBxB7C,QAAQyD,IAAID,EAAInQ,IAAI0P,IAAsBW,KAAKL,GAAQM,MAAMJ,IAGtD,CACdxF,UACAC,WC7CSoR,GAAqC,CAChDC,WAAY,CACVtN,SAAU,cACVpE,GAAI,EACFA,QACIA,EACNoG,OAAQ,CACNC,OAAQ,aACRsL,OAAQ,WCRDC,GAAqB,CAChCC,YAAa,CACXzN,SAAU,cACVwI,OAAO,EACPxG,OAAQ,EACNP,OACE,MAFI,CAIN8L,OAAQ,QACRtL,OAAQ,IACRC,OAAQT,EAAG,kBAAcA,EAAIuC,KAAK,KAAvB,UAAiC9L,OCN5C,WACJwV,IACEC,IAEEC,GAAW/S,GAASA,EAEbgT,GAA+B,CAC1C7N,SAAU,cACV/O,KAAM,SACN2K,GAAI,EACFkS,eACIA,EAIN3R,KAAM,EACJ2R,eACG9L,KACCA,GAEK+L,GAA8B,IAAKF,GAC9CG,SAAS,GAEEC,GAAmB,EAC9BC,gBACAJ,YACAK,gBAAgBP,GAChB9V,WAAU,MAEV,MAAM,SACJ1H,GACE8U,qBAAWhV,GACT+Q,EAASI,eACf,OAAOH,IACL,MAAMkN,EAAe,CACnBlN,UAAW,IAAKiN,EAAcjN,GAC5B4M,cAGEhJ,EAAWhN,EAAUiW,GAA8BF,GACzD,OAAO5M,EAAOE,OAAO2D,EAAUsJ,GAAczM,KAAKuM,GAAetM,MAAM3F,IAGrE,GAFyC,WAAfA,EAAMhL,KAET,CACrB,MAAMod,EAAW,gCACXrd,EAAUiL,EAAMjL,SAAWQ,EAAKuC,EAAEsa,GACxC,MAAO,CACL,CAACX,IAAa1c,GAKlBZ,EAAS,CACPa,KAAM,WACND,QAASiL,EAAMjL,eCrDrB8D,MADI,IAEFC,IAOSuZ,GAAe,EAC1BC,WACAvS,UACA/G,WACA8D,WACAyV,eACI,kBAAC,GAAD,CAAOzV,SAAUA,EAAUkD,QAASuS,EAAWC,eAAgBD,EAAWvZ,SAAUA,EAAU+G,QAASA,EAAS1L,SAAUA,EAAS,sBAAuBC,KAP7H,UAOwJ2E,MAAO1D,EAAKuC,EAAE,WAAYoB,UAAW0E,IAAqBF,QAAS4U,EAAUlZ,SAAUG,IAAUoR,OAAQ7V,IAAc,OAALA,QAAK,IAALA,OAAA,EAAAA,EAAO6K,KAAM,KAAMuB,MAAOvB,IAAE,CACvUA,SAEF0S,GAAatV,aAAe,CAC1BD,UAAU,EACViD,SAAS,EACT/G,UAAU,EACVuZ,UAAW,IC1BN,MAAME,GAAkB,CAC7BH,SAAU,CACRvO,SAAU,WACVgC,OAAQ,CACNC,OAAQ,CAAC,KAAM,eACfsL,OAAQ,WCDDoB,GAA2B,EACtC1Z,eAEA,MAAM,QACJ+G,EADI,MAEJC,EAFI,KAGJE,GDDsC2F,aAAa4M,ICG/CrZ,EAAWJ,EAAWO,SAAW0C,EAEvC,GAAI8D,EACF,OAAO,kBAACsS,GAAD,CAActS,SAAO,EAAC4S,mBAAiB,EAAC3Z,SAAUA,EAAUsZ,SAAU,GAAIlZ,SAAUA,IAG7F,GAAI4G,EACF,OAAO,kBAACqS,GAAD,CAAcrZ,SAAUA,EAAU8D,UAAQ,EAAC8V,SAAU,GAAIL,UAAWvS,EAAMjL,QAASqE,SAAUA,IAGtG,MAAM,SACJkZ,GACEpS,EAAKoS,SACH5U,EAAU4U,EAASjd,IAAI,EAC3BsK,KACAkT,kBAF2B,CAI3B5Z,MAAO4Z,EACP/d,MAAO6K,KAET,OAAO,kBAAC0S,GAAD,CAAcrZ,SAAUA,EAAUsZ,SAAU5U,EAAStE,SAAUA,KAExEsZ,GAAyB3V,aAAe,CACtC/D,UAAU,GCnCL,MCCM8Z,GAAsB,CACjCC,QAAS,CACPhP,SAAU,WACVpE,GAAI,EACFA,QACIA,EACNoG,OAAQ,EACNE,aADM,CAGNA,SACAD,OAAQ,wDAkBDgN,GAAoC,CAACC,EAAWhN,KAC3D,MAAOlG,EAAS8E,GAAcjQ,oBAAS,IAChCoL,EAAO8E,GAAYlQ,mBAAS,OAC5BsL,EAAMgT,GAAWte,mBAAS,MAC3BoQ,EAASI,eAETyC,EAAU5C,IACdJ,GAAW,GACXC,EAAS,MAtB6B,EAACE,EAAQC,IAAcD,EAAOoB,MAAM0M,GAAqB,CACjG7N,cACCS,KAAKxF,IACN,MAAM,QACJ6S,GACE7S,GACE,gBACJiT,GACEJ,EAIJ,OAHkBI,EAAgB9d,IAAI,EACpC+d,iBACIA,KAYGC,CAA2BrO,EAAQC,GAAWS,KAAKwN,GAASvN,MAAMb,GAAUwO,QAAQ,IAAMzO,GAAW,KAU9G,OANAmJ,oBAAU,KACRnG,EAAQ,CACNlI,GAAIsT,EACJhN,YAED,IACI,CACLlG,UACAC,QACAE,OACA2H,aC7CFhP,MADI,GAEJqD,KAFI,GAGJjC,QAHI,GAIJyE,SAJI,IAKF5F,IACSya,GAAiD,EAC5DC,WACAC,QACAC,kBACAC,cAEA,MAAMC,EAAO3Z,KACP4Z,EAAUnV,GAAS8U,EAAU,CACjC/D,aAAc,CACZ3a,OAAO,KAER8J,MAAM9J,MACHme,EAAYvU,GLZe,UKYe,CAC9C+Q,aAAc,CACZ3a,OAAO,KAER8J,MAAM9J,MAAM6K,IACT,QACJI,EADI,MAEJC,EAFI,KAGJE,GACE8S,GAAkCC,GAGhCa,EAAiBD,EAAQE,QAGzB1X,EAAgB,CACpB2X,SAHsBC,kBAAQ,IAAMH,EAAiBA,EAAe,GAAK,IAAK,IAI9EI,gBAH6BD,kBAAQ,IAAMH,EAAiBA,EAAe5U,MAAM,GAAK,GAAI,KAM5F,GAAIa,EACF,OAAO,kBAAC,IAAD,KACK,kBAAC,IAAD,OAId,MAAMrC,EAAUwC,EAAK7K,IAAI+d,IACvB,MAAM,KACJe,EADI,YAEJtB,GACEO,EACJ,MAAO,CACLte,MAAOqf,EACPlb,MAAO4Z,KAULuB,EAAW,KACfR,EAAKzZ,OAAOuZ,EAAiB,MAC7BC,KAGF,OAAO,kBAAC,GAAD,CAAMvX,SAXI7B,IACf,MAAM8Z,EAAU,UAAM9Z,EAAOyZ,UAAb,OAAwBzZ,EAAO2Z,iBAC/CN,EAAKzZ,OAAOuZ,EAAiBW,GAC7BV,KAQ+BtX,cAAeA,GACrC,EACPG,kBACI,kBAAC,IAAD,KACU,0BAAMJ,SAAUkY,IAC5BA,EAAMC,kBACN/X,EAAa8X,KAEG,kBAAC,IAAD,KACK/e,EAAKuC,EAAE,wBAAyB,CACjD2b,WAGY,kBAAC,IAAD,KACI,kBAAC9Y,GAAD,KACI,kBAAC,GAAD,CAAO3B,UAAQ,EAAC1E,KAAK,kBAAkB2E,MAAO1D,EAAKuC,EAAE,gBAAiBoB,UAAW0E,IAAqBF,QAASA,EAAStE,SAAUG,OAGtI,kBAACoB,GAAD,KACI,kBAAC,GAAD,CAAO3B,UAAQ,EAAC1E,KAAK,WAAW2E,MAAO1D,EAAKuC,EAAE,oBAAqBoB,UAAW0E,IAAqBC,aAAa,IAAIH,QAAS,CAAC,CAChJ5I,MAAO,IACPmE,MAAO,KACN,CACDnE,MAAO,IACPmE,MAAO,SAIQ+G,GAAS,kBAACrF,GAAD,KACF,kBAAC,IAAD,CAAWqF,OAAK,EAACvI,MAAOlC,EAAKuC,EAAE,uCAC1BkI,EAAMjL,WAIvB,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQ4D,QAASyb,GACZ7e,EAAKuC,EAAE,WAGZ,kBAAC,IAAD,CAAQa,QAASgb,GACZpe,EAAKuC,EAAE,WAGZ,kBAAC,IAAD,CAAQ9C,KAAK,SAAS2H,SAAO,GACxBpH,EAAKuC,EAAE,e,yBChH5C,MACE4G,SADI,IAEF5F,IACEga,GAAsB,CAC1BM,YAAa,CACXrP,SAAU,eACVgC,OAAQ,EACNoO,WADM,CAGNlO,OAAO,WAAD,OAAakO,GACnBnO,OAAQ,cACRsL,OAAQ,YAIDkD,GAA0D,EACrEhB,WACA7a,UACAmE,eAEA,MAAMkI,EAASI,gBACR0I,EAAQ2G,GAAa7f,oBAAS,IAC9BmL,EAAS8E,GAAcjQ,oBAAS,IAChC8f,EAAwBC,GAA6B/f,mBAAS,IAC/Dif,EAAUnV,GAAS8U,EAAU,CACjC/D,aAAc,CACZ3a,OAAO,KAER8J,MAAM9J,OACH,QACJif,EADI,KAEJI,GACEN,EACEG,EAAWD,GAAWA,EAAQ,GAC9BG,EAAkBH,GAAWA,EAAQ7U,MAAM,GAiBjD,OAhBA8O,oBAAU,MACHF,GAAUoG,IACbrP,GAAW,GACX4P,GAAU,GACVzP,EAAOoB,MAAM0M,GAAqB,CAChC7N,UAAW,CACTkP,KAAMD,KAEPxO,KAAKJ,IACN,OAAO,YACLuN,IACGvN,EAAS8N,YAAYwB,aAC1BD,EAA0B9B,KACzBS,QAAQ,IAAMzO,GAAW,MAE7B,CAACqP,EAAiBpG,IACd,oCACI/N,GAAWxK,EAAKuC,EAAE,mBAClBqc,GAAQO,GAA0B,0BAAM9d,UAAWC,KAAOge,gBACnD,0BAAMje,UAAWC,KAAOie,qBACnBvf,EAAKuC,EAAE,WADZ,KAICqc,EAL0B,WAMtBH,EANsB,KAO1BU,GAGT,kBAAC,IAAD,CAAQ7X,OAAK,EAAClE,QAASA,EAASmE,SAAUA,GACrCiX,EAAUxe,EAAKuC,EAAE,gBAAkBvC,EAAKuC,EAAE,kB,yBC9D3D,MACEe,MADI,IAEFC,IACSic,GAA0C,EACrD3B,cACA4B,0BAEA,MAAOC,EAAaC,GAAkBtgB,oBAAS,GACzCqE,EAAQ+b,EAAmB,UAAM5B,EAAYP,YAAlB,YAAiCmC,EAAoBnC,aAArD,UAAwEO,EAAYP,YAApF,YAAmGtd,EAAKuC,EAAE,YACrI0b,EChByB,EAACJ,EAAa4B,KAC7C,MAAMG,EAAgB/B,EAAYzT,GAC5ByV,EAAO,OAAGJ,QAAH,IAAGA,OAAH,EAAGA,EAAqBb,KAGrC,OAAKiB,GAFyB,YAAZA,EAGV,GAAN,OAAUvG,GAAV,YAA0CsG,GAGtC,GAAN,OAAUtG,GAAV,YAA0CsG,EAA1C,YAA2DC,IDO1CC,CAAkBjC,EAAa4B,GAC1C1gB,EAAI,UAAMkf,EAAN,SACJ8B,EAAW,UAAM9B,EAAN,YACjB,OAAO,yBAAK5c,UAAWC,KAAOW,WACpB,kBAAC,GAAD,CAAOZ,UAAWC,KAAO0e,MAAOtc,MAAOA,EAAO3E,KAAMA,EAAMmb,aAAc,CAC9E3a,OAAO,EACPkL,OAAO,EACPwV,SAAS,EACTC,SAAS,IAEE,EACT7W,QACA8W,UACG1N,MAEH,MAAMmM,EAAOvV,EAAM9J,MACnB,OAAO,oCACa,kBAAC,IAAD,iBAAkBkT,EAAlB,CAAwBpR,UAAWC,KAAO8e,UAAW/W,MAAOA,EAAO8W,KAAMA,EAAM1V,QAAS0V,EAAK1V,SAE7F,kBAACwU,GAAD,CAAyD1X,UAAWqX,EAAMX,SAAUA,EAAUoC,iBAAkBN,EAAa3c,QAAS,IAAMuc,GAAe,KAE1JD,GAAe,kBAAC1B,GAAD,CAAgDC,SAAUA,EAAUC,MAAOxa,EAAOya,gBAAiB4B,EAAa3B,QAAS,IAAMuB,GAAe,UAM1LH,GAAwChY,aAAe,CACrDiY,oBAAqB,KACrBjB,QAAS,IEzCX,MACErV,SADI,IAEF5F,IACS+c,GAA0D,KACrE,MAAM,MACJjX,GACEF,GAASyP,GAAwC,CACnDsB,aAAc,CACZ3a,OAAO,KAGLghB,EAAqBlX,EAAM9J,MAC3B2C,EAAQlC,EAAKuC,EAAE,0BAErB,OAAIge,IAAuBzG,GAAcva,MAChC,kBAAC6F,GAAD,KACK,kBAAC,IAAD,CAAWob,SAAO,EAACte,MAAOA,GACrBlC,EAAKuC,EAAL,+EAA+EuX,GAAcpW,MAA7F,sEAKf6c,IAAuBxG,GAAuBxa,MACzC,kBAAC6F,GAAD,KACK,kBAAC,IAAD,CAAWob,SAAO,EAACte,MAAOA,GACrBlC,EAAKuC,EAAL,sFAAsFwX,GAAuBrW,MAA7G,sEAKZ,M,yBC3BF,MAAM+c,GAAuC,EAClDC,yBACI,6BACE,kBAACjf,EAAD,KAAkBzB,EAAKuC,EAAE,oBAEzB,kBAAC+d,GAAD,MAEA,6BACKI,EAAoB5gB,IAAI,EAC/B+d,cACA4B,yBAEO,kBAACra,GAAD,CAAS/D,UAAWC,KAAOgE,QAASvF,IAAK8d,EAAYzT,IAAZ,OAAiBqV,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAqBrV,KACpE,kBAACoV,GAAD,CAAyC3B,YAAaA,EAAa4B,oBAAqBA,QAKhHgB,GAAqCjZ,aAAe,CAClDmZ,aAAa,GCrBf,MACErd,MADI,IAEFC,IACE4E,GAAUoM,OAAOvP,OAAO4b,GACjBC,GAAiC,IAAM,kBAAC,GAAD,CAAO/hB,SAAUA,EAAS,sBAAuBC,KAAM6Z,GAAwClV,MAAO1D,EAAKuC,EAAE,uBAAwBoB,UAAW0E,IAAqBF,QAASA,MCJhO7E,MADI,IAEFC,IACSud,GAA6B,IAAM,kBAAC,GAAD,CAAOhiB,SAAUA,EAAS,uCAAwCC,KAAM4a,GAAoCjW,MAAO1D,EAAKuC,EAAE,mBAAoBoB,UAAWod,OCFvMzd,MADI,IAEFC,IACSyd,GAA6B,IAAM,kBAAC,GAAD,CAAOliB,SAAUA,EAAS,oCAAqCC,KAAM8Z,GAAoCnV,MAAO1D,EAAKuC,EAAE,yDAA0DoB,UAAWod,OCF1Ozd,MADI,IAEFC,IACS0d,GAAwC,IAAM,kBAAC,GAAD,CAAOniB,SAAUA,EAAS,+CAAgDC,KAAMga,GAAmDrV,MAAO1D,EAAKuC,EAAE,iCAAkCoB,UAAWod,OCFvPzd,MADI,IAEFC,IACS2d,GAAmB,IAAM,kBAAC,GAAD,CAAOzd,UAAQ,EAAC3E,SAAUA,EAAS,6BAA8BC,KAAMia,GAAyBtV,MAAO1D,EAAKuC,EAAE,QAASoB,UAAWC,IAAcC,SAAUC,YAAkBC,IAAQC,QCFxNV,MADI,IAEFC,IACS4d,GAA4B,IAAM,kBAAC,GAAD,CAAOriB,SAAUA,EAAS,mCAAoCC,KAAMka,GAAoCvV,MAAO1D,EAAKuC,EAAE,mBAAoBoB,UAAWod,MCPvL3F,GAAmB,CAC9B7b,MAAO,mBACPmE,MAAO1D,EAAKuC,EAAE,qBAMH8Y,GAAc,CACzB9b,MAAO,cACPmE,MAAO1D,EAAKuC,EAAE,gBAEH+Y,GAAe,CAC1B/b,MAAO,eACPmE,MAAO1D,EAAKuC,EAAE,iBAEHgZ,GAAsB,CACjChc,MAAO,sBACPmE,MAAO1D,EAAKuC,EAAE,wBAEHiZ,GAAqC,CAChDjc,MAAO,qCACPmE,MAAO1D,EAAKuC,EAAE,uCAEHkZ,GAAiC,CAC5Clc,MAAO,iCACPmE,MAAO1D,EAAKuC,EAAE,oCAEHmZ,GAA4B,CACvCnc,MAAO,4BACPmE,MAAO1D,EAAKuC,EAAE,+BCtBde,MADI,IAEFC,IACE4E,GAAUoM,OAAOvP,OAAOoc,GAAcC,KAAK,CAACC,EAAGC,IAC/CD,EAAE5d,MAAQ6d,EAAE7d,OACN,EAGN4d,EAAE5d,MAAQ6d,EAAE7d,MACP,EAGF,GAEI8d,GAAqB,EAChCja,cACI,kBAAC,GAAD,CAAO9D,UAAQ,EAAC8D,SAAUA,EAAUzI,SAAUA,EAAS,4BAA6BC,KAAMma,GAA2BxV,MAAO1D,EAAKuC,EAAE,UAAWoB,UAAW0E,IAAqBF,QAASA,GAAStE,SAAUG,MAChNwd,GAAmBha,aAAe,CAChCD,UAAU,GCrBZ,MACEjE,MADI,IAEFC,IACSke,GAAwB,IAAM,kBAAC,GAAD,CAAO3iB,SAAUA,EAAS,+BAAgCC,KAAMsa,GAA8B3V,MAAO1D,EAAKuC,EAAE,mBAAoBoB,UAAWC,OCHpLN,MADI,GAEJ2W,aAFI,IAGF1W,IACE2W,GAAe,CACnBlV,QAAQ,GAEG0c,GAAsB,EACjCtX,KACAkT,cACAqE,gBAEA,MAAM,OACJ3c,GACEiV,GAAa,CACfC,aADe,KAGXoE,EAAUtZ,EAAOsU,IAA8BlP,GASrD,OAAO,kBAAC,GAAD,CAAO3G,UAAQ,EAAC1E,KAAI,UAAKua,GAAL,YAAqClP,GAAM1G,MAAO4Z,EAAa3Z,UAAWC,IAAcwR,OAAQwJ,IAAY,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAMA,OAAQ,GAAIjT,MAAOiW,GAAatD,EAOrK,IAAKA,EACPM,KAAMgD,GAR2K,CACjLhD,KAAMgD,EACNC,uBAAwB,CACtBzX,KACAkT,cACAqE,iB,yBC5BN,MACEre,MADI,GAEJoB,QAFI,IAGFnB,IACSue,GAA+B,EAC1CrZ,QACAsZ,0BAEA,MAAM,OACJnd,EADI,SAEJC,GACEH,KASJ,OAAO,yBAAK3E,IAAK0I,EAAOpH,UAAWC,KAAOW,WAChC,kBAAC,GAAD,CAAOwB,UAAQ,EAACpC,UAAWC,KAAO0e,MAAOlhB,SAAUA,EAAS,SAAU4E,MAAO1D,EAAKuC,EAAE,0BAA2BxD,KAAI,UAAKwa,GAAL,YAAyC9Q,EAAzC,UAAwD9E,UAAWC,IAAcC,SAAUG,MAE9M,kBAAC,GAAD,CAAOP,UAAQ,EAACpC,UAAWC,KAAO0e,MAAOlhB,SAAUA,EAAS,SAAU4E,MAAO1D,EAAKuC,EAAE,2BAA4BxD,KAAI,UAAKwa,GAAL,YAAyC9Q,EAAzC,WAAyD9E,UAAWC,IAAcC,SAAUG,MAEhN,kBAAC,IAAD,CAASN,MAAM,QACX,kBAAC,IAAD,CAAQrC,UAAWC,KAAOwD,OAAQ1B,QAbJ,KAC1C,MAAM4e,EAAend,IAAWG,OAAOuU,IACjCM,EAAkB,IAAImI,EAAarY,MAAM,EAAGlB,MAAWuZ,EAAarY,MAAMlB,EAAQ,IACxF7D,EAAO2U,GAAkCM,GACzCkI,MAUiB/hB,EAAKuC,EAAE,eC5B1Be,MADI,IAEFC,IACS0e,GAA6B,IAAM,kBAAC,GAAD,CAAOnjB,SAAUA,EAAS,oCAAqCC,KAAMya,GAAoC9V,MAAO1D,EAAKuC,EAAE,mBAAoBoB,UAAWod,OCFpMzd,MADI,IAEFC,IACS2e,GAA2C,IAAM,kBAAC,GAAD,CAAOziB,KAAK,WAAWX,SAAUA,EAAS,2CAA4CC,KAAM0a,GAAqD/V,MAAO1D,EAAKuC,EAAE,oCAAqCoB,UAAWkE,OCF3QvE,MADI,IAEFC,IACS4e,GAAiC,IAAM,kBAAC,GAAD,CAAOrjB,SAAUA,EAAS,wCAAyCC,KAAM2a,GAAyChW,MAAO1D,EAAKuC,EAAE,wBAAyBoB,UAAWod,OCHtNzd,MADI,IAEFC,IACS6e,GAA2B,EACtCC,2BACAC,cAEO,oCACID,EAAyBviB,IAAI,EACpC+d,iBACI,kBAAC,GAAD,CAAO9d,IAAK8d,EAAYzT,GAAIrL,KAAI,UAAKua,GAAL,YAAqCuE,EAAYzT,IAAM1G,MAAOma,EAAYP,YAAa3Z,UAAWC,IAAcwR,OAAQ7V,IAAc,OAALA,QAAK,IAALA,OAAA,EAAAA,EAAOqf,OAAQ,KAAMjT,MAAOiT,IAEhL,IADI0D,EAASzE,EAAYzT,IAExCwU,KAAMA,GAAQ,GACdf,qBCZNva,MADI,IAEFC,IAESgf,GAAiB,EAC5BC,aACAhY,UACA/G,WACA8D,WACAyV,eACI,kBAAC,GAAD,CAAOzV,SAAUA,EAAUkD,QAASuS,EAAWC,eAAgBD,EAAWvZ,SAAUA,EAAU+G,QAASA,EAAS1L,SAAUA,EAAS,wBAAyBC,KAP7H,YAO0J2E,MAAO1D,EAAKuC,EAAE,aAAcoB,UAAW0E,IAAqBF,QAASqa,EAAY3e,SAAUJ,GAAYO,MACtSue,GAAe/a,aAAe,CAC5BD,UAAU,EACViD,SAAS,EACT/G,UAAU,EACVuZ,UAAW,ICnBN,MAAMyF,GAAoB,CAC/BD,WAAY,CACVhU,SAAU,aACVgC,OAAQ,CACNuL,OAAQ,WCAD2G,GAA6B,EACxCjf,eAEA,MAAM,QACJ+G,EADI,MAEJC,EAFI,KAGJE,GDFwC2F,aAAamS,ICIjD5e,EAAWJ,EAAWO,SAAW0C,EAEvC,GAAI8D,EACF,OAAO,kBAAC+X,GAAD,CAAgB9e,SAAUA,EAAU+G,SAAO,EAAC4S,mBAAiB,EAACoF,WAAY,GAAI3e,SAAUA,IAGjG,GAAI4G,EACF,OAAO,kBAAC8X,GAAD,CAAgB9e,SAAUA,EAAU8D,UAAQ,EAACib,WAAY,GAAIxF,UAAWvS,EAAMjL,QAASqE,SAAUA,IAG1G,MAAM,WACJ2e,GACE7X,EAAK6X,WACHra,EAAUqa,EAAW1iB,IAAI,EAC7BsK,KACAkT,kBAF6B,CAI7B5Z,MAAO4Z,EACP/d,MAAO6K,KAET,OAAO,kBAACmY,GAAD,CAAgB9e,SAAUA,EAAU+e,WAAYra,EAAStE,SAAUA,KAE5E6e,GAA2Blb,aAAe,CACxC/D,UAAU,GC1BZ,MACEkD,KADI,IAEFpD,IACEsN,GAAQ,CACZiL,WAAY,CACVtN,SAAU,cACVpE,GAAI,EACFkS,eACIA,EACN9L,OAAQ,CACNC,OAAQ,CAAC,OAAQ,aAAc,kBAAmB,yBAI3CkS,GAAoC,EAC/CrG,YACAI,gBACAhC,eAEA,MAAMkI,EAAgBnG,GAAiB,CACrCH,YACAI,gBACApW,SAAS,KAEL,QACJkE,EADI,MAEJC,EAFI,KAGJE,GACE2F,aAAaO,GAAO,CACtBnB,UAAW,CACT4M,eAIJ,GAAI9R,EACF,OAAO,kBAAC,IAAD,KACK,kBAAC,IAAD,OAId,GAAIC,EAAO,CACT,MAAMe,EAAMxL,EAAKuC,EAAE,uDACnB,OAAO,kBAAC,IAAD,CAAWkI,OAAK,EAACvI,MAAOsJ,GAClBf,EAAMjL,SAIrB,MAAM,KACJT,EADI,WAEJ8b,EAFI,gBAGJgI,EAHI,UAIJ5H,GACEtQ,EAAKmR,WACHhV,EAAgB,CACpB/H,OACA8b,aACAgI,kBACA5H,UAAWA,EAAU7Q,IAEjBoY,EAAa,CAAC,CAClBjjB,MAAO0b,EAAU7Q,GACjB1G,MAAOuX,EAAUlc,OAEnB,OAAO,kBAAC,GAAD,CAAMiI,yBAAuB,EAACH,SAAU+b,EAAe9b,cAAeA,GAClE,EACPG,eACAE,cACI,0BAAMN,SAAUI,EAAczF,YAAW1C,EAAS,2CACxC,kBAACsG,GAAD,KACI,kBAAC8b,GAAD,OAGJ,kBAAC9b,GAAD,KACI,kBAACoc,GAAD,CAAoBja,UAAQ,KAGhC,kBAACnC,GAAD,KACI,kBAACmd,GAAD,CAAgBhb,UAAQ,EAACib,WAAYA,KAGzC,kBAACpd,GAAD,KACI,kBAAC0b,GAAD,OAGJ,kBAACtG,GAAD,CAAoBE,SAAU,IAAMA,EAASvT,SCxF/D7D,MADI,IAEFC,IAESuf,GAAe,EAC1BzF,WACA7S,UACA/G,WACA8D,WACAyV,eACI,kBAAC,GAAD,CAAOvS,QAASuS,EAAWC,eAAgBD,EAAWzV,SAAUA,EAAU9D,SAAUA,EAAU+G,QAASA,EAAS1L,SAAUA,EAAS,sBAAuBC,KAP9H,UAOwJ2E,MAAO1D,EAAKuC,EAAE,WAAYoB,UAAW0E,IAAqBF,QAASkV,EAAUxZ,SAAUJ,GAAYO,IAAUoR,OAAQ7V,IAAc,OAALA,QAAK,IAALA,OAAA,EAAAA,EAAO6K,KAAM,KAAMuB,MAAOvB,IAAE,CAClVA,SAEF0Y,GAAatb,aAAe,CAC1BD,UAAU,EACVyV,UAAW,GACXxS,SAAS,EACT/G,UAAU,GCrBL,MAGMsf,GAAiB,CAC5B1F,SAAU,CACR7O,SAAU,WACVgC,OAAQ,EACNwS,mBAEA,MAAMxS,EAAS,CACbuL,OAAQ,SASV,MAnBoC,+BAahCiH,EACFxS,EAAOE,OAAS,mCAbqB,kCAc5BsS,IACTxS,EAAOE,OAAS,uCAGXF,MCdX9L,QADI,IAEFnB,IACS0f,GAA2B,EACtCxf,WACAuf,mBAEA,MAAM3E,EAAO3Z,KACPb,EAAWJ,EAAWO,SAAW0C,GACjC,QACJ8D,EADI,MAEJC,EAFI,KAGJE,EAHI,QAIJ2H,GDMgC0Q,IAAgB1S,aAAayS,GAAgB,CAC/ErT,UAAW,CACTsT,kBCPEE,CAAqB,CACvB1K,MAAM,IAUR,GARAC,oBAAU,KACR,MAAM/I,EAAY,CAChBsT,gBAEF3E,EAAKzZ,OFlByB,UEkBE,MAChC0N,EAAQ5C,IACP,CAACsT,IAEAxY,EACF,OAAO,kBAACsY,GAAD,CAAcrf,SAAUA,EAAU+G,SAAO,EAAC4S,mBAAiB,EAACC,SAAU,GAAIxZ,SAAUA,IAG7F,GAAI4G,EACF,OAAO,kBAACqY,GAAD,CAAcrf,SAAUA,EAAU8D,UAAQ,EAAC8V,SAAU,GAAIL,UAAWvS,EAAMjL,QAASqE,SAAUA,IAGtG,MAAM,SACJwZ,GACE1S,EAAK0S,SACHlV,EAAUkV,EAASvd,IAAI,EAC3BsK,KACAkT,kBAF2B,CAI3B5Z,MAAO4Z,EACP/d,MAAO6K,KAET,OAAO,kBAAC0Y,GAAD,CAAcrf,SAAUA,EAAU4Z,SAAUlV,EAAStE,SAAUA,KAExEof,GAAyBzb,aAAe,CACtC/D,UAAU,EACVuf,aDjD0B,gBEO5B,MACErc,KADI,IAEFpD,IAEE4f,GAAiBC,IAAO,IAAUA,EACtC,CAAC9J,IAA+B/E,OAAOvP,OAAOoe,EAAQ9J,OAGlDzI,GAAQ,CACZiL,WAAY,CACVtN,SAAU,cACVpE,GAAI,EACFkS,eACIA,EACN9L,OAAQ,CACNC,OAAQ,CAAC,OAAQ,aAAc,YAAa,iBAAkB,qBAAsB,gBAAiB,4BAA6B,iBAClI,sGAAuG,sEAIhG4S,GAAiD,EAC5D/G,YACAI,gBACAhC,eAEA,MAAMkI,EAAgBnG,GAAiB,CACrCH,YACAI,gBACAC,cAAewG,MAGX,QACJ3Y,EADI,MAEJC,EAFI,KAGJE,GACE2F,aAAaO,GAAO,CACtBnB,UAAW,CACT4M,eAIJ,GAAI9R,EACF,OAAO,kBAAC,IAAD,KACK,kBAAC,IAAD,OAId,GAAIC,EAAO,CACT,MAAMe,EAAMxL,EAAKuC,EAAE,uDACnB,OAAO,kBAAC,IAAD,CAAWkI,OAAK,EAACvI,MAAOsJ,GAClBf,EAAMjL,SAIrB,MAAM,KACJT,EADI,WAEJ8b,EAFI,QAGJK,EAHI,UAIJoI,EAJI,eAKJC,EALI,mBAMJC,EANI,cAOJC,EAPI,0BAQJC,EARI,eASJC,EACArB,SAAUsB,GACRjZ,EAAKmR,WACHwG,EAAWsB,EAAiB3d,OAAO,CAAC4d,EAAavF,KAAd,IAAgCuF,EACvE,CAACvF,EAAQuD,uBAAuBzX,IAAKkU,IACnC,IACExX,EAAgB,CACpB/H,OACA8b,aACAK,UACAoI,YACAC,iBACAC,qBACAC,gBACAC,4BACAC,iBACArB,YAEIwB,EAAwB,CAC5BvkB,MAAO2b,EAAQ9Q,GACf1G,MAAOwX,EAAQoC,aAWXyG,EAJ0B7I,EAAQ8I,+BAA+BlkB,IAAI,EACzE+hB,4BACIA,GAEwC/hB,IAAI+hB,IAChD,MAAM,GACJzX,EADI,YAEJkT,EAFI,UAGJqE,GACEE,EACEoC,EAAS,CACb7Z,KACAkT,cACAqE,aAEIrD,EAAUgE,EAASlY,GAOzB,OALIkU,IAEF2F,EAAO3b,aAAegW,EAAQM,MAGzBqF,IAET,OAAO,kBAAC,GAAD,CAAMjd,yBAAuB,EAACH,SAAU+b,EAAe9b,cAAeA,GAClE,EACPG,eACAE,cACI,0BAAMN,SAAUI,GACN,kBAAC7B,GAAD,KACI,kBAAC8b,GAAD,OAGJ,kBAAC9b,GAAD,KACI,kBAACoc,GAAD,CAAoBja,UAAQ,KAGhC,kBAACnC,GAAD,KACI,kBAAC0d,GAAD,CAAcvb,UAAQ,EAAC8V,SAAU,CAACyG,MAGtC,kBAAC1e,GAAD,KACI,kBAACqc,GAAD,OAGJ,kBAACrc,GAAD,KACI,kBAAC4b,GAAD,OAGJ,kBAAC5b,GAAD,KACI,kBAAC+c,GAAD,OAGJ,kBAAC/c,GAAD,KACI,kBAAC+b,GAAD,OAGJ,kBAAC/b,GAAD,KACI,kBAAC6b,GAAD,OAGJ,kBAAC7b,GAAD,KACI,kBAAC6c,GAAD,OAGJ,kBAACxgB,EAAD,KACKzB,EAAKuC,EAAE,oBAGXwhB,EAAcjkB,IAAIokB,GAIxB,kBAAC9e,GAAD,CAASrF,IAAKmkB,EAAa9Z,IACV,kBAACsX,GAAD,CAAqBtX,GAAI8Z,EAAa9Z,GAAIkT,YAAa4G,EAAa5G,YAAaqE,UAAWuC,EAAavC,cAIrH,kBAACnH,GAAD,CAAoBE,SAAU,IAAMA,EAASvT,SC5K/D7D,MADI,IAEFC,IAES4gB,GAAoB,EAC/BC,gBACA7c,WACAiD,UACAlC,eACA7E,WACAuZ,eACI,kBAAC,GAAD,CAAOrZ,UAAW0E,IAAqBvJ,SAAUA,EAAS,2BAA4ByI,SAAUA,EAAUkD,QAASuS,EAAW5H,OAAQ7V,IAAc,OAALA,QAAK,IAALA,OAAA,EAAAA,EAAO6K,KAAM,KAAMia,cAAe/b,EAAc5E,MAAO1D,EAAKuC,EAAE,iBAAkBiI,QAASA,EAASzL,KAR/M,eAQ+OoJ,QAASic,EAAezY,MAAOvB,IAAE,CACtTA,OACE3G,SAAUA,EAAUI,SAAUJ,GAAYO,IAAUiZ,eAAgBD,IACxEmH,GAAkB3c,aAAe,CAC/BD,UAAU,EACViD,SAAS,EACT/G,UAAU,EACVuZ,UAAW,ICtBN,MAAMsH,GAAuB,CAClCF,cAAe,CACb5V,SAAU,gBACVgC,OAAQ,EACN+T,gBADM,CAGNxI,OAAQ,QACRrL,OAAQ6T,EAAS,wBAAoBA,QAAc7d,OCDvDhC,QADI,IAEFnB,IACSihB,GAAqC,EAChD3J,aACA0J,YACAhd,WACA9D,eACK,IAAD,IACJ,MAAM4a,EAAO3Z,MACP,QACJ8F,EADI,MAEJC,EAFI,KAGJE,EAHI,QAIJ2H,GDRqC,GACvCiS,YACA/L,UACIlI,aAAagU,GAAsB,CACvC5U,UAAW,CACT6U,aAEF/L,SCEIiM,CAA0B,CAC5BjM,MAAM,IAEF3U,EAAWJ,EAAWO,SAAW0C,EAevC,GAdA+R,oBAAU,KACJ8L,GAAWjS,EAAQ,CACrBiS,eAED,CAACA,IACJ9L,oBAAU,KAAO,IAAD,IACd,MAAMiM,EAA4B7J,IAAea,GAA0Bnc,MACrEolB,EAAwC,CAC5Cva,GAAE,OAAEO,QAAF,IAAEA,GAAF,UAAEA,EAAMyZ,qBAAR,iBAAE,EAAqBA,cAAc,UAArC,aAAE,EAAuCha,IAEvC9B,EAAeoc,EAA4BC,OAAwCje,EACzF2X,EAAKzZ,OF5B+B,eE4BE0D,IACrC,CAACuS,EAAD,OAAalQ,QAAb,IAAaA,GAAb,UAAaA,EAAMyZ,qBAAnB,aAAa,EAAqBA,gBAEjC5Z,EACF,OAAO,kBAAC2Z,GAAD,CAAmB3Z,SAAO,EAACjD,SAAUA,EAAU9D,SAAUA,EAAU2gB,cAAe,GAAIvgB,SAAUA,IAGzG,GAAI4G,EACF,OAAO,kBAAC0Z,GAAD,CAAmB5c,UAAQ,EAACyV,UAAWvS,EAAMjL,QAASiE,SAAUA,EAAU2gB,cAAe,GAAIvgB,SAAUA,IAGhH,IAAK0gB,IAAc5Z,EACjB,OAAO,kBAACwZ,GAAD,CAAmB5c,UAAQ,EAAC9D,SAAUA,EAAU2gB,cAAe,GAAIvgB,SAAUA,IAGtF,MACMsE,IADoB,OAAJwC,QAAI,IAAJA,GAAA,UAAAA,EAAMyZ,qBAAN,eAAqBA,gBAAiB,IAC9BtkB,IAAI,EAChCsK,KACAkT,kBAFgC,CAIhC5Z,MAAO4Z,EACP/d,MAAO6K,KAET,OAAO,kBAAC+Z,GAAD,CAAmB5c,SAAUA,EAAU9D,SAAUA,EAAU2gB,cAAejc,KAEnFqc,GAAmChd,aAAe,CAChDD,UAAU,EACV9D,UAAU,GC9DZ,MAAMmhB,GAAyD,CAC7D9I,WAAY,CACVtN,SAAU,cACVpE,GAAI,EACFA,QACIA,EACNoG,OAAQ,CACNC,OAAQ,CAAC,IAAK,0BAA2B,sFACzCsL,OAAQ,YCIZpV,KADI,IAEFpD,IA8BE4f,GAAiBC,IAAO,IAAUA,EACtC,CAAC9J,IAA+B/E,OAAOvP,OAAOoe,EAAQ9J,OAG3CuL,GAA6C,EACxDvI,YACAI,gBACAhC,eAEA,MACEjQ,MAAOqa,EACPna,KAAMoa,ID1CuDC,EC2CT1I,ED3C2BhM,aAAasU,GAAwD,CACtJlV,UAAW,CACTtF,GAAI4a,MAFyDA,MC4C/D,MAAMC,EAAO,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAajJ,WACvBuG,EAAwB,OAAG4C,QAAH,IAAGA,OAAH,EAAGA,EAAS9J,aAAakH,yBACjDO,EAAgBnG,GAAiB,CACrCH,YACAI,gBACAC,cAAewG,KAGjB,GAAI2B,EAAqB,CACvB,MAAMtZ,EAAMxL,EAAKuC,EAAE,6DACnB,OAAO,kBAAC,IAAD,CAAWkI,OAAK,EAACvI,MAAOsJ,GAClBsZ,EAAoBtlB,SAInC,IAAKylB,EACH,OAAO,kBAAC,IAAD,KACK,kBAAC,IAAD,OAId,MAAMne,EA9DoBme,KAC1B,MAAMlmB,EAAOkmB,EAAQjM,IACfkC,EAAU+J,EAAQ9L,IAClBgC,EAAe8J,EAAQ7L,IACvBkK,EAAY2B,EAAQ5L,IACpBkK,EAAiB0B,EAAQpM,IACzB2K,EAAqByB,EAAQvL,IAC7B+J,EAAgBwB,EAAQhM,IACxByK,EAA4BuB,EAAQlM,IACpC4K,EAAiBsB,EAAQzL,IACzB8I,EAAW2C,EAAQ3L,IAA8BrT,OAAO,CAAC4d,EAAavF,KAAd,IAAgCuF,EAC5F,CAACvF,EAAQT,YAAYzT,IAAKkU,IACxB,IACJ,MAAO,CACL,CAACtF,IAA0Bja,EAC3B,CAACma,IAA4BuC,GAA+Blc,MAC5D,CAAC4Z,IAA4B+B,EAC7B,CAAC9B,IAAkC+B,EACnC,CAAC9B,IAA+BiK,EAChC,CAACzK,IAAqC0K,EACtC,CAAC7J,IAA0C8J,EAC3C,CAACvK,IAAqCwK,EACtC,CAAC1K,IAAoD2K,EACrD,CAAClK,IAAqCmK,EACtC,CAACrK,IAA+BgJ,IAsCZ4C,CAAoBD,GACpCnB,EAAwB,CAC5BvkB,MAAO0lB,EAAQ/J,QAAQ9Q,GACvB1G,MAAOuhB,EAAQ/J,QAAQoC,aAEnB6H,EAA6B,CACjC5lB,MAAO0lB,EAAQ9J,aAAa/Q,GAC5B1G,MAAOuhB,EAAQ9J,aAAamC,aAE9B,OAAO,kBAAC,GAAD,CAAMtW,yBAAuB,EAACH,SAAU+b,EAAe9b,cAAeA,GAClE,EACPG,eACAjC,SACAmC,cACI,0BAAMN,SAAUI,EAAczF,YAAW1C,EAAS,wDACxC,kBAACsG,GAAD,KACI,kBAAC8b,GAAD,OAGJ,kBAAC9b,GAAD,KACI,kBAACoc,GAAD,CAAoBja,UAAQ,KAGhC,kBAACnC,GAAD,KACI,kBAAC0d,GAAD,CAAcvb,UAAQ,EAAC8V,SAAU,CAACyG,MAGtC,kBAAC1e,GAAD,KACI,kBAAC+e,GAAD,CAAmB5c,UAAQ,EAAC6c,cAAe,CAACe,MAGhD,kBAAC/f,GAAD,KACI,kBAACqc,GAAD,OAGJ,kBAACrc,GAAD,KACI,kBAAC4b,GAAD,OAGJ,kBAAC5b,GAAD,KACI,kBAAC+c,GAAD,OAGJ,kBAAC/c,GAAD,KACI,kBAAC+b,GAAD,OAGJ,kBAAC/b,GAAD,KACI,kBAAC6b,GAAD,OAGJ,kBAAC7b,GAAD,KACI,kBAAC6c,GAAD,OAGJ,kBAACxgB,EAAD,KACKzB,EAAKuC,EAAE,oBAGX8f,GAA4B,kBAACjd,GAAD,KACrB,kBAACgd,GAAD,CAA0BC,yBAA0BA,EAA0BC,SAAUtd,EAAOsU,OAGvG,kBAACkB,GAAD,CAAoBE,SAAU,IAAMA,EAASvT,QCvIpDie,GAA0C,CACrDtJ,WAAY,CACVtN,SAAU,cACVpE,GAAI,EACFA,QACIA,EACNoG,OAAQ,CACNC,OAAQ,CAAC,IAAK,gIACdsL,OAAQ,YCHZpV,KADI,WAEJ0e,IACE9hB,IAwDE+hB,GAAiBtgB,IACrB,IAAIugB,GAAY,EAChB,MAAMC,EAAS,GACTC,EAAoBzgB,EAAOsU,IAE3BoM,GADWD,EAAoBlR,OAAOoR,QAAQF,GAAqB,IACtC/U,OAAO,EAAElI,GAC1CoW,WACKA,GAEP,GAAI8G,EAAkB1X,OAAQ,CAC5B,MAAM4X,EC/E0BtD,IACfA,EAASrc,OAAO,CAAC4f,EAAevH,EAAS7V,KAC1D,MAAO1J,EAAM6f,GAAQN,EAGrB,GAF4BuH,EAAcxY,SAAStO,GAGjD,OAAO8mB,EAGT,MAAMC,EAAsBxD,EAAS5R,OACrC,EAAElI,EAAGud,GAAUC,IACND,EAAQnH,OAASA,EAAKA,MAAQoH,IAAavd,GAIpD,IAFsBqd,EAAoB9X,OAGxC,OAAO6X,EAGT,MAAMI,EAAuBH,EAAoB7f,OAAO,CAACigB,GAAwBC,KACxE,IAAID,EAAuBC,GACjC,CAACpnB,IACJ,MAAO,IAAI8mB,KAAkBI,IAC5B,IDwDkBG,CAAqBV,GAExC,GAAIE,EAAW5X,OAAQ,CACrBuX,GAAY,EACZ,MAAMc,EAAkB,GACxBT,EAAWU,QAAQC,IACjBF,EAAgBE,GAAa,CAC3B3H,KAAM5e,EAAKuC,EAAE,uBAGjBijB,EAAOlM,IAAgCkM,EAAOlM,KAAiC,GAC/E/E,OAAOiS,OAAOhB,EAAOlM,IAA+B+M,IAIxD,OAAOd,EAAYC,OAAS9e,GAGxByc,GAAiBC,IACrB,MAAMd,EAAWc,EAAQ9J,IACnBmN,EAAoBlS,OAAOoR,QAAQrD,GAAUxiB,IAAI,EAAEsK,GACvDwU,OACAJ,UACAkI,aACAC,gBAEA,MAAO/G,GAAiBxV,EAAGpE,MAAM,KAC3B4gB,EAAmB,CACvBhI,OACA8H,aACA7I,YAAa,CACXzT,GAAIwV,IAYR,OARIpB,IACFoI,EAAiBpI,QAAUA,GAGzBmI,IACFC,EAAiBD,SAAWA,GAGvBC,IAET,MAAO,IAAKxD,EACV,CAAC9J,IAA+BmN,IAI9B3a,GAAgB,EACpB+a,0BACA/nB,WACAmI,eACA6f,kBACApM,WACAvT,WACA4f,4BAEA,MAAOC,EAAmBC,GAAwB5nB,oBAAS,GAErD0iB,EAAsB,IAAMkF,GAAqB,GAEjDxM,EAAeuM,GAAqBF,EAC1C,OAAO,0BAAMjgB,SAAUI,EAAczF,YAAW1C,GACtC,kBAACsG,GAAD,KACI,kBAAC8b,GAAD,OAGJ,kBAAC9b,GAAD,KACI,kBAACoc,GAAD,CAAoBja,UAAQ,KAGhC,kBAACnC,GAAD,KACI,kBAAC0X,GAAD,CAAcvV,UAAQ,EAACwV,SAAU,CAACgK,MAGtC,kBAAC3hB,GAAD,KACI,kBAACyb,GAAD,OAGJ,kBAACzb,GAAD,KACI,kBAAC8c,GAAD,OAGJ,kBAAC9c,GAAD,KACI,kBAACqc,GAAD,OAGJ,kBAACrc,GAAD,KACI,kBAAC4b,GAAD,OAGJ,kBAAC5b,GAAD,KACI,kBAAC+c,GAAD,OAGJ,kBAAC/c,GAAD,KACI,kBAAC+b,GAAD,OAGJ,kBAAC/b,GAAD,KACI,kBAAC6b,GAAD,OAGJ,kBAAC7b,GAAD,KACI,kBAAC6c,GAAD,OAGH4E,GAA2B,kBAACpG,GAAD,CAAsCC,oBAAqBmG,IAEvF,kBAACplB,EAAD,KAAkBzB,EAAKuC,EAAE,uBAEzB,kBAAC8iB,GAAD,CAASnL,aAAc,CAC7BlV,QAAQ,IAEG,EACTA,YACI,oCACaA,EAAOuU,IAAkCzZ,IAAI,CAAC0I,EAAGC,IAAU,kBAACrD,GAAD,CAASrF,IAAK0I,GAC9D,kBAACqZ,GAAD,CAA8BrZ,MAAOA,EAAOsZ,oBAAqBA,QAKzF,kBAACnI,GAAD,MAEA,kBAACY,GAAD,CAAoBC,aAAcA,EAAcC,SAAU,IAAMA,EAASvT,OA0BxE+f,GAA6B,EACxC5K,YACAI,gBACA5d,WACAqoB,4BACAzM,eAEA,MACEjQ,MAAOqa,EACPna,KAAMoa,ID/NuC3a,ECgOTkS,EDhOehM,aAAa8U,GAAyC,CAC3G1V,UAAW,CACTtF,SAF6CA,MCiO/C,MAAM6a,EAAO,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAajJ,WACvB8G,EAAgBnG,GAAiB,CACrCH,YACAI,gBACAC,cAAewG,KAGjB,GAAI2B,EAAqB,CACvB,MAAMtZ,EAAMxL,EAAKuC,EAAE,6DACnB,OAAO,kBAAC,IAAD,CAAWkI,OAAK,EAACvI,MAAOsJ,GAClBsZ,EAAoBtlB,SAInC,IAAKylB,EACH,OAAO,kBAAC,IAAD,KACK,kBAAC,IAAD,OAId,MAAM8B,EAAwB,CAC5BxnB,MAAO0lB,EAAO,QAAsB7a,GACpC1G,MAAOuhB,EAAO,QAAsB3H,aAEhCxW,EA5PoB,EAACme,EAASkC,KACpC,MAAMpoB,EAAOkmB,EAAQjM,IACf6B,EAAaO,GAAiB7b,MAC9Bme,EAAY,CAChBtT,GAAI6a,EAAO,QAAsB7a,IAE7BkZ,EAAY2B,EAAQ5L,IACpBkH,EAAqB4G,GAA6BlC,EAAQrM,KAA2CkB,GAAcva,MACnH6nB,EAA+BnC,EAAQxL,IACvC8J,EAAiB0B,EAAQpM,IACzB2K,EAAqByB,EAAQvL,IAC7B+J,EAAgBwB,EAAQhM,IACxByK,EAA4BuB,EAAQlM,IACpC4K,EAAiBsB,EAAQzL,IACzB8I,EAAW2C,EAAQ3L,IAA8BrT,OAAO,CAACwO,GAC7DmK,OACA8H,aACAlI,UACAmI,WACA9I,kBAEA,MAAM9d,EAAM4mB,EAAW,GAAK9I,EAAYzT,GAA5B,UAAoCyT,EAAYzT,GAAhD,YAAsDuc,GAC5DrI,EAAU,CACdM,OACA8H,aACAC,YAOF,OAJInI,IACFF,EAAQE,QAAUA,GAGb,IAAK/J,EACV,CAAC1U,GAAMue,IAER,IACG+I,EAAoBpC,EAAQ1L,KAAqC,GACvE,MAAO,CACL,CAACP,IAA0Bja,EAC3B,CAACma,IAA4B2B,EAC7B,QAAuB6C,EACvB,CAACrE,IAA+BiK,EAChC,CAAC1K,IAAyC2H,EAC1C,CAAC9G,IAAsD2N,EACvD,CAACvO,IAAqC0K,EACtC,CAAC7J,IAA0C8J,EAC3C,CAACvK,IAAqCwK,EACtC,CAAC1K,IAAoD2K,EACrD,CAAClK,IAAqCmK,EACtCrB,WACA+E,sBA0MoBnC,CAAoBD,EAASkC,GAC7CN,EAA0B5B,EAAQjK,QAAQ4C,gBAAgB3X,OAAO,CAACqhB,GACtEzJ,kBACK,IAAD,EACJ,MAAM4B,EAAmB,UAAG5B,EAAY0J,qBAAf,aAAG,EAA2B9H,oBAEvD,IAAKA,EACH,MAAO,IAAI6H,EAAiB,CAC1BzJ,gBAIJ,MAAM2J,EAAS/H,EAAoB3f,IAAI2nB,IAAG,CACxC5J,cACA4B,oBAAqBgI,KAEvB,MAAO,IAAIH,KAAoBE,IAC9B,IACGxF,EAAelb,EAAcyS,IAC7BuN,KAAmB,OAAC9E,QAAD,IAACA,OAAD,EAACA,EAAchU,QACxC,OAAO,kBAAC,GAAD,CAAMhH,yBAAuB,EAACH,SAAU+b,EAAe9b,cAAeA,EAAejD,SAAUyhB,GAAgBpL,aAAc,CAClI/S,UAAU,IAED,EACPF,eACAE,WACAugB,WACI,kBAAC,GAAD,CAAeb,wBAAyBA,EAAyB/nB,SAAUA,EAAU4oB,MAAOA,EAAOzgB,aAAcA,EAAcE,SAAUA,EAAU2f,gBAAiBA,EAAiBC,sBAAuBA,EAAuBrM,SAAUA,MElS1OiN,GAAgC,EAC3CrL,YACAI,gBACAhC,cACI,kBAACwM,GAAD,CAA4BpoB,SAAUA,EAAS,0DAA2Dwd,UAAWA,EAAWI,cAAeA,EAAehC,SAAUA,ICHjKkN,GAA4B,EACvCtL,YACAI,gBACAhC,cACI,kBAACwM,GAAD,CAA4BpoB,SAAUA,EAAS,sDAAuDwd,UAAWA,EAAWI,cAAeA,EAAehC,SAAUA,EAAUyM,0BAA2BpN,GAAuBxa,QCRzNsoB,GAAmD,CAC9D/L,WAAY,CACVtN,SAAU,cACVpE,GAAI,EACFA,QACIA,EACNoG,OAAQ,CACNC,OAAQ,CAAC,IAAK,0BAA2B,wFACzCsL,OAAQ,YCGZpV,KADI,IAEFpD,IA8BE4f,GAAiBC,IAAO,IAAUA,EACtC,CAAC9J,IAA+B/E,OAAOvP,OAAOoe,EAAQ9J,OAG3CwO,GAAyC,EACpDxL,YACAI,gBACAhC,eAEA,MAAM,MACJjQ,EACAE,MACEmR,WAAYmJ,GACV,KD3CqD7a,EC4CTkS,ED5CehM,aAAauX,GAAkD,CAChInY,UAAW,CACTtF,SAFyDA,MC6C3D,MAAMwY,EAAgBnG,GAAiB,CACrCH,YACAI,gBACAC,cAAewG,KAGjB,GAAI1Y,EAAO,CACT,MAAMe,EAAMxL,EAAKuC,EAAE,6DACnB,OAAO,kBAAC,IAAD,CAAWkI,OAAK,EAACvI,MAAOsJ,GAClBf,EAAMjL,SAIrB,IAAKylB,EACH,OAAO,kBAAC,IAAD,KACK,kBAAC,IAAD,OAId,MAAMnB,EAAwB,CAC5BvkB,MAAO0lB,EAAQ/J,QAAQ9Q,GACvB1G,MAAOuhB,EAAQ/J,QAAQoC,aAEnB6H,EAA6B,CACjC5lB,MAAO0lB,EAAQ9J,aAAa/Q,GAC5B1G,MAAOuhB,EAAQ9J,aAAamC,aAExB+E,EAA2B4C,EAAQ9J,aAAakH,yBAChDvb,EAvEoBme,KAC1B,MAAMlmB,EAAOkmB,EAAQjM,IACfkC,EAAU+J,EAAQ9L,IAClBgC,EAAe8J,EAAQ7L,IACvBkK,EAAY2B,EAAQ5L,IACpBkK,EAAiB0B,EAAQpM,IACzB2K,EAAqByB,EAAQvL,IAC7B+J,EAAgBwB,EAAQhM,IACxByK,EAA4BuB,EAAQlM,IACpC4K,EAAiBsB,EAAQzL,IACzB8I,EAAW2C,EAAQ3L,IAA8BrT,OAAO,CAAC4d,EAAavF,KAAd,IAAgCuF,EAC5F,CAACvF,EAAQT,YAAYzT,IAAKkU,IACxB,IACJ,MAAO,CACL,CAACtF,IAA0Bja,EAC3B,CAACma,IAA4BwC,GAA0Bnc,MACvD,CAAC4Z,IAA4B+B,EAC7B,CAAC9B,IAAkC+B,EACnC,CAAC9B,IAA+BiK,EAChC,CAACzK,IAAqC0K,EACtC,CAAC7J,IAA0C8J,EAC3C,CAACvK,IAAqCwK,EACtC,CAAC1K,IAAoD2K,EACrD,CAAClK,IAAqCmK,EACtC,CAACrK,IAA+BgJ,IA+CZ4C,CAAoBD,GAC1C,OAAO,kBAAC,GAAD,CAAMje,yBAAuB,EAACF,cAAeA,EAAeD,SAAU+b,GAClE,EACP3b,eACAjC,SACAmC,cAEO,0BAAMN,SAAUI,GACL,kBAAC7B,GAAD,KACI,kBAAC8b,GAAD,OAGJ,kBAAC9b,GAAD,KACI,kBAACoc,GAAD,CAAoBja,UAAQ,KAGhC,kBAACnC,GAAD,KACI,kBAAC0d,GAAD,CAAcvb,UAAQ,EAAC8V,SAAU,CAACyG,MAGtC,kBAAC1e,GAAD,KACI,kBAAC+e,GAAD,CAAmB5c,UAAQ,EAAC6c,cAAe,CAACe,MAGhD,kBAAC/f,GAAD,KACI,kBAACqc,GAAD,OAGJ,kBAACrc,GAAD,KACI,kBAAC4b,GAAD,OAGJ,kBAAC5b,GAAD,KACI,kBAAC+c,GAAD,OAGJ,kBAAC/c,GAAD,KACI,kBAAC+b,GAAD,OAGJ,kBAAC/b,GAAD,KACI,kBAAC6b,GAAD,OAGJ,kBAAC7b,GAAD,KACI,kBAAC6c,GAAD,OAGJ,kBAACxgB,EAAD,KACKzB,EAAKuC,EAAE,oBAGX8f,GAA4B,kBAACjd,GAAD,KACrB,kBAACgd,GAAD,CAA0BC,yBAA0BA,EAA0BC,SAAUtd,EAAOsU,OAGvG,kBAACkB,GAAD,CAAoBE,SAAU,IAAMA,EAASvT,SCnInER,KADI,IAEFpD,IACEsN,GAAQ,CACZiL,WAAY,CACVtN,SAAU,cACVpE,GAAI,EACFkS,eACIA,EACN9L,OAAQ,CACNC,OAAQ,CAAC,OAAQ,aAAc,kBAAmB,yBAI3CsX,GAA6B,EACxCzL,YACAI,gBACAhC,eAEA,MAAMkI,EAAgBnG,GAAiB,CACrCH,YACAI,gBACApW,SAAS,KAEL,QACJkE,EADI,MAEJC,EAFI,KAGJE,GACE2F,aAAaO,GAAO,CACtBnB,UAAW,CACT4M,eAIJ,GAAI9R,EACF,OAAO,kBAAC,IAAD,KACK,kBAAC,IAAD,OAId,GAAIC,EAAO,CACT,MAAMe,EAAMxL,EAAKuC,EAAE,uDACnB,OAAO,kBAAC,IAAD,CAAWkI,OAAK,EAACvI,MAAOsJ,GAClBf,EAAMjL,SAIrB,MAAM,KACJT,EADI,WAEJ8b,EAFI,gBAGJgI,EAHI,UAIJ5H,GACEtQ,EAAKmR,WACHhV,EAAgB,CACpB/H,OACA8b,aACAgI,kBACA5H,UAAWA,EAAU7Q,IAEjBoY,EAAa,CAAC,CAClBjjB,MAAO0b,EAAU7Q,GACjB1G,MAAOuX,EAAUlc,OAEnB,OAAO,kBAAC,GAAD,CAAMiI,yBAAuB,EAACH,SAAU+b,EAAe9b,cAAeA,GAClE,EACPG,eACAE,cACI,0BAAMN,SAAUI,EAAczF,YAAW1C,EAAS,wCACxC,kBAACsG,GAAD,KACI,kBAAC8b,GAAD,OAGJ,kBAAC9b,GAAD,KACI,kBAACoc,GAAD,CAAoBja,UAAQ,KAGhC,kBAACnC,GAAD,KACI,kBAACmd,GAAD,CAAgBhb,UAAQ,EAACib,WAAYA,KAGzC,kBAACpd,GAAD,KACI,kBAAC0b,GAAD,OAGJ,kBAACtG,GAAD,CAAoBE,SAAU,IAAMA,EAASvT,Q,yBC7E1D,MACM6gB,GAA0B,UADU,mBACV,QAoC1BC,GAAqB,KAChC,MAAM/d,EAAUC,eACV,GACJC,GACEC,eACE,QACJG,EADI,MAEJC,EAFI,KAGJE,GlDjD4CP,IAAMkG,aAAauL,GAAoC,CACrGnM,UAAW,CACTtF,QkDgDE8d,CAAiC9d,IAC9BE,EAAkBC,GAAuBlL,oBAAS,GAMzD,GAAImL,EACF,OAAO,kBAAC,IAAD,KACK,kBAAC,IAAD,OAId,GAAIC,EAAO,CACT,MAAMe,EAAMxL,EAAKuC,EAAE,gDACnB,OAAO,kBAAC,IAAD,CAAWkI,OAAK,EAACvI,MAAOsJ,GAClBf,EAAMjL,SAIrB,MAAMqb,EAAU,OAAGlQ,QAAH,IAAGA,OAAH,EAAGA,EAAMmR,WAAW5C,IAC9BpN,EAhE+B+O,KACrC,MAAMsN,EAAWvN,GAAajD,KAAK,KAAMkD,GAEzC,OAAIA,GAAcsN,EAAS/M,IAClBuM,GAGL9M,GAAcsN,EAAS9M,IAClBuM,GAGL/M,GAAcsN,EAAS7M,IAClByM,GAGLlN,GAAcsN,EAAS1M,IAClBoJ,GAGLhK,GAAcsN,EAAS5M,IAClBoH,GAGL9H,GAAcsN,EAASzM,IAClBoM,GAGLjN,GAAcsN,EAAS3M,IAClB6H,GAGF,MAiCe+E,CAA+BvN,GACrD,OAAO,yBAAKxZ,UAAWC,KAAOW,WACpB,kBAACb,EAAD,KAAepB,EAAKuC,EAAE,iBAErBuJ,GAAiB,kBAACA,EAAD,CAAewQ,UAAWlS,EAAIsQ,SApBzCvT,GAAYA,EAAW+C,EAAQme,SAAW9d,GAAoB,GAoBDmS,cAtBxD,IAAMxS,EAAQqC,KAAK1J,MAwB9ByH,GAAoB,kBAACT,GAAD,CAAcC,gBAAiB,IAAMI,EAAQqC,KAAK1J,IAAwBkH,cAAe,IAAMQ,GAAoB,MAEtIsQ,GAAc,kBAAC,IAAD,CAAWpQ,OAAK,EAACvI,MAAOlC,EAAKuC,EAAE,6BACtCvC,EAAKuC,EAAE,+C,yBC9E5B,MACEoE,KADI,GAEJjC,QAFI,IAGFnB,IA8CE+kB,GAAa,EACjBrhB,eACAC,iBA7CyB,MACzB,MAAMmX,EAAO3Z,MACN6jB,EAAYC,GAAiBnpB,mBAASgf,EAAKxZ,WAAWG,QAC7DyT,oBAAU,IAAM4F,EAAKoK,UAAU,EAC7BzjB,aAEAqZ,EAAKqK,MAAM,KACT,MAAM7N,EAAa7V,EAAOkU,IACpBgC,EAAUlW,EAAM,QAChBmW,EAAenW,EAAM,aACrB2jB,EAAcJ,EAAU,QACxBK,EAAiBL,EAAWrP,IAKlCiC,IAJuBwN,GAAezN,IAAYyN,GACxBC,GAAkB/N,IAAe+N,IAIzDvK,EAAKzZ,Od9B2B,ec8BM,QAG1C4jB,EAAcxjB,IACb,CACDA,QAAQ,IACN,CAACujB,KA0BLM,GACA,MAAM3e,EAAUC,cACVkU,EAAO3Z,MACP,OACJM,GACEqZ,EAAKxZ,WACHgW,EAAa7V,EAAOkU,IACpBgC,EAAUlW,EAAM,QAChB8jB,EAAmBjO,IAAeO,GAAiB7b,OAASsb,IAAeQ,GAAY9b,MACvFwpB,EAAqBlO,IAAeS,GAAa/b,OAASsb,IAAeU,GAAoBhc,MAC7FypB,EAAmBnO,IAAeW,GAAmCjc,OAASsb,IAAeY,GAA+Blc,OAASsb,IAAea,GAA0Bnc,MAC9K0pB,EAAwBpO,IAAea,GAA0Bnc,OAASsb,IAAeY,GAA+Blc,MACxHyjB,EAlCiCnI,IAEnCA,IAAea,GAA0Bnc,MjBhDF,gCiBsDvCsb,IAAeY,GAA+Blc,MjBvDV,6BAEd,eiB+EL2pB,CAAiCrO,GAChDsO,EAAsBtO,IAAea,GAA0Bnc,MACrE,OAAO,yBAAK8B,UAAWC,KAAOW,WACpB,kBAACb,EAAD,KAAepB,EAAKuC,EAAE,gBACtB,0BAAMsE,SAAUI,GACZ,kBAAC7B,GAAD,KACI,kBAAC8b,GAAD,OAGJ,kBAAC9b,GAAD,KACI,kBAACoc,GAAD,OAGHsH,GAAoB,kBAAC1jB,GAAD,KACb,kBAAC+X,GAAD,CAA0B1Z,UAAQ,KAGzCslB,GAAsB,kBAAC3jB,GAAD,KACf,kBAACsd,GAAD,CAA4Bjf,UAAQ,KAG3CulB,GAAoB,kBAAC5jB,GAAD,KACb,kBAAC6d,GAAD,CAA0Bxf,UAAQ,EAACuf,aAAcA,KAGxDiG,GAAyB,kBAAC7jB,GAAD,KAClB,kBAACof,GAAD,CAAoCjd,SAAU4hB,EAAqB1lB,UAAQ,EAAC8gB,WAAkB,OAAPrJ,QAAO,IAAPA,OAAA,EAAAA,EAAS9Q,KAAM,GAAIyQ,WAAYA,EAAYlT,SAAUwhB,EAAsBnpB,EAAKuC,EAAE,sDAAmDmE,KAGpO,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQU,SAAO,EAAC3H,KAAK,SAAS4H,KAAMH,EAAa,kBAAC,IAAD,CAAgBI,OAAK,IAAM,KAAMC,SAAUL,GACvFlH,EAAKuC,EAAE,gBAGZ,kBAAC,IAAD,CAAQa,QAAS,IAAM8G,EAAQme,UAC1BroB,EAAKuC,EAAE,eAWnB6mB,GAAoB,KAC/B,MAAMlf,EAAUC,eACTkf,GrDpEkC,GACzC5V,aACAzD,aACIqB,aAAgB0J,GAA6B,CACjDtH,aACAzD,YqD+D2BsZ,CAA4B,CACrD7V,WAAY,IAAMvJ,EAAQqC,KAAK1J,MAKjC,OAAO,kBAAC,GAAD,CAAM0mB,qBAAmB,EAAC1iB,SAFhB7B,GAAUqkB,EAAiBrkB,IAGjC,EACPiC,eACAC,gBACI,kBAACohB,GAAD,CAAYrhB,aAAcA,EAAcC,WAAYA,M,yBChIvD,MAAMsiB,GAAyBxpB,EAAKuC,EAAE,YAChCM,GAAwB,cACxB4mB,GAAiB,KAAO,IAAD,YAClC,MAAMvf,EAAUC,eAITuf,EAAoBC,GAAyBtqB,mBAAS,KACtDuqB,EAA8BC,GAAmCxqB,oBAAS,IAE/EmL,QAASsf,EACTrf,MAAOsf,EAFH,KAGJpf,EAHI,QAIJ2H,GnDVyChC,aAAa0L,KmDYjDgO,GACLxf,QAASqI,EACTpI,MAAOqI,IACJ8I,KAEL,GAAIkO,EACF,OAAO,yBAAKtoB,YAAW1C,EAAS,yBACpB,kBAACsC,EAAD,KAAeooB,IACf,kBAAC,IAAD,KACI,kBAAC,IAAD,QAKlB,MAAM/e,EAAQsf,GAAwBjX,EAEtC,GAAIrI,EAAO,CACT,MAAMe,EAAMxL,EAAKuC,EAAE,kEACnB,OAAO,yBAAKf,YAAW1C,EAAS,yBACpB,kBAACsC,EAAD,KAAeooB,IACf,kBAAC,IAAD,CAAW/e,OAAK,EAACvI,MAAOsJ,GACnBf,EAAMjL,UAKzB,MAiDMyqB,EAAaP,EAAmB1b,UAAnB,OAA8BrD,QAA9B,IAA8BA,GAA9B,UAA8BA,EAAMsR,mBAApC,iBAA8B,EAAmBA,mBAAjD,aAA8B,EAAgCjO,QAC3Ekc,GAAkB,OAAJvf,QAAI,IAAJA,GAAA,UAAAA,EAAMsR,mBAAN,mBAAmBA,mBAAnB,eAAgCjO,QAAS,EAC7D,OAAO,yBAAKxM,YAAW1C,EAAS,wBAAyBuC,UAAWC,KAAOW,WACjE,kBAACb,EAAD,KAAeooB,IAEf,kBAACzX,GAAD,KACK/R,EAAKuC,EAAE,oTAGZ,kBAACiP,GAAD,CAAaC,SAAUzR,EAAKuC,EAAE,eAAgBmP,YAAa1R,EAAKuC,EAAE,mBAAoBzD,SAAS,uBAAuB8S,WA9FtG,IAAM1H,EAAQqC,KDED,mBC4FwHrJ,cAAe,IAAM2mB,GAAgC,GAAOhY,WAAYgB,EAAef,eAAgB4X,EAAmB1b,QAAU6E,IAExR+W,GAAgC,kBAACjP,GAAD,CAAkC1X,cAAe,IAAM4mB,GAAgC,GAAQ3mB,cAvBpHmJ,UACpB,MAAM4D,EAAMyZ,EAAmB5pB,IAAI,EACjCsK,QACIA,SACA4f,EAAkB,CACtB/Z,QAEF0Z,EAAsB,IACtBE,GAAgC,GAChCvX,OAgBQ,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUnF,QAAS8c,EAAY/c,SAlE9B,KAAO,IAAD,EAC/B,MAAM+O,EAAW,OAAGtR,QAAH,IAAGA,GAAH,UAAGA,EAAMsR,mBAAT,aAAG,EAAmBA,YAElCA,IAIDyN,EAAmB1b,SAAWiO,EAAYjO,OAC5C2b,EAAsB,IAEtBA,EAAsB1N,EAAYnc,IAAI,EACpCsK,KACAkT,kBAFoC,CAIpClT,KACAkT,uBAqDgB,kBAAC,IAAD,KAAgBtd,EAAKuC,EAAE,gBACvB,kBAAC,IAAD,KAAgBvC,EAAKuC,EAAE,WACvB,kBAAC,IAAD,QAGR,kBAAC,IAAD,KACK2nB,EAAW,OAAGvf,QAAH,IAAGA,GAAH,UAAGA,EAAMsR,mBAAT,iBAAG,EAAmBA,mBAAtB,aAAG,EAAgCnc,IAAI,EAC7DsK,KACAkT,cACAzC,gBACI,kBAAC,IAAD,CAAU9a,IAAKqK,GACO,kBAAC,IAAD,CAAW/I,UAAWC,KAAOoI,UACzB,kBAAC,IAAD,CAAUyD,UAAWuc,EAAmBS,KAAK,EACvE/f,GAAIggB,KACAhgB,IAAOggB,GAAYld,SAAU,IA9DpB4O,KACvB,MAAM,GACJ1R,GACE0R,EAEJ,GAAI4N,EAAmBS,KAAK,EAC1B/f,GAAIggB,KACAhgB,IAAOggB,GAAY,CACvB,MAAM3hB,EAAQihB,EAAmBvb,UAAU,EACzC/D,GAAIggB,KACAhgB,IAAOggB,GACb,OAAOT,EAAsB,IAAID,EAAmB/f,MAAM,EAAGlB,MAAWihB,EAAmB/f,MAAMlB,EAAQ,KAG3G,OAAOkhB,EAAsB,IAAID,EAAoB5N,KAgDJuO,CAAiB,CACxDjgB,KACAkT,mBAIsB,kBAAC,IAAD,KAAYA,GAEZ,kBAAC,IAAD,KC9ICzC,KACnC,MAAMpb,EAAO8U,OAAOvP,OAAOslB,GAAaH,KAAK,EAC3C5qB,WACIA,IAAUsb,GAChB,OAAW,OAAJpb,QAAI,IAAJA,OAAA,EAAAA,EAAMiE,QAASmX,GD2IiB0P,CAAsB1P,IAG3B,kBAAC,IAAD,CAAWxZ,UAAWC,KAAOkpB,gBACzB,kBAAC,IAAD,CAAQpnB,QAAS,IAAM8G,EAAQqC,KAAR,UFnId,mBEmIc,YAAqDnC,KACvEpK,EAAKuC,EAAE,YAGL,kBAAC,IAAD,KACnB,kBAAC,IAAD,CAAWkV,QAAQ,IAAIpW,UAAWC,KAAOoW,WACpC1X,EAAKuC,EAAE,gCEzJ3BkoB,GAAY,CACvBC,UAAW1qB,IAAKuC,EAAE,aAClBooB,MAAO3qB,IAAKuC,EAAE,SACdqoB,OAAQ5qB,IAAKuC,EAAE,UACfsoB,SAAU7qB,IAAKuC,EAAE,YACjBuoB,QAAS9qB,IAAKuC,EAAE,WAChBwoB,UAAW/qB,IAAKuC,EAAE,aAClByoB,KAAMhrB,IAAKuC,EAAE,S,yBCgDA0oB,OAjDM,EACnBC,MACAC,iBACAC,iBAEA,MAAM,QACJ5rB,EADI,OAEJwU,EAFI,KAGJiB,EAHI,GAIJ7K,GACE8gB,EAOEG,EAAgC,OAAnBH,EAAIG,WAAsB,GAAKH,EAAIG,WACtD,OAAO,kBAAC,IAAD,KACG,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUne,SAAU,IAAMie,EAAe/gB,GAAK+C,QAASie,KAE3D,kBAAC,IAAD,KAAY5rB,GACZ,kBAAC,IAAD,KACK6rB,EAAWvrB,IAAI,CAACwrB,EAAW7iB,EAAOyH,IAAQ,0BAAMnQ,IAAKurB,EAAY7iB,EAAOpH,UAAWC,KAAOgqB,WAClFA,EACA7iB,IAAUyH,EAAIlC,OAAS,GAAK,QAGzC,kBAAC,IAAD,KAAYyc,GAAUzW,IACtB,kBAAC,IAAD,KACI,kBAAC,GAAD,CAAMiB,KAAMA,IACX,KACD,kBAACI,GAAD,CAAMC,KAAML,OCvC5B,MAEMsW,GAAa,KACjB,MAAM,IAAI1sB,MAHI,iEAWD2sB,OAJI7sB,wBAAc,CAC/B2T,QAASiZ,GACTE,gBAAiBF,K,qBCJnB,MAAMG,GAAY,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,OAkFlClW,OAhFI,EACjBwB,YAEA,MAAM,gBACJyU,GACE/X,qBAAW8X,IAETG,EAAarV,IACjBmV,EAAgB,CACdtX,KAAMmC,MAWJ,KACJnC,EADI,UAEJsB,EAFI,SAGJrB,EAHI,MAIJsB,GACEsB,EACErB,EAAYC,KAAKC,KAAK1B,EAAO,GAAKC,EAAW,EAAGsB,GAChDI,EAAWF,KAAKC,IAAIF,EAAYvB,EAAW,EAAGsB,GAC9CK,EAAiBC,MAAMC,KAAK,CAChCjI,OAAQyH,GACP,CAACS,EAAIC,KAAOA,EAAI,GAAGC,YACtB,OAAO,yBAAK/U,UAAWW,KAAEC,WACf,yBAAKZ,UAAWW,KAAE4pB,MACd,8BAAO5rB,EAAKuC,EAAE,SACd,kBAAC,IAAD,CAAciU,OAAK,EAAClF,SAAU8C,EAASgC,WAAYlJ,SAAU,EACrEoE,eArBJma,EAAgB,CACdrX,SAqBqB9C,EApBrB6C,KAAM,MAqBSuX,GAAU5rB,IAAI+rB,GAAQ,kBAAC,IAAD,CAAoB9rB,IAAK8rB,EAAMtsB,MAAOssB,EAAMnoB,MAAOmoB,MAE9E,8BAAO7rB,EAAKuC,EAAE,cAElB,yBAAKlB,UAAWW,KAAE8pB,OACd,yBAAKzqB,UAAWW,KAAE+pB,QACb/rB,EAAKuC,EAAE,kDAAmD,CACrEoT,YACAG,WACAJ,WAGM,kBAAC,IAAD,CAAQpO,OAAK,EAACC,SAAmB,IAAT4M,EAAY/Q,QAAS,IAAMuoB,EAAWxX,EAAO,IAChEnU,EAAKuC,EAAE,aAEZ,yBAAKlB,UAAWW,KAAEgqB,eACd,6BAAMhsB,EAAKuC,EAAE,SACb,kBAAC,IAAD,CAAciU,OAAK,EAAClF,SAAU6C,EAAKiC,WAAYlJ,SAAU,EACnEoE,eAEAqa,EAAWra,KAEIyE,EAAejW,IAAIqU,GAAQ,kBAAC,IAAD,CAAoBpU,IAAKoU,EAAM5U,MAAO4U,EAAMzQ,MAAOyQ,MAEnF,6BAAMnU,EAAKuC,EAAE,mBAAoB,CACzCkT,gBAGI,kBAAC,IAAD,CAAQnO,OAAK,EAACC,SAAU4M,IAASsB,EAAWrS,QAAS,IAAMuoB,EAAWxX,EAAO,IACxEnU,EAAKuC,EAAE,Y,qBCtBbuU,OA3CE,EACfmV,QACAd,iBACAe,YACA9U,cACA9F,WACA0F,WACI,kBAAC,IAAD,KACE,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUzP,SAA2B,IAAjB0kB,EAAMje,OAAcd,SAAUgf,EAAW/e,QAASiK,KAE1E,kBAAC,IAAD,KAAgBpX,EAAKuC,EAAE,YACvB,kBAAC,IAAD,KAAgBvC,EAAKuC,EAAE,eACvB,kBAAC,IAAD,KAAgBvC,EAAKuC,EAAE,WACvB,kBAAC,IAAD,KAAgBvC,EAAKuC,EAAE,WAG/B,kBAAC,IAAD,KACsB,IAAjB0pB,EAAMje,OAAe,kBAAC,IAAD,KACd,kBAAC,IAAD,CAAWyJ,QAAQ,IAAIpW,UAAWW,KAAE0V,WAC/B1X,EAAKuC,EAAE,yBAEF0pB,EAAMnsB,IAAIorB,GAAO,kBAAC,GAAD,CAAcnrB,IAAKmrB,EAAI9gB,GAAI8gB,IAAKA,EAAKE,WAAY9Z,EAASjE,SAAS6d,EAAI9gB,IAAK+gB,eAAgBA,MAEnI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAW1T,QAAQ,KACf,kBAAC,GAAD,CAAYT,MAAOA,QC1BhC,MAAMmV,GAAcnY,GACV,QAAXA,EACK,GAGFA,EAIHoY,GAAgB,CAAC,CACrB1oB,MAAO1D,EAAKuC,EAAE,OACdhD,MAAO,UAHQ,CAAC,YAAa,QAAS,SAAU,WAAY,UAAW,YAAa,QAK1EO,IAAIkU,IAAM,CACpBtQ,MAAO+mB,GAAUzW,GACjBzU,MAAOyU,MAkCMqY,OA/BM,EACnBrY,SACAsY,gBAEA,MAAM,gBACJb,GACE/X,qBAAW8X,IAaf,OAAO,kBAAC,IAAD,CAAmB9nB,MAAO1D,EAAKuC,EAAE,oBAAqBuS,WAAW,QAAQ5H,SAX/D,EACfoE,eAEAgb,EAAUhb,GACVma,EAAgB,CACdzX,OAAQmY,GAAY7a,GAEpB6C,KAAM,KAI0F7C,SAAU0C,GACnGoY,GAActsB,IAAI,EACzB4D,QACAnE,WACI,kBAAC,IAAD,CAAoBQ,IAAK2D,EAAOA,MAAOA,EAAOnE,MAAOA,OCpDxD,MCMD+T,GAAW,CACf9E,SAAU,eACVgC,OAAQ,EACNP,UADM,CAGNA,QAEFxQ,KAAM,UAqCO8T,OAlCc,EAC3BjC,eAEA,MAAM/J,EAA+B,IAApB+J,EAAStD,OACpBiC,EAAMqB,EAASkB,KAAK,MACpB,SACJ5T,GACE8U,qBAAWhV,IACT,gBACJ+sB,GACE/X,qBAAW8X,KACR7b,GAAQ,QACbnF,IACG6G,aAAgBiC,GAAU,CAC7BG,WAAY,KACVgY,KAEFzb,QAASvF,IACP7L,EAAS,CACPa,KAAM,WACND,QAASiL,EAAMjL,aAIrB,OAAO,kBAAC,IAAD,CAAQ6D,aAAW,EAACkE,SAAUA,GAAYiD,EAASpH,QAAS,IAAMuM,EAAO,CAC9EM,SAESjQ,EAAKuC,EAAE,qB,qBChCb,MAAMgqB,GAAsBvsB,EAAKuC,EAAE,QAC7BO,GAAqB,QAuB5B+N,GAAQ,CACZqa,IAAK,CACH1c,SAAU,eACVgC,OAxBgB,EAClBwD,SACAG,OACAC,eAEA,MAAMoY,EAAO,CACXpY,WACAD,OACA1D,OAAQ,CAAC,KAAM,UAAW,SAAU,OAAQ,cAC5C0H,MAAO,aAGT,OAAKnE,EAIE,IAAKwY,EACV9b,OAAO,aAAD,OAAesD,IAJdwY,KAcEC,GAAc,KAAO,IAAD,EAC/B,MAAOnb,EAAUob,GAAertB,mBAAS,KAClC2U,EAAQsY,GAAajtB,mBAAS,QAC/B,QACJmL,EADI,MAEJC,EAFI,KAGJE,EAHI,QAIJ2H,GACEhC,aAAaO,GAAO,CACtBnB,UAAW,CACTsE,OAAQmY,GAAYnY,GACpBI,SAAU,GACVD,KAAM,KAIV,GAAI3J,EACF,OAAO,oCACK,kBAACpJ,EAAD,KAAemrB,IACf,kBAAC,IAAD,KACI,kBAAC,IAAD,QAKlB,GAAI9hB,EAAO,CACT,MAAMe,EAAMxL,EAAKuC,EAAE,kDACnB,OAAO,oCACK,kBAACnB,EAAD,KAAemrB,IACf,kBAAC,IAAD,CAAW9hB,OAAK,EAACvI,MAAOsJ,GACnBf,EAAMjL,UAMzB,MAAMmtB,EF7EiBV,IAASA,EAAMnsB,IAAIorB,GAAOA,EAAI9gB,IE6EtCwiB,CAAUjiB,EAAKugB,IAAI2B,cAC5BzV,EF5EsB,EAACuV,EAAQrb,KAErC,MAAMwb,EAA0B,IAAlBH,EAAO3e,OAEf+e,EAAgBJ,EAAO3e,SAAWsD,EAAStD,OAEjD,OAAI8e,IAASC,GAINJ,EAAOK,MAAM5iB,GAAMkH,EAASjE,SAASjD,KEkExB6iB,CAAeN,EAAQrb,GAErC4b,ECtDkC,GACxC5b,WACAob,iBACItiB,IACJ,GAAIkH,EAASjE,SAASjD,GAAK,CACzB,MAAM+iB,EAAW7b,EAASZ,OAAO0c,GAAWA,GAAWhjB,GACvDsiB,EAAYS,KDgDQE,CAA2B,CAC/C/b,WACAob,gBAEIR,ECtE8B,GACpC9U,cACAsV,cACAC,YACI,IAEKD,EADLtV,EACiB,GAGFuV,GD6DDW,CAAuB,CACvClW,cACAsV,cACAC,WAEIxB,ECzF2B,GACjC7Z,WACAob,iBACItiB,IAGJ,GAFmBkH,EAASjE,SAASjD,GAErB,CACd,MAAM+iB,EAAW7b,EAASZ,OAAO6c,GAAaA,IAAcnjB,GAC5D,OAAOsiB,EAAYS,GAGrB,OAAOT,EAAY,IAAIpb,EAAUlH,KD8EVojB,CAAoB,CACzClc,WACAob,gBAGIe,EAAU,CACdnb,UACAmZ,gBAAiBjb,IACfkc,EAAY,IACZpa,EAAQ9B,KAGNyb,GAAY,OAAJthB,QAAI,IAAJA,GAAA,UAAAA,EAAMugB,WAAN,eAAW2B,eAAgB,GACzC,OAAO,yBAAKxrB,UAAWC,KAAOW,WACpB,kBAAC,GAAW3C,SAAZ,CAAqBC,MAAOkuB,GACxB,kBAACrsB,EAAD,KAAemrB,IACf,yBAAKlrB,UAAWC,KAAO2D,QACnB,kBAAC,GAAD,CAAc+O,OAAQA,EAAQsY,UAAWA,IACzC,yBAAKjrB,UAAWC,KAAOosB,aACnB,kBAAC,GAAD,CAAsBpc,SAAUA,MAGxC,kBAAC,GAAD,CAAU2a,MAAOA,EAAOiB,cAAeA,EAAe9V,YAAaA,EAAa9F,SAAUA,EAAU6Z,eAAgBA,EAAgBe,UAAWA,EAAWlV,MAAOrM,EAAKugB,IAAIlU,W,yBEzG1L,MAOa2W,GAAiB,EAC5BjqB,QACAkqB,OACAC,iBAEA,MAAM3jB,EAAUC,cACV2jB,EAbgB,EAACF,EAAMC,KAC7B,MAAME,EAAaC,YAAcJ,GACjC,QAAKG,KACDF,GAAmBE,EAAWE,UAUnBC,CAAgBN,EAAMC,GAIrC,OAAO,kBAAC,IAAD,CAAUxsB,UAAWC,KAAO6sB,KAAM/qB,QAFlB,IAAM8G,EAAQqC,KAAKqhB,GAEwBE,OAAQA,EAAQpqB,MAAOA,EAAO5E,SAAUA,EAAS,gCAErH6uB,GAAeS,aAAe,CAC5BP,YAAY,GCtBP,MAAMQ,GAAa,IAAM,kBAAC,IAAD,CAAMvvB,SAAUA,EAAS,0BACjD,kBAAC6uB,GAAD,CAAgBC,KjICC,IiIDgBlqB,MjIEf,WiIFkCmqB,YAAY,IAEhE,kBAACF,GAAD,CAAgBC,KAAMhrB,GAA0Bc,MtFIf,0BsFFjC,kBAACiqB,GAAD,CAAgBC,KAAM/qB,GAAuBa,MAAO8lB,KAEpD,kBAACmE,GAAD,CAAgBC,KAAM9qB,GAAoBY,MAAO6oB,KAEjD,kBAACoB,GAAD,CAAgBC,KAAM7qB,GAAwBW,MAAO0P,MC0C9Ckb,UA/CH,IAAM,kBAACrvB,EAAD,KACV,kBAAC,IAAD,CAAcsvB,SAAO,EAACC,QAAM,IAC5B,kBAAC,IAAD,KACI,yBAAKntB,UAAWC,IAAOW,UAAWT,YAAW1C,EAAS,QAClD,yBAAKuC,UAAWC,IAAOmtB,SACnB,kBAACJ,GAAD,OAGJ,0BAAMhtB,UAAWC,IAAOotB,SACpB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACf,KlIZZ,IkIY6BjqB,UAAWrB,IAIvD,GACc,kBAAC,IAAD,CAAOqsB,OAAK,EAACf,KAAMhrB,GAA0Be,UAAWsO,KAExD,kBAAC,IAAD,CAAO0c,OAAK,EAACf,KAAM5jB,GAA+BrG,UAAWsG,KAE7D,kBAAC,IAAD,CAAO0kB,OAAK,EAACf,K1FjBO,mB0FiB6BjqB,UAAWuN,KAI1E,GACc,kBAAC,IAAD,CAAOyd,OAAK,EAACf,KAAM/qB,GAAuBc,UAAW8lB,KAErD,kBAAC,IAAD,CAAOkF,OAAK,EAACf,KAAM5F,GAA4BrkB,UAAWskB,KAE1D,kBAAC,IAAD,CAAO0G,OAAK,EAACf,KflBI,kBekB6BjqB,UAAWylB,KAIvE,GACc,kBAAC,IAAD,CAAOuF,OAAK,EAACf,KAAM9qB,GAAoBa,UAAW8oB,KAIhE,GACc,kBAAC,IAAD,CAAOkC,OAAK,EAACf,KAAM7qB,GAAwBY,UAAW2U,KAEtD,kBAAC,IAAD,CAAUrC,KAAK,IAAIlU,GlI1ClB","file":"static/js/app.b7c51bb5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2zgzu\",\"sidebar\":\"App_sidebar__10tAV\",\"content\":\"App_content__3I8HS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headline\":\"PageHeadline_headline__1llN5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"subHeadline\":\"PageSubHeadline_subHeadline__2c8Kn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__ODQuA\",\"explanation\":\"Home_explanation__10no3\",\"grid\":\"Home_grid__31J-5\",\"gridItem\":\"Home_gridItem__1gOsm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"HomeCard_container__1TCqS\",\"title\":\"HomeCard_title__1sPYs\",\"body\":\"HomeCard_body__2ubR4\",\"linkContainer\":\"HomeCard_linkContainer__2dWlg\",\"link\":\"HomeCard_link__QjOag\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"GatewayAddKeyValuePair_button__3hPEY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formRow\":\"FormRow_formRow__3ALDU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"GatewayKeyValuePair_container__D-LyM\",\"textInputs\":\"GatewayKeyValuePair_textInputs__dJAb3\",\"keyInput\":\"GatewayKeyValuePair_keyInput__2WHV_\",\"valueInput\":\"GatewayKeyValuePair_valueInput__1uRVv\",\"checkboxGroup\":\"GatewayKeyValuePair_checkboxGroup__2k2Cu\",\"checkbox\":\"GatewayKeyValuePair_checkbox__2hg0g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"GatewayConfigFormEdit_container__1d38w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rowActions\":\"GatewaysTable_rowActions__2fK3j\",\"checkboxCell\":\"GatewaysTable_checkboxCell__3uvd3\",\"typeCell\":\"GatewaysTable_typeCell__Qx_fl\",\"editCell\":\"GatewaysTable_editCell__3mzrM\",\"defaultCell\":\"GatewaysTable_defaultCell__1huny\",\"makeDefaultButton\":\"GatewaysTable_makeDefaultButton__3gFiv\",\"isDefaultText\":\"GatewaysTable_isDefaultText__15qyD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"GatewayList_container__jCYee\",\"processingMessage\":\"GatewayList_processingMessage__1RE2H\",\"loadingContainer\":\"GatewayList_loadingContainer__7veW4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"GatewayConfigFormNew_container__pJ1_K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ListActions_container__2mPW8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paragraph\":\"Paragraph_paragraph__3yubY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"GatewayConfigList_container__3BZQo\",\"actions\":\"GatewayConfigList_actions__yMRge\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Filter_container__zWNRg\",\"inputStrip\":\"Filter_inputStrip__28I4q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"date\":\"Date_date__38K2i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"time\":\"Time_time__3JCu9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Pagination_container__1oOhc\",\"verticalAlign\":\"Pagination_verticalAlign__2xbtG\",\"select\":\"Pagination_select__39auA\",\"buttonPrevious\":\"Pagination_buttonPrevious__SXF81\",\"buttonNext\":\"Pagination_buttonNext__1HLDE\",\"summary\":\"Pagination_summary__2dp6R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noResults\":\"SmsTable_noResults__1t04p\",\"originator\":\"SmsTable_originator__22EFE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ReceivedSmsList_container__vRAw_\",\"topBar\":\"ReceivedSmsList_topBar__2qRs6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CommandFormActions_container__1p4Rc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formulaInWords\":\"FieldDataElementWithCategoryOptionComboAddFormulaButton_formulaInWords__1t-9F\",\"formulaInWordsLabel\":\"FieldDataElementWithCategoryOptionComboAddFormulaButton_formulaInWordsLabel__ZsD-J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FieldDataElementWithCategoryOptionCombo_container__2h1m8\",\"field\":\"FieldDataElementWithCategoryOptionCombo_field__mnPuJ\",\"codeField\":\"FieldDataElementWithCategoryOptionCombo_codeField__1wHw_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formRow\":\"DataElementTimesCategoryOptionCombos_formRow__TGwSL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FieldCommandSpecialCharacter_container__2Vgvs\",\"field\":\"FieldCommandSpecialCharacter_field__-1mZE\",\"button\":\"FieldCommandSpecialCharacter_button__2XK2-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SmsCommandFormEdit_container__2r8xI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SmsCommandFormNew_container__34D_E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SmsCommandList_container__2tb7Z\",\"editButtonCell\":\"SmsCommandList_editButtonCell__1OBCC\",\"checkbox\":\"SmsCommandList_checkbox__1mJm5\",\"noResults\":\"SmsCommandList_noResults__j0ImP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipient\":\"SmsTableItem_recipient__2d7vB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Pagination_container__2LAE2\",\"left\":\"Pagination_left__1ff2z\",\"right\":\"Pagination_right__2Py4F\",\"amount\":\"Pagination_amount__19_-8\",\"pageselection\":\"Pagination_pageselection__27-Pj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noResults\":\"SmsTable_noResults__rTkg-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SentSmsList_container__2FUki\",\"header\":\"SentSmsList_header__3biA5\",\"headerRight\":\"SentSmsList_headerRight__XinlM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"NavigationItem_item__3hR7s\"};","import { createContext } from 'react';\nexport const AlertContext = createContext({\n  addAlert: () => {\n    throw new Error('AlertContext has not been initialized yet!');\n  }\n});","const defaultPrefix = 'dhis2-smsconfiguration';\nexport const dataTest = (name, prefix = defaultPrefix) => `${prefix}-${name}`;","import { AlertBar, AlertStack } from '@dhis2/ui';\nimport React, { useState } from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { AlertContext } from './AlertContext';\nimport { dataTest } from '../dataTest';\nexport const AlertHandler = ({\n  children\n}) => {\n  const [alerts, setAlerts] = useState([]);\n\n  const addAlert = ({\n    message,\n    type\n  }) => {\n    const alert = {\n      message,\n      type,\n      // Ensure that identical messages can be distinguished\n      timestamp: Date.now()\n    };\n    setAlerts([...alerts, alert]);\n  };\n\n  return <AlertContext.Provider value={{\n    addAlert\n  }}>\n            {children}\n\n            <AlertStack dataTest={dataTest('notifications-alerthandler')}>\n                {alerts.map(({\n        message,\n        type,\n        timestamp\n      }) => <AlertBar dataTest={dataTest('notifications-alert')} key={`${message}${timestamp}`} {...{\n        [type]: true\n      }}>\n                        {message}\n                    </AlertBar>)}\n            </AlertStack>\n        </AlertContext.Provider>;\n};\nAlertHandler.propTypes = {\n  children: PropTypes.any\n};","//------------------------------------------------------------------------------\n// <auto-generated>\n// This code was generated by d2-i18n-generate.\n//\n// Changes to this file may cause incorrect behavior and will be lost if\n// the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\nimport i18n from '@dhis2/d2-i18n';\nimport arTranslations from './ar/translations.json';\nimport enTranslations from './en/translations.json';\nimport esTranslations from './es/translations.json';\nimport frTranslations from './fr/translations.json';\nimport idTranslations from './id/translations.json';\nimport loTranslations from './lo/translations.json';\nimport nbTranslations from './nb/translations.json';\nimport prsTranslations from './prs/translations.json';\nimport psTranslations from './ps/translations.json';\nimport ptTranslations from './pt/translations.json';\nimport pt_BRTranslations from './pt_BR/translations.json';\nimport ruTranslations from './ru/translations.json';\nimport tgTranslations from './tg/translations.json';\nimport urTranslations from './ur/translations.json';\nimport uz_CyrlTranslations from './uz_Cyrl/translations.json';\nimport viTranslations from './vi/translations.json';\nimport zhTranslations from './zh/translations.json';\nimport zh_CNTranslations from './zh_CN/translations.json';\nconst namespace = 'default';\ni18n.addResources('ar', namespace, arTranslations);\ni18n.addResources('en', namespace, enTranslations);\ni18n.addResources('es', namespace, esTranslations);\ni18n.addResources('fr', namespace, frTranslations);\ni18n.addResources('id', namespace, idTranslations);\ni18n.addResources('lo', namespace, loTranslations);\ni18n.addResources('nb', namespace, nbTranslations);\ni18n.addResources('prs', namespace, prsTranslations);\ni18n.addResources('ps', namespace, psTranslations);\ni18n.addResources('pt', namespace, ptTranslations);\ni18n.addResources('pt_BR', namespace, pt_BRTranslations);\ni18n.addResources('ru', namespace, ruTranslations);\ni18n.addResources('tg', namespace, tgTranslations);\ni18n.addResources('ur', namespace, urTranslations);\ni18n.addResources('uz_Cyrl', namespace, uz_CyrlTranslations);\ni18n.addResources('vi', namespace, viTranslations);\ni18n.addResources('zh', namespace, zhTranslations);\ni18n.addResources('zh_CN', namespace, zh_CNTranslations);\nexport default i18n;","import { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\nimport styles from './PageHeadline.module.css';\nexport const PageHeadline = ({\n  children\n}) => <h1 className={styles.headline} data-test={dataTest('headline-pageheadline')}>\n        {children}\n    </h1>;\nPageHeadline.propTypes = {\n  children: PropTypes.string.isRequired\n};","import { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\nimport styles from './PageSubHeadline.module.css';\nexport const PageSubHeadline = ({\n  children\n}) => <h2 className={styles.subHeadline} data-test={dataTest('headline-pagesubheadline')}>\n        {children}\n    </h2>;\nPageSubHeadline.propTypes = {\n  children: PropTypes.string.isRequired\n};","import React from 'react';\nimport { Card } from '@dhis2/ui';\nimport { Link } from 'react-router-dom';\nimport { PropTypes } from '@dhis2/prop-types';\nimport s from './HomeCard.module.css';\n\nconst HomeCard = ({\n  titleText,\n  bodyText,\n  linkText,\n  to\n}) => {\n  return <Card>\n            <div className={s.container}>\n                <h2 className={s.title}>{titleText}</h2>\n                <p className={s.body}>{bodyText}</p>\n                <div className={s.linkContainer}>\n                    <Link className={s.link} to={to}>\n                        {linkText}\n                    </Link>\n                </div>\n            </div>\n        </Card>;\n};\n\nHomeCard.propTypes = {\n  bodyText: PropTypes.string.isRequired,\n  linkText: PropTypes.string.isRequired,\n  titleText: PropTypes.string.isRequired,\n  to: PropTypes.string.isRequired\n};\nexport default HomeCard;","import React from 'react';\nimport i18n from '../../locales';\nimport { PageHeadline } from '../../headline';\nimport { dataTest } from '../../dataTest';\nimport { GATEWAY_CONFIG_LIST_PATH, SMS_COMMAND_LIST_PATH, SENT_SMS_LIST_PATH, RECEIVED_SMS_LIST_PATH } from '../';\nimport s from './Home.module.css';\nimport HomeCard from './HomeCard';\nexport const HOME_PATH = '/';\nexport const HOME_LABEL = 'Overview';\nexport const Home = () => {\n  return <div data-test={dataTest('views-home')} className={s.container}>\n            <PageHeadline>\n                {i18n.t('Overview: SMS Configuration', {\n        nsSeparator: '>'\n      })}\n            </PageHeadline>\n            <p className={s.explanation}>\n                {i18n.t('Configure settings for SMS sending, receiving, data reporting, alerts, registration and more.')}\n            </p>\n            <div className={s.grid}>\n                <div className={s.gridItem}>\n                    <HomeCard titleText={i18n.t('Gateway Configuration')} bodyText={i18n.t('Add and manage gateways for sending and receiving SMS messages in DHIS2.')} linkText={i18n.t('Set up gateways')} to={GATEWAY_CONFIG_LIST_PATH} />\n                </div>\n                <div className={s.gridItem}>\n                    <HomeCard titleText={i18n.t('SMS Commands')} bodyText={i18n.t('Add and manage commands triggered by incoming SMS messages to register, alert and more.')} linkText={i18n.t('Set up SMS commands')} to={SMS_COMMAND_LIST_PATH} />\n                </div>\n                <div className={s.gridItem}>\n                    <HomeCard titleText={i18n.t('Sent SMS messages')} bodyText={i18n.t('Open logs of all SMS messages sent from DHIS2.')} linkText={i18n.t('View all sent SMS')} to={SENT_SMS_LIST_PATH} />\n                </div>\n                <div className={s.gridItem}>\n                    <HomeCard titleText={i18n.t('Received SMS messages')} bodyText={i18n.t('Open logs of all SMS messages received by DHIS2.')} linkText={i18n.t('View all received SMS')} to={RECEIVED_SMS_LIST_PATH} />\n                </div>\n            </div>\n        </div>;\n};","import { Button, ButtonStrip, Modal, ModalActions, ModalContent, ModalTitle } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nexport const DeleteGatewaysConfirmationDialog = ({\n  onCancelClick,\n  onDeleteClick\n}) => <Modal dataTest={dataTest('gateways-deleteconfirmationdialog')}>\n        <ModalTitle>{i18n.t('Confirm deletion')}</ModalTitle>\n        <ModalContent>\n            {i18n.t('Are you sure you want to delete the selected gateways?')}\n        </ModalContent>\n        <ModalActions>\n            <ButtonStrip>\n                <Button secondary onClick={onCancelClick} dataTest={dataTest('gateways-deleteconfirmationdialog-cancel')}>\n                    Cancel\n                </Button>\n\n                <Button destructive onClick={onDeleteClick} dataTest={dataTest('gateways-deleteconfirmationdialog-confirm')}>\n                    Delete\n                </Button>\n            </ButtonStrip>\n        </ModalActions>\n    </Modal>;\nDeleteGatewaysConfirmationDialog.propTypes = {\n  onCancelClick: PropTypes.func.isRequired,\n  onDeleteClick: PropTypes.func.isRequired\n};","import { InputFieldFF, ReactFinalForm, composeValidators, hasValue, string } from '@dhis2/ui';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FieldGatewayAuthToken = () => <Field required dataTest={dataTest('gateways-fieldgatewayauthtoken')} name=\"authToken\" label={i18n.t('Auth token')} component={InputFieldFF} validate={composeValidators(string, hasValue)} />;","import { InputFieldFF, ReactFinalForm, composeValidators, hasValue, string } from '@dhis2/ui';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FieldGatewayName = () => <Field required dataTest={dataTest('gateways-fieldgatewayname')} name=\"name\" label={i18n.t('Name')} component={InputFieldFF} validate={composeValidators(string, hasValue)} />;","import { InputFieldFF, ReactFinalForm, composeValidators, hasValue, string } from '@dhis2/ui';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FIELD_GATEWAY_PASSWORD_NAME = 'password';\nexport const FIELD_GATEWAY_PASSWORD_LABEL = i18n.t('Password');\nexport const FieldGatewayPassword = () => <Field required type=\"password\" dataTest={dataTest('gateways-fieldgatewaypassword')} name={FIELD_GATEWAY_PASSWORD_NAME} label={FIELD_GATEWAY_PASSWORD_LABEL} component={InputFieldFF} validate={composeValidators(string, hasValue)} />;","import { InputFieldFF, ReactFinalForm, composeValidators, createEqualTo, hasValue, string } from '@dhis2/ui';\nimport React from 'react';\nimport { FIELD_GATEWAY_PASSWORD_LABEL, FIELD_GATEWAY_PASSWORD_NAME } from './FieldGatewayPassword';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nconst equalToPassword = createEqualTo(FIELD_GATEWAY_PASSWORD_NAME, FIELD_GATEWAY_PASSWORD_LABEL);\nexport const FieldGatewayPasswordConfirmation = () => <Field required type=\"password\" dataTest={dataTest('gateways-fieldgatewaypasswordconfirmation')} name=\"password-confirmation\" label={i18n.t('Confirm password')} component={InputFieldFF} validate={composeValidators(string, hasValue, equalToPassword)} />;","import { InputFieldFF, ReactFinalForm, composeValidators, hasValue, url } from '@dhis2/ui';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FieldGatewayUrlTemplate = () => <Field required dataTest={dataTest('gateways-fieldgatewayurltemplate')} name=\"urlTemplate\" label={i18n.t('Url template')} component={InputFieldFF} validate={composeValidators(url, hasValue)} />;","import { InputFieldFF, ReactFinalForm, composeValidators, hasValue, string } from '@dhis2/ui';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FieldGatewayUsername = () => <Field required dataTest={dataTest('gateways-fieldgatewayusername')} name=\"username\" label={i18n.t('User name')} component={InputFieldFF} validate={composeValidators(string, hasValue)} />;","import { Button, ReactFinalForm } from '@dhis2/ui';\nimport React from 'react';\nimport i18n from '../locales';\nimport { dataTest } from '../dataTest';\nimport styles from './GatewayAddKeyValuePair.module.css';\nconst {\n  useForm\n} = ReactFinalForm;\nexport const GatewayAddKeyValuePair = () => {\n  const {\n    change,\n    getState\n  } = useForm();\n\n  const addKeyValueToFormState = () => {\n    const {\n      parameters\n    } = getState().values;\n    change('parameters', [...parameters, {\n      header: false,\n      encode: false,\n      key: '',\n      value: '',\n      confidential: false\n    }]);\n  };\n\n  return <Button className={styles.button} onClick={addKeyValueToFormState} dataTest={dataTest('gateways-gatewayaddkeyvaluepair')}>\n            {i18n.t('Add key value pair')}\n        </Button>;\n};","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport cx from 'classnames';\nimport { dataTest } from '../dataTest';\nimport styles from './FormRow.module.css';\nexport const FormRow = ({\n  children,\n  className\n}) => <div className={cx(styles.formRow, className)} data-test={dataTest('forms-formrow')}>\n        {children}\n    </div>;\nFormRow.propTypes = {\n  children: PropTypes.any.isRequired,\n  className: PropTypes.string\n};","import i18n from '@dhis2/d2-i18n';\n\nconst isEmpty = value => typeof value === 'undefined' || value === null || value === '';\n\nexport const requiredArgumentErrorMessage = 'Incorrect arguments provided when creating validator';\nexport const requireArgument = (value, type) => {\n  if (isEmpty(value) || typeof value !== type) {\n    throw new Error(requiredArgumentErrorMessage);\n  }\n};\nconst arrayIndexRegex = /\\[(\\d+)\\]$/;\nconst delimiter = '.';\n\nconst getByPath = (path, object) => {\n  const segments = path.split(delimiter);\n  const value = segments.reduce((curValue, segment) => {\n    if (!curValue) return curValue;\n\n    if (segment.match(arrayIndexRegex)) {\n      const arraySegment = segment.replace(arrayIndexRegex, '');\n      const arrayIndex = parseInt(segment.match(arrayIndexRegex)[1], 10);\n      if (!curValue[arraySegment]) return curValue[arraySegment];\n      return curValue[arraySegment][arrayIndex];\n    }\n\n    const segmentValue = curValue[segment];\n    if (!segmentValue) return null;\n    return segmentValue;\n  }, object);\n  return value;\n};\n\nexport const createEqualTo = (key, description) => {\n  requireArgument(key, 'string');\n  const errorMessage = i18n.t('Please make sure the value of this input matches the value in \"{{otherField}}\".', {\n    otherField: description || key\n  });\n  return (value, allValues) => {\n    const comparisonValue = getByPath(key, allValues);\n    return isEmpty(value) || value === comparisonValue ? undefined : errorMessage;\n  };\n};","import { Button, ButtonStrip, ReactFinalForm, CircularLoader } from '@dhis2/ui';\nimport React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { FormRow } from '../forms';\nimport { FieldGatewayName, FieldGatewayUsername, FieldGatewayPassword, FieldGatewayPasswordConfirmation } from '../gateways';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Form\n} = ReactFinalForm;\nexport const GatewayBulkSMSForm = ({\n  onCancelClick,\n  onSubmit,\n  initialValues\n}) => {\n  const submitText = initialValues ? i18n.t('Save gateway') : i18n.t('Add gateway');\n  return <Form keepDirtyOnReinitialize onSubmit={onSubmit} initialValues={initialValues}>\n            {({\n      handleSubmit,\n      submitting,\n      pristine\n    }) => <form onSubmit={handleSubmit} data-test={dataTest('gateways-gatewaybulksmsform')}>\n                    <FormRow>\n                        <FieldGatewayName />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldGatewayUsername />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldGatewayPassword />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldGatewayPasswordConfirmation />\n                    </FormRow>\n\n                    <ButtonStrip>\n                        <Button primary type=\"submit\" icon={submitting ? <CircularLoader small /> : null} disabled={submitting} dataTest={dataTest('forms-gatewaybulksmsform-submit')}>\n                            {submitText}\n                        </Button>\n\n                        <Button onClick={() => onCancelClick(pristine)}>\n                            {i18n.t('Cancel')}\n                        </Button>\n                    </ButtonStrip>\n                </form>}\n        </Form>;\n};\nGatewayBulkSMSForm.defaultProps = {\n  initialValues: {}\n};\nGatewayBulkSMSForm.propTypes = {\n  onCancelClick: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  initialValues: PropTypes.object\n};","import { Button, ButtonStrip, ReactFinalForm, CircularLoader } from '@dhis2/ui';\nimport React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { FormRow } from '../forms';\nimport { FieldGatewayAuthToken, FieldGatewayName, FieldGatewayUrlTemplate, FieldGatewayUsername } from '../gateways';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Form\n} = ReactFinalForm;\nexport const GatewayClickatellForm = ({\n  onCancelClick,\n  onSubmit,\n  initialValues\n}) => {\n  const submitText = initialValues ? i18n.t('Save gateway') : i18n.t('Add gateway');\n  return <Form keepDirtyOnReinitialize onSubmit={onSubmit} initialValues={initialValues}>\n            {({\n      handleSubmit,\n      submitting,\n      pristine\n    }) => <form onSubmit={handleSubmit} data-test={dataTest('gateways-gatewayclickatellform')}>\n                    <FormRow>\n                        <FieldGatewayName />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldGatewayUsername />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldGatewayAuthToken />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldGatewayUrlTemplate />\n                    </FormRow>\n\n                    <ButtonStrip>\n                        <Button primary type=\"submit\" icon={submitting ? <CircularLoader small /> : null} disabled={submitting} dataTest={dataTest('forms-gatewayclickatellform-submit')}>\n                            {submitText}\n                        </Button>\n\n                        <Button onClick={() => onCancelClick(pristine)}>\n                            {i18n.t('Cancel')}\n                        </Button>\n                    </ButtonStrip>\n                </form>}\n        </Form>;\n};\nGatewayClickatellForm.defaultProps = {\n  initialValues: {}\n};\nGatewayClickatellForm.propTypes = {\n  onCancelClick: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  initialValues: PropTypes.object\n};","import { InputFieldFF, ReactFinalForm, composeValidators, hasValue, string } from '@dhis2/ui';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FieldGatewayConfigurationTemplate = () => <Field required dataTest={dataTest('gateways-fieldgatewayconfigurationtemplate')} name=\"configurationTemplate\" label={i18n.t('Configuration template')} component={InputFieldFF} validate={composeValidators(string, hasValue)} helpText={i18n.t('Please refer to the documentation for possible values')} />;","import { CheckboxFieldFF, ReactFinalForm } from '@dhis2/ui';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FieldGatewayUseGet = () => <Field type=\"checkbox\" dataTest={dataTest('gateways-fieldgatewayuseget')} name=\"useGet\" label={i18n.t('Use GET')} component={CheckboxFieldFF} helpText={i18n.t('Use GET instead of POST to send data to gateway')} />;","import { CheckboxFieldFF, ReactFinalForm } from '@dhis2/ui';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FieldGatewaySendUrlParameters = () => <Field type=\"checkbox\" dataTest={dataTest('gateways-fieldgatewaysendurlparameters')} name=\"sendUrlParameters\" label={i18n.t('Send url parameters')} component={CheckboxFieldFF} />;","import { SingleSelectFieldFF, ReactFinalForm } from '@dhis2/ui';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nconst optionApplicationJson = {\n  label: i18n.t('Application/json'),\n  value: 'APPLICATION_JSON'\n};\nconst optionApplicationXml = {\n  label: i18n.t('Application/xml'),\n  value: 'APPLICATION_XML'\n};\nconst optionFormUrlEncoded = {\n  label: i18n.t('Form url encoded'),\n  value: 'FORM_URL_ENCODED'\n};\nconst optionTextPlain = {\n  label: i18n.t('Plain text'),\n  value: 'TEXT_PLAIN'\n};\nconst options = [optionApplicationJson, optionApplicationXml, optionFormUrlEncoded, optionTextPlain];\nexport const FieldGatewayContentType = () => <Field dataTest={dataTest('gateways-fieldgatewaycontenttype')} name=\"contentType\" label={i18n.t('Content type')} component={SingleSelectFieldFF} options={options} initialValue={optionApplicationJson.value} />;","import { Button, ButtonStrip, ReactFinalForm, CircularLoader } from '@dhis2/ui';\nimport React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { FieldGatewayName, FieldGatewayUrlTemplate, GatewayAddKeyValuePair, GatewayKeyValuePair } from '../gateways';\nimport { FieldGatewayConfigurationTemplate } from './FieldGatewayConfigurationTemplate';\nimport { FieldGatewayUseGet } from './FieldGatewayUseGet';\nimport { FieldGatewaySendUrlParameters } from './FieldGatewaySendUrlParameters';\nimport { FieldGatewayContentType } from './FieldGatewayContentType';\nimport { FormRow } from '../forms';\nimport { PageSubHeadline } from '../headline';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Form\n} = ReactFinalForm;\nexport const GatewayGenericForm = ({\n  onCancelClick,\n  onSubmit,\n  initialValues\n}) => {\n  const submitText = initialValues ? i18n.t('Save gateway') : i18n.t('Add gateway');\n  return <Form keepDirtyOnReinitialize onSubmit={onSubmit} initialValues={initialValues}>\n            {({\n      handleSubmit,\n      values,\n      submitting,\n      pristine\n    }) => <form onSubmit={handleSubmit} data-test={dataTest('gateways-gatewaygenericform')}>\n                    <PageSubHeadline>{i18n.t('Gateway setup')}</PageSubHeadline>\n\n                    <FormRow>\n                        <FieldGatewayName />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldGatewayUrlTemplate />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldGatewayConfigurationTemplate />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldGatewayContentType />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldGatewayUseGet />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldGatewaySendUrlParameters />\n                    </FormRow>\n\n                    <PageSubHeadline>\n                        {i18n.t('Key value pairs')}\n                    </PageSubHeadline>\n\n                    {values.parameters.map((_, index) => <GatewayKeyValuePair index={index} key={index} />)}\n\n                    <GatewayAddKeyValuePair />\n\n                    <ButtonStrip>\n                        <Button primary type=\"submit\" dataTest={dataTest('forms-gatewaygenericform-submit')} disabled={submitting} icon={submitting ? <CircularLoader small /> : null}>\n                            {submitText}\n                        </Button>\n\n                        <Button onClick={() => onCancelClick(pristine)}>\n                            {i18n.t('Cancel')}\n                        </Button>\n                    </ButtonStrip>\n                </form>}\n        </Form>;\n};\nGatewayGenericForm.defaultProps = {\n  initialValues: {\n    parameters: []\n  }\n};\nGatewayGenericForm.propTypes = {\n  onCancelClick: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  initialValues: PropTypes.object\n};","import { InputFieldFF, ReactFinalForm, composeValidators, string, hasValue } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nconst isStringWithLengthAtLeastOne = composeValidators(string, hasValue);\nexport const createFieldGatewayKeyValuePairValueName = index => `parameters[${index}].value`;\nexport const FIELD_GATEWAY_KEY_VALUE_PAIR_VALUE_LABEL = i18n.t('Value');\nexport const GatewayKeyValuePairValueField = ({\n  index,\n  isConfidential\n}) => <Field type={isConfidential ? 'password' : 'text'} dataTest={dataTest('gateways-gatewaykeyvaluepair-value')} name={createFieldGatewayKeyValuePairValueName(index)} label={FIELD_GATEWAY_KEY_VALUE_PAIR_VALUE_LABEL} component={InputFieldFF} validate={isStringWithLengthAtLeastOne} />;\nGatewayKeyValuePairValueField.defaultProps = {\n  isConfidential: false\n};\nGatewayKeyValuePairValueField.propTypes = {\n  index: PropTypes.number.isRequired,\n  isConfidential: PropTypes.bool\n};","import { InputFieldFF, ReactFinalForm, composeValidators, string, hasValue } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { FIELD_GATEWAY_KEY_VALUE_PAIR_VALUE_LABEL, GatewayKeyValuePairValueField, createFieldGatewayKeyValuePairValueName } from './GatewayKeyValuePairValueField';\nimport { FormRow, createEqualTo } from '../forms';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\n\nconst createEqualToConfidentialValue = index => createEqualTo(createFieldGatewayKeyValuePairValueName(index), FIELD_GATEWAY_KEY_VALUE_PAIR_VALUE_LABEL);\n\nexport const FIELD_GATEWAY_KEY_VALUE_PAIR_VALUE_CONFIRMATION_LABEL = i18n.t('Confirm confidential value');\nexport const GatewayKeyValuePairConfidentialValueFields = ({\n  index\n}) => {\n  return <>\n            <FormRow>\n                <GatewayKeyValuePairValueField isConfidential index={index} />\n            </FormRow>\n\n            <Field dataTest={dataTest('gateways-gatewaykeyvaluepair-valueconfirmation')} type=\"password\" name={`confirmation[${index}]`} label={FIELD_GATEWAY_KEY_VALUE_PAIR_VALUE_CONFIRMATION_LABEL} component={InputFieldFF} validate={composeValidators(string, hasValue, createEqualToConfidentialValue(index))} />\n        </>;\n};\nGatewayKeyValuePairConfidentialValueFields.propTypes = {\n  index: PropTypes.number.isRequired\n};","import { ReactFinalForm } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { GatewayKeyValuePairValueField } from './GatewayKeyValuePairValueField';\nimport { GatewayKeyValuePairConfidentialValueFields } from './GatewayKeyValuePairConfidentialValueFields';\nconst {\n  useField\n} = ReactFinalForm;\nexport const GatewayKeyValuePairValue = ({\n  index\n}) => {\n  const {\n    input\n  } = useField(`parameters[${index}]`);\n  const {\n    confidential\n  } = input.value;\n\n  if (confidential) {\n    return <GatewayKeyValuePairConfidentialValueFields index={index} />;\n  }\n\n  return <GatewayKeyValuePairValueField index={index} />;\n};\nGatewayKeyValuePairValue.propTypes = {\n  index: PropTypes.number.isRequired\n};","import { Button, CheckboxFieldFF, InputFieldFF, ReactFinalForm, composeValidators, hasValue, string } from '@dhis2/ui';\nimport React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { GatewayKeyValuePairValue } from './GatewayKeyValuePairValue';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nimport styles from './GatewayKeyValuePair.module.css';\nconst {\n  Field,\n  useForm\n} = ReactFinalForm;\nconst isStringWithLengthAtLeastOne = composeValidators(string, hasValue);\nexport const GatewayKeyValuePair = ({\n  index\n}) => {\n  const {\n    change,\n    getState\n  } = useForm();\n\n  const removeKeyValueFromFormState = index => {\n    const {\n      parameters\n    } = getState().values;\n\n    if (index === 0) {\n      change('parameters', parameters.slice(1));\n    } else {\n      change('parameters', [...parameters.slice(0, index), ...parameters.slice(index + 1)]);\n    }\n  };\n\n  return <div className={styles.container} data-test={dataTest('gateways-gatewaykeyvaluepair')}>\n            <div className={styles.textInputs}>\n                <Field dataTest={dataTest('gateways-gatewaykeyvaluepair-key')} className={styles.keyInput} name={`parameters[${index}].key`} label={i18n.t('Key')} component={InputFieldFF} validate={isStringWithLengthAtLeastOne} />\n\n                <div className={styles.valueInput}>\n                    <GatewayKeyValuePairValue index={index} />\n                </div>\n            </div>\n\n            <div className={styles.checkboxGroup}>\n                <Field dataTest={dataTest('gateways-gatewaykeyvaluepair-isheader')} className={styles.checkbox} type=\"checkbox\" name={`parameters[${index}].header`} label={i18n.t('Send as header')} component={CheckboxFieldFF} />\n\n                <Field dataTest={dataTest('gateways-gatewaykeyvaluepair-isencoded')} className={styles.checkbox} type=\"checkbox\" name={`parameters[${index}].encode`} label={i18n.t('Encode')} component={CheckboxFieldFF} />\n\n                <Field dataTest={dataTest('gateways-gatewaykeyvaluepair-isconfidential')} className={styles.checkbox} type=\"checkbox\" name={`parameters[${index}].confidential`} label={i18n.t('Confidential')} component={CheckboxFieldFF} />\n            </div>\n\n            <Button small secondary dataTest={dataTest('gateways-gatewaykeyvaluepair-remove')} onClick={() => removeKeyValueFromFormState(index)}>\n                {i18n.t('Remove key value pair')}\n            </Button>\n        </div>;\n};\nGatewayKeyValuePair.propTypes = {\n  index: PropTypes.number.isRequired\n};","import { Button, ButtonStrip, Modal, ModalTitle, ModalActions } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport i18n from '../locales';\nexport const CancelDialog = ({\n  onConfirmCancel,\n  onAbortCancel\n}) => <Modal>\n        <ModalTitle>\n            {i18n.t('Are you sure you want to cancel? Unsaved changes will be lost')}\n        </ModalTitle>\n\n        <ModalActions>\n            <ButtonStrip>\n                <Button onClick={onAbortCancel}>\n                    {i18n.t('No, stay on page')}\n                </Button>\n\n                <Button primary onClick={onConfirmCancel}>\n                    {i18n.t('Yes, cancel')}\n                </Button>\n            </ButtonStrip>\n        </ModalActions>\n    </Modal>;\nCancelDialog.propTypes = {\n  onAbortCancel: PropTypes.func.isRequired,\n  onConfirmCancel: PropTypes.func.isRequired\n};","import { useHistory, useParams } from 'react-router-dom';\nimport { NoticeBox, CenteredContent, CircularLoader } from '@dhis2/ui';\nimport React, { useState } from 'react';\nimport { GATEWAY_CONFIG_LIST_PATH } from './GatewayConfigList';\nimport { GENERIC_FORM, BULK_SMS_FORM, CLICKATELL_FORM, GatewayBulkSMSForm, GatewayClickatellForm, GatewayGenericForm, useReadGatewayQuery, useUpdateGenericGatewayMutation, useUpdateBulkSMSGatewayMutation, useUpdateClickatellGatewayMutation } from '../../gateways';\nimport { CancelDialog } from '../../cancelDialog';\nimport { PageHeadline } from '../../headline';\nimport { dataTest } from '../../dataTest';\nimport i18n from '../../locales';\nimport styles from './GatewayConfigFormEdit.module.css';\nexport const GATEWAY_CONFIG_FORM_EDIT_PATH_STATIC = '/sms-gateway/edit';\nexport const GATEWAY_CONFIG_FORM_EDIT_PATH = `${GATEWAY_CONFIG_FORM_EDIT_PATH_STATIC}/:id`;\n\nconst getFormComponent = gatewayType => {\n  if (gatewayType === GENERIC_FORM) {\n    return GatewayGenericForm;\n  }\n\n  if (gatewayType === BULK_SMS_FORM) {\n    return GatewayBulkSMSForm;\n  }\n\n  if (gatewayType === CLICKATELL_FORM) {\n    return GatewayClickatellForm;\n  }\n\n  throw new Error(`The gateway type does not exist, got \"${gatewayType}\"`);\n};\n\nexport const GatewayConfigFormEdit = () => {\n  const history = useHistory();\n  const {\n    id\n  } = useParams();\n  const [showCancelDialog, setShowCancelDialog] = useState(false);\n  const {\n    loading,\n    error: loadError,\n    data: jsonData\n  } = useReadGatewayQuery(id);\n  const [saveGenericGateway, {\n    error: saveGenericGatewayError\n  }] = useUpdateGenericGatewayMutation();\n  const [saveBulkSMSGateway, {\n    error: saveBulkSMSGatewayError\n  }] = useUpdateBulkSMSGatewayMutation();\n  const [saveClickatellGateway, {\n    error: saveClickatellGatewayError\n  }] = useUpdateClickatellGatewayMutation();\n  const saveError = saveGenericGatewayError || saveBulkSMSGatewayError || saveClickatellGatewayError;\n\n  if (loading) {\n    return <>\n                <PageHeadline>{i18n.t('Edit')}</PageHeadline>\n                <CenteredContent>\n                    <CircularLoader />\n                </CenteredContent>\n            </>;\n  }\n\n  if (loadError) {\n    const msg = i18n.t('Something went wrong whilst loading gateways');\n    return <>\n                <PageHeadline>{i18n.t('Edit')}</PageHeadline>\n                <NoticeBox error title={msg}>\n                    {loadError.message}\n                </NoticeBox>\n            </>;\n  }\n\n  const data =\n  /**\n   * @TODO:\n   *   * The response does not contain the right content type header\n   *     -> https://jira.dhis2.org/browse/DHIS2-9252\n   */\n  jsonData && typeof jsonData.gateway === 'string' ? {\n    gateway: JSON.parse(jsonData.gateway)\n  } : jsonData;\n  const gatewayType = data?.gateway?.type;\n\n  const onSubmit = async formValues => {\n    const values = { ...formValues,\n      id: data.gateway.uid\n    };\n\n    try {\n      if (values.type === GENERIC_FORM) {\n        await saveGenericGateway(values);\n      }\n\n      if (values.type === BULK_SMS_FORM) {\n        await saveBulkSMSGateway(values);\n      }\n\n      if (values.type === CLICKATELL_FORM) {\n        await saveClickatellGateway(values);\n      }\n\n      history.push(GATEWAY_CONFIG_LIST_PATH);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  const hasGateway = data?.gateway;\n  const FormComponent = getFormComponent(gatewayType);\n  return <div data-test={dataTest('views-gatewayconfigformedit')} className={styles.container}>\n            <PageHeadline>{i18n.t('Edit gateway')}</PageHeadline>\n\n            {hasGateway ? <div data-test={dataTest('views-gatewayconfigformedit-formcontainer')} data-gateway-id={data.gateway.uid}>\n                    {saveError && <NoticeBox error title={i18n.t('Something went wrong whilst saving gateways')}>\n                            {saveError.message}\n                        </NoticeBox>}\n\n                    <FormComponent initialValues={data.gateway} onSubmit={onSubmit} onCancelClick={pristine => pristine ? history.push(GATEWAY_CONFIG_LIST_PATH) : setShowCancelDialog(true)} />\n                </div> : <NoticeBox error title={i18n.t('Gateway not found')}>\n                    {i18n.t('The requested gateway could not be loaded')}\n                </NoticeBox>}\n\n            {showCancelDialog && <CancelDialog onConfirmCancel={() => history.push(GATEWAY_CONFIG_LIST_PATH)} onAbortCancel={() => setShowCancelDialog(false)} />}\n        </div>;\n};","import { Button, ButtonStrip, Checkbox, Table, TableHead, TableBody, TableRowHead, TableCellHead, TableRow, TableCell } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { useHistory } from 'react-router-dom';\nimport React from 'react';\nimport { GATEWAY_CONFIG_FORM_EDIT_PATH_STATIC } from '../views/gateway_configuration/GatewayConfigFormEdit';\nimport { dataTest } from '../dataTest';\nimport { getTypeLabelByType } from './getTypeLabelByType';\nimport i18n from '../locales';\nimport styles from './GatewaysTable.module.css';\nexport const GatewaysTable = ({\n  allGatewaysChecked,\n  checkedGateways,\n  gateways,\n  onGatewayToggle,\n  onToggleAll,\n  onMakeDefaultClick\n}) => {\n  const history = useHistory();\n  return <Table dataTest={dataTest('gateways-gatewaystable')}>\n            <TableHead>\n                <TableRowHead>\n                    <TableCellHead dataTest={dataTest('gateways-gatewaystable-checkall')}>\n                        <Checkbox onChange={onToggleAll} checked={allGatewaysChecked} />\n                    </TableCellHead>\n                    <TableCellHead>{i18n.t('Name')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Type')}</TableCellHead>\n                    <TableCellHead />\n                    <TableCellHead />\n                </TableRowHead>\n            </TableHead>\n\n            <TableBody>\n                {gateways.map(gateway => <TableRow key={gateway.uid} dataTest={dataTest('gateways-gatewaystable-row')}>\n                        <TableCell className={styles.checkboxCell} dataTest={dataTest('gateways-gatewaystable-checkbox')}>\n                            <Checkbox value={gateway.uid} onChange={() => onGatewayToggle(gateway.uid)} checked={checkedGateways.includes(gateway.uid)} dataTest={dataTest('gateways-gatewaystable-id')} />\n                        </TableCell>\n\n                        <TableCell dataTest={dataTest('gateways-gatewaystable-name')}>\n                            {gateway.name}\n                        </TableCell>\n\n                        <TableCell className={styles.typeCell} dataTest={dataTest('gateways-gatewaystable-type')}>\n                            {getTypeLabelByType(gateway.type)}\n                        </TableCell>\n\n                        <TableCell className={styles.defaultCell}>\n                            {!gateway.isDefault ? <Button dataTest={dataTest('gateways-gatewaystable-makedefault')} onClick={() => onMakeDefaultClick(gateway.uid)} className={styles.makeDefaultButton}>\n                                    {i18n.t('Make default')}\n                                </Button> : <span className={styles.isDefaultText}>\n                                    {i18n.t('Default gateway')}\n                                </span>}\n                        </TableCell>\n\n                        <TableCell dataTest={dataTest('gateways-gatewaystable-actions')} className={styles.editCell}>\n                            <ButtonStrip className={styles.rowActions}>\n                                <Button dataTest={dataTest('gateways-gatewaystable-edit')} onClick={() => {\n              history.push(`${GATEWAY_CONFIG_FORM_EDIT_PATH_STATIC}/${gateway.uid}`);\n            }}>\n                                    {i18n.t('Edit')}\n                                </Button>\n                            </ButtonStrip>\n                        </TableCell>\n                    </TableRow>)}\n            </TableBody>\n        </Table>;\n};\nGatewaysTable.propTypes = {\n  checkedGateways: PropTypes.arrayOf(PropTypes.string).isRequired,\n  gateways: PropTypes.arrayOf(PropTypes.shape({\n    isDefault: PropTypes.bool.isRequired,\n    name: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    uid: PropTypes.string.isRequired\n  })).isRequired,\n  onGatewayToggle: PropTypes.func.isRequired,\n  onMakeDefaultClick: PropTypes.func.isRequired,\n  onToggleAll: PropTypes.func.isRequired,\n  allGatewaysChecked: PropTypes.bool\n};","import i18n from '../locales';\n/**\n * @param {string} type\n * @returns {string}\n */\n\nexport const getTypeLabelByType = type => {\n  if (type === 'bulksms') {\n    return i18n.t('BulkSMS');\n  }\n\n  if (type === 'clickatell') {\n    return i18n.t('Clickatell');\n  }\n\n  if (type === 'http' || !type) {\n    return i18n.t('Generic');\n  }\n\n  return type;\n};","import { CircularLoader } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { GatewaysTable } from './GatewaysTable';\nimport { dataTest } from '../dataTest';\nimport styles from './GatewayList.module.css';\nexport const GatewayList = ({\n  checkedGateways,\n  gateways,\n  setCheckedGateways,\n  onMakeDefaultClick,\n  processing\n}) => {\n  const allGatewaysChecked = checkedGateways.length === gateways.length;\n\n  const toggleGateway = id => {\n    if (checkedGateways.includes(id)) {\n      const index = checkedGateways.findIndex(curId => curId === id);\n      const newCheckedGateways = index === 0 ? checkedGateways.slice(1) : [...checkedGateways.slice(0, index), ...checkedGateways.slice(index + 1)];\n      setCheckedGateways(newCheckedGateways);\n    } else {\n      setCheckedGateways([...checkedGateways, id]);\n    }\n  };\n\n  const toggleAll = () => {\n    if (!allGatewaysChecked) {\n      const allGatewayIds = gateways.map(({\n        uid\n      }) => uid);\n      setCheckedGateways(allGatewayIds);\n    } else {\n      setCheckedGateways([]);\n    }\n  };\n\n  return <div className={styles.container} data-test={dataTest('gateways-gatewaylist')}>\n            {processing && <div className={styles.processingMessage}>\n                    <div className={styles.loadingContainer}>\n                        <CircularLoader />\n                    </div>\n                </div>}\n\n            <GatewaysTable allGatewaysChecked={allGatewaysChecked} gateways={gateways} checkedGateways={checkedGateways} onGatewayToggle={toggleGateway} onMakeDefaultClick={onMakeDefaultClick} onToggleAll={toggleAll} />\n        </div>;\n};\nGatewayList.propTypes = {\n  checkedGateways: PropTypes.arrayOf(PropTypes.string).isRequired,\n  gateways: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    uid: PropTypes.string.isRequired,\n    isDefault: PropTypes.bool\n  })).isRequired,\n  setCheckedGateways: PropTypes.func.isRequired,\n  onMakeDefaultClick: PropTypes.func.isRequired,\n  processing: PropTypes.bool\n};","export const GENERIC_FORM = 'http';\nexport const BULK_SMS_FORM = 'bulksms';\nexport const CLICKATELL_FORM = 'clickatell';","import { useDataMutation } from '@dhis2/app-runtime';\nexport const CREATE_BULK_SMS_GATEWAY_MUTATION = {\n  resource: 'gateways',\n  type: 'create',\n  data: ({\n    name,\n    username,\n    password\n  }) => ({\n    type: 'bulksms',\n    name,\n    username,\n    password\n  })\n};\nexport const useCreateBulkSMSGatewayMutation = () => useDataMutation(CREATE_BULK_SMS_GATEWAY_MUTATION);","import { useDataMutation } from '@dhis2/app-runtime';\nexport const CREATE_CLICKATELL_GATEWAY_MUTATION = {\n  resource: 'gateways',\n  type: 'create',\n  data: ({\n    name,\n    username,\n    authToken,\n    urlTemplate\n  }) => ({\n    type: 'clickatell',\n    name,\n    username,\n    authToken,\n    urlTemplate\n  })\n};\nexport const useCreateClickatellGatewayMutation = () => useDataMutation(CREATE_CLICKATELL_GATEWAY_MUTATION);","/**\n * This the shape of the additional fields\n * that can be added to a generic config\n *\n * @typedef {Object} Parameter\n * @prop {string} key\n * @prop {string} value\n * @prop {bool} header\n * @prop {bool} encode\n * @prop {bool} confidential\n */\n\n/**\n * @param {Object} args\n * @param {string} args.configurationTemplate\n * @param {string} args.contentType\n * @param {string} args.name\n * @param {string} args.urlTemplate\n * @param {bool} args.sendUrlParameters\n * @param {bool} args.useGet\n * @param {Parameter[]} args.parameters\n *\n * @returns {Object}\n */\nexport const createGenericGateWayDataFromVariables = ({\n  configurationTemplate,\n  contentType,\n  name,\n  parameters,\n  sendUrlParameters,\n  urlTemplate,\n  useGet\n}) => ({\n  type: 'http',\n  configurationTemplate,\n  contentType,\n  name,\n  parameters,\n  sendUrlParameters,\n  urlTemplate,\n  useGet\n});","import { useDataMutation } from '@dhis2/app-runtime';\nimport { createGenericGateWayDataFromVariables } from './createGenericGateWayDataFromVariables';\nexport const CREATE_GENERIC_GATEWAY_MUTATION = {\n  resource: 'gateways',\n  type: 'create',\n  data: createGenericGateWayDataFromVariables\n};\nexport const useCreateGenericGatewayMutation = () => useDataMutation(CREATE_GENERIC_GATEWAY_MUTATION);","import { useState } from 'react';\nimport { useDataEngine } from '@dhis2/app-runtime';\nexport const DELETE_GATEWAY_MUTATION = {\n  resource: 'gateways',\n  type: 'delete',\n  id: ({\n    id\n  }) => id\n};\n\nconst idToMutationRequestFactory = engine => id => {\n  const variables = {\n    id\n  };\n  return engine.mutate(DELETE_GATEWAY_MUTATION, {\n    variables\n  });\n};\n\nexport const useDeleteGatewaysMutation = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const engine = useDataEngine();\n  const idToMutationRequest = idToMutationRequestFactory(engine);\n\n  const onStart = () => setLoading(true);\n\n  const onDone = response => {\n    setLoading(false);\n    return response;\n  };\n\n  const onError = error => {\n    setError(error);\n    setLoading(false);\n  };\n\n  const mutate = ({\n    ids\n  }) => {\n    onStart();\n    return Promise.all(ids.map(idToMutationRequest)).then(onDone).catch(onError);\n  };\n\n  return [mutate, {\n    loading,\n    error\n  }];\n};","import { useDataQuery } from '@dhis2/app-runtime';\n/**\n * @TODO:\n *   * The \"fields\" param does not work\n *     -> https://jira.dhis2.org/browse/DHIS2-9241\n *   * id field is not present, only uid\n *     -> https://jira.dhis2.org/browse/DHIS2-9249\n *   * Api does not return password of BulkSMS gateway configs\n *     -> https://jira.dhis2.org/browse/DHIS2-9248\n */\n\nexport const GATEWAY_QUERY = {\n  gateway: {\n    resource: 'gateways',\n    id: ({\n      id\n    }) => id\n  }\n};\nexport const useReadGatewayQuery = id => useDataQuery(GATEWAY_QUERY, {\n  variables: {\n    id\n  }\n});","import { useDataQuery } from '@dhis2/app-runtime';\n/**\n * @TODO:\n *   * The endpoint requires a `.json`, ignores \"Accept\" header\n *     -> https://jira.dhis2.org/browse/DHIS2-9250\n *   * The \"fields\" param does not work\n *     -> https://jira.dhis2.org/browse/DHIS2-9241\n *   * id field is not present, only uid\n *     -> https://jira.dhis2.org/browse/DHIS2-9249\n */\n\nexport const GATEWAYS_QUERY = {\n  gateways: {\n    resource: 'gateways.json',\n    params: ({\n      fields,\n      filter\n    }) => {\n      const params = {};\n\n      if (fields) {\n        params.fields = fields;\n      }\n\n      if (filter) {\n        params.filter = filter;\n      }\n\n      return params;\n    }\n  }\n};\n/**\n * @param {string[]} [ids]\n * @return {Object}\n */\n\nexport const useReadGatewaysQuery = ids => {\n  /*\n   * @TODO(filtering): Currently the `id:in:[...]` doesn't work\n   *   -> https://jira.dhis2.org/browse/DHIS2-9259\n   *\n   * This is because filtering doesn't work right now\n   * So there's no need for sending any variables\n   */\n  const filter = `id:in:[${ids?.join(',')}]`;\n  const variables = false && ids ? {\n    filter\n  } : {}; // eslint-disable-line no-constant-condition\n\n  const {\n    data: jsonData,\n    ...rest\n  } = useDataQuery(GATEWAYS_QUERY, {\n    variables\n  });\n  const parsedData =\n  /**\n   * @TODO:\n   *   Create Jira issue for:\n   *   The response does not contain the right content type header\n   */\n  jsonData && typeof jsonData.gateways === 'string' ? {\n    gateways: JSON.parse(jsonData.gateways)\n  } : jsonData;\n  const data = ids && parsedData?.gateways?.gateways ? {\n    gateways: {\n      gateways: parsedData.gateways.gateways.filter(({\n        uid\n      }) => ids.includes(uid))\n    }\n  } : parsedData;\n  return {\n    data,\n    ...rest\n  };\n};","import { useDataMutation } from '@dhis2/app-runtime';\nexport const SET_DEFAULT_GATEWAY_MUTATION = {\n  resource: 'gateways/default',\n  type: 'replace',\n  id: ({\n    id\n  }) => id\n};\nexport const useSetDefaultGatewayMutation = () => useDataMutation(SET_DEFAULT_GATEWAY_MUTATION);","import { useState } from 'react';\nimport { useDataEngine } from '@dhis2/app-runtime';\n/**\n * @TODO\n *   * Create jira issue: Make `useDataMutation` accept function for \"id\"\n */\n\n/**\n * @param {Object} query\n * @returns {Object}\n */\n\nexport const useUpdateGatewayMutation = query => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const engine = useDataEngine();\n\n  const doFetch = variables => {\n    const updatedQuery = { ...query,\n      id: variables.id\n    };\n    setLoading(true);\n    setError(null);\n    return engine.mutate(updatedQuery, {\n      variables\n    }).then(data => {\n      setLoading(false);\n      return data;\n    }).catch(error => {\n      setLoading(false);\n      setError(error);\n      throw error;\n    });\n  };\n\n  return [doFetch, {\n    loading,\n    error\n  }];\n};","import { useUpdateGatewayMutation } from './useUpdateGatewayMutation';\nexport const UPDATE_BULK_SMS_GATEWAY_MUTATION = {\n  resource: 'gateways',\n  id: ({\n    id\n  }) => id,\n  type: 'update',\n  data: ({\n    name,\n    username,\n    password\n  }) => ({\n    type: 'bulksms',\n    name,\n    username,\n    password\n  })\n};\nexport const useUpdateBulkSMSGatewayMutation = () => useUpdateGatewayMutation(UPDATE_BULK_SMS_GATEWAY_MUTATION);","import { useUpdateGatewayMutation } from './useUpdateGatewayMutation';\nexport const UPDATE_CLICKATELL_GATEWAY_MUTATION = {\n  resource: 'gateways',\n  id: ({\n    id\n  }) => id,\n  type: 'update',\n  data: ({\n    name,\n    username,\n    authToken,\n    urlTemplate\n  }) => ({\n    type: 'clickatell',\n    name,\n    username,\n    authToken,\n    urlTemplate\n  })\n};\nexport const useUpdateClickatellGatewayMutation = () => useUpdateGatewayMutation(UPDATE_CLICKATELL_GATEWAY_MUTATION);","import { useUpdateGatewayMutation } from './useUpdateGatewayMutation';\nimport { createGenericGateWayDataFromVariables } from './createGenericGateWayDataFromVariables';\nexport const UPDATE_GENERIC_GATEWAY_MUTATION = {\n  resource: 'gateways',\n  id: ({\n    id\n  }) => id,\n  type: 'replace',\n  data: createGenericGateWayDataFromVariables\n};\nexport const useUpdateGenericGatewayMutation = () => useUpdateGatewayMutation(UPDATE_GENERIC_GATEWAY_MUTATION);","import { SingleSelectField, SingleSelectOption, NoticeBox } from '@dhis2/ui';\nimport { useHistory } from 'react-router-dom';\nimport React, { useState } from 'react';\nimport { GATEWAY_CONFIG_LIST_PATH } from './GatewayConfigList';\nimport { GENERIC_FORM, BULK_SMS_FORM, CLICKATELL_FORM } from '../../gateways';\nimport { FormRow } from '../../forms';\nimport { PageHeadline } from '../../headline';\nimport { dataTest } from '../../dataTest';\nimport { GatewayBulkSMSForm, GatewayClickatellForm, GatewayGenericForm, useCreateBulkSMSGatewayMutation, useCreateClickatellGatewayMutation, useCreateGenericGatewayMutation } from '../../gateways';\nimport i18n from '../../locales';\nimport styles from './GatewayConfigFormNew.module.css';\nexport const GATEWAY_CONFIG_FORM_NEW_PATH = '/sms-gateway/new';\nexport const GatewayConfigFormNew = () => {\n  const history = useHistory();\n  const [visibleForm, setVisibleForm] = useState(GENERIC_FORM);\n  const [saveGenericGateway, {\n    error: saveGenericGatewayError\n  }] = useCreateGenericGatewayMutation();\n  const [saveBulkSMSGateway, {\n    error: saveBulkSMSGatewayError\n  }] = useCreateBulkSMSGatewayMutation();\n  const [saveClickatellGateway, {\n    error: saveClickatellGatewayError\n  }] = useCreateClickatellGatewayMutation();\n  const error = saveGenericGatewayError || saveBulkSMSGatewayError || saveClickatellGatewayError;\n\n  if (error) {\n    const msg = i18n.t('Something went wrong whilst saving the gateway');\n    return <div data-test={dataTest('views-gatewayconfigformnew')}>\n                <PageHeadline>{i18n.t('Add gateway')}</PageHeadline>\n                <NoticeBox error title={msg}>\n                    {error.message}\n                </NoticeBox>\n            </div>;\n  }\n\n  const onSubmit = async values => {\n    try {\n      if (visibleForm === GENERIC_FORM) {\n        await saveGenericGateway(values);\n      }\n\n      if (visibleForm === BULK_SMS_FORM) {\n        await saveBulkSMSGateway(values);\n      }\n\n      if (visibleForm === CLICKATELL_FORM) {\n        await saveClickatellGateway(values);\n      }\n\n      history.push(GATEWAY_CONFIG_LIST_PATH);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  const onCancelClick = () => history.push(GATEWAY_CONFIG_LIST_PATH);\n\n  return <div data-test={dataTest('views-gatewayconfigformnew')} className={styles.container}>\n            <PageHeadline>{i18n.t('Add gateway')}</PageHeadline>\n\n            <FormRow>\n                <SingleSelectField label={i18n.t('Type')} onChange={({\n        selected\n      }) => setVisibleForm(selected)} selected={visibleForm} dataTest={dataTest('views-gatewayconfigformnew-gatewaytype')}>\n                    <SingleSelectOption value={GENERIC_FORM} label={i18n.t('Generic')} />\n\n                    <SingleSelectOption value={BULK_SMS_FORM} label={i18n.t('BulkSMS')} />\n\n                    <SingleSelectOption value={CLICKATELL_FORM} label={i18n.t('Clickatell')} />\n                </SingleSelectField>\n            </FormRow>\n\n            <FormRow>\n                {visibleForm === GENERIC_FORM && <GatewayGenericForm onSubmit={onSubmit} onCancelClick={onCancelClick} />}\n\n                {visibleForm === BULK_SMS_FORM && <GatewayBulkSMSForm onSubmit={onSubmit} passwordRequired={true} onCancelClick={onCancelClick} />}\n\n                {visibleForm === CLICKATELL_FORM && <GatewayClickatellForm onSubmit={onSubmit} passwordRequired={true} onCancelClick={onCancelClick} />}\n            </FormRow>\n        </div>;\n};","import { ButtonStrip, Button } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\nimport styles from './ListActions.module.css';\nexport const ListActions = ({\n  addLabel,\n  deleteLabel,\n  dataTest: dataTestProp,\n  onAddClick,\n  onDeleteClick,\n  disableAdd,\n  disableDelete\n}) => {\n  return <div className={styles.container}>\n            <ButtonStrip data-test={dataTest(`${dataTestProp}-actions`)}>\n                <Button primary onClick={onAddClick} disabled={disableAdd} dataTest={dataTest(`${dataTestProp}-add`)}>\n                    {addLabel}\n                </Button>\n\n                <Button destructive onClick={onDeleteClick} disabled={disableDelete} dataTest={dataTest(`${dataTestProp}-delete`)}>\n                    {deleteLabel}\n                </Button>\n            </ButtonStrip>\n        </div>;\n};\nListActions.propTypes = {\n  addLabel: PropTypes.string.isRequired,\n  dataTest: PropTypes.string.isRequired,\n  deleteLabel: PropTypes.string.isRequired,\n  onAddClick: PropTypes.func.isRequired,\n  onDeleteClick: PropTypes.func.isRequired,\n  disableAdd: PropTypes.bool,\n  disableDelete: PropTypes.bool\n};","import { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\nimport styles from './Paragraph.module.css';\nexport const Paragraph = ({\n  children\n}) => <p className={styles.paragraph} data-test={dataTest('text-paragraph')}>\n        {children}\n    </p>;\nParagraph.propTypes = {\n  children: PropTypes.string.isRequired\n};","import { useHistory } from 'react-router-dom';\nimport React, { useState } from 'react';\nimport { NoticeBox, CenteredContent, CircularLoader } from '@dhis2/ui';\nimport { GATEWAY_CONFIG_FORM_NEW_PATH } from './GatewayConfigFormNew';\nimport { DeleteGatewaysConfirmationDialog, GatewayList, useDeleteGatewaysMutation, useReadGatewaysQuery, useSetDefaultGatewayMutation } from '../../gateways';\nimport { ListActions } from '../../dataList';\nimport { PageHeadline } from '../../headline';\nimport { Paragraph } from '../../text';\nimport { dataTest } from '../../dataTest';\nimport i18n from '../../locales';\nimport styles from './GatewayConfigList.module.css';\nexport const GATEWAY_CONFIG_LIST_PATH = '/sms-gateway';\nexport const GATEWAY_CONFIG_LIST_LABEL = 'Gateway configuration';\nexport const GatewayConfigList = () => {\n  const history = useHistory();\n\n  const onAddGatewayClick = () => history.push(GATEWAY_CONFIG_FORM_NEW_PATH);\n\n  const [checkedGateways, setCheckedGateways] = useState([]);\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const {\n    loading: loadingReadGateways,\n    error: errorReadGateways,\n    data,\n    refetch: refetchReadGateways\n  } = useReadGatewaysQuery();\n  const [deleteCheckedGateways, {\n    loading: loadingDelete,\n    error: errorDelete\n  }] = useDeleteGatewaysMutation();\n  const [makeGatewayDefault, {\n    loading: loadingSetDefault,\n    error: errorSetDefault\n  }] = useSetDefaultGatewayMutation();\n\n  const onDeleteClick = () => {\n    const variables = {\n      ids: checkedGateways\n    };\n    deleteCheckedGateways(variables).then(refetchReadGateways);\n    setShowDeleteDialog(false);\n  };\n\n  const onMakeDefaultClick = id => {\n    const variables = {\n      id\n    };\n    makeGatewayDefault(variables).then(refetchReadGateways);\n  };\n\n  const loading = loadingReadGateways || loadingDelete || loadingSetDefault;\n\n  if (loading) {\n    return <>\n                <PageHeadline>{GATEWAY_CONFIG_LIST_LABEL}</PageHeadline>\n                <CenteredContent>\n                    <CircularLoader />\n                </CenteredContent>\n            </>;\n  }\n\n  const error = errorReadGateways || errorDelete || errorSetDefault;\n\n  if (error) {\n    const msg = i18n.t('Something went wrong whilst performing the requested operation');\n    return <>\n                <PageHeadline>{GATEWAY_CONFIG_LIST_LABEL}</PageHeadline>\n                <NoticeBox error title={msg}>\n                    {error.message}\n                </NoticeBox>\n            </>;\n  }\n\n  const hasGateways = !!data?.gateways?.gateways?.length;\n  return <div className={styles.container} data-test={dataTest('views-gatewayconfiglist')}>\n            <PageHeadline>{GATEWAY_CONFIG_LIST_LABEL}</PageHeadline>\n\n            <Paragraph>\n                {i18n.t('An SMS gateway lets a DHIS2 instance send and receive SMS messages. Different gateway types can be added and configured below. At least one gateway is needed to send and receive SMS messages. Load balancing will use all gateways if there are multiple available. Read about gateway configuration in the DHIS2 documentation.')}\n            </Paragraph>\n\n            <ListActions addLabel={i18n.t('Add gateway')} deleteLabel={i18n.t('Delete selected')} dataTest=\"views-gatewayconfiglist\" onAddClick={onAddGatewayClick} onDeleteClick={() => setShowDeleteDialog(true)} disableAdd={loadingDelete} disableDelete={!checkedGateways.length || loadingDelete} />\n\n            {hasGateways ? <GatewayList processing={loading} checkedGateways={checkedGateways} setCheckedGateways={setCheckedGateways} gateways={data.gateways.gateways} onMakeDefaultClick={onMakeDefaultClick} /> : <NoticeBox info title={i18n.t('No gateways found')}>\n                    {i18n.t(\"It looks like there aren't any configured gateways, or they couldn't be loaded.\")}\n                </NoticeBox>}\n\n            {showDeleteDialog && <DeleteGatewaysConfirmationDialog onCancelClick={() => setShowDeleteDialog(false)} onDeleteClick={onDeleteClick} />}\n        </div>;\n};","import i18n from '@dhis2/d2-i18n';\nexport const RECEIVED_SMS_LIST_LABEL = i18n.t('Received');\nexport const RECEIVED_SMS_LIST_PATH = '/received';\nexport const STATUS_ALL = 'ALL'; // dhis-2/dhis-api/src/main/java/org/hisp/dhis/sms/incoming/SmsMessageStatus.java\n\nexport const STATUS_FILTER_OPTIONS = [{\n  value: STATUS_ALL,\n  label: i18n.t('All')\n}, {\n  value: 'FAILED',\n  label: i18n.t('Failed')\n}, {\n  value: 'INCOMING',\n  label: i18n.t('Incoming')\n}, {\n  value: 'PROCESSED',\n  label: i18n.t('Processed')\n}, {\n  value: 'PROCESSING',\n  label: i18n.t('Processing')\n}, {\n  value: 'SENT',\n  label: i18n.t('Sent')\n}, {\n  value: 'UNHANDLED',\n  label: i18n.t('Unhandled')\n}];","import React, { useContext } from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { useDataMutation } from '@dhis2/app-runtime';\nimport { Button } from '@dhis2/ui';\nimport { AlertContext } from '../../notifications';\nconst mutation = {\n  resource: 'sms/inbound',\n  type: 'delete',\n  params: ({\n    ids\n  }) => ({\n    ids\n  })\n};\n\nconst DeleteSelectedButton = ({\n  selectedIds,\n  onComplete\n}) => {\n  const {\n    addAlert\n  } = useContext(AlertContext);\n  const [mutate] = useDataMutation(mutation, {\n    onComplete,\n    onError: error => {\n      addAlert({\n        type: 'critical',\n        message: error.message\n      });\n    }\n  });\n  return <Button destructive onClick={() => mutate({\n    ids: selectedIds.join()\n  })} disabled={selectedIds.length === 0}>\n            {i18n.t('Delete selected')}\n        </Button>;\n};\n\nDeleteSelectedButton.propTypes = {\n  onComplete: PropTypes.func.isRequired,\n  selectedIds: PropTypes.arrayOf(PropTypes.string)\n};\nexport { DeleteSelectedButton };","import { useLocation } from 'react-router-dom';\nimport { STATUS_ALL } from './config';\nexport const useQueryParams = () => {\n  const searchParams = new URLSearchParams(useLocation().search);\n  return {\n    status: searchParams.get('status') || STATUS_ALL,\n    phoneNumber: searchParams.get('phoneNumber') || '',\n    page: parseInt(searchParams.get('page') || 1),\n    pageSize: parseInt(searchParams.get('pageSize') || 50)\n  };\n};","import { STATUS_ALL } from './config';\nexport const createSearchString = query => {\n  const queryString = Object.keys(query).reduce((acc, paramKey) => {\n    const paramValue = query[paramKey];\n    const isDefaultStatus = paramKey === 'status' && paramValue === STATUS_ALL;\n\n    if (paramValue && !isDefaultStatus) {\n      acc.push(`${paramKey}=${paramValue}`);\n    }\n\n    return acc;\n  }, []).join('&');\n  return `?${queryString}`;\n};","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { PropTypes } from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { dataTest } from '../../dataTest';\nimport { Button, InputFieldFF, ReactFinalForm, SingleSelectFieldFF } from '@dhis2/ui';\nimport { STATUS_FILTER_OPTIONS } from './config';\nimport { useQueryParams } from './useQueryParams';\nimport { createSearchString } from './createSearchString';\nimport styles from './Filter.module.css';\nconst {\n  Form,\n  Field\n} = ReactFinalForm;\n\nconst Filter = ({\n  loading\n}) => {\n  const {\n    status,\n    phoneNumber,\n    pageSize\n  } = useQueryParams();\n  const initialValues = {\n    status,\n    phoneNumber\n  };\n  const history = useHistory();\n\n  const navigateToFilteredUrl = ({\n    status,\n    phoneNumber\n  }) => {\n    history.push({\n      search: createSearchString({\n        status,\n        phoneNumber,\n        pageSize,\n        page: 1\n      })\n    });\n  };\n\n  return <div data-test={dataTest('views-receivedsms-filter')} className={styles.container}>\n            <Form onSubmit={navigateToFilteredUrl} initialValues={initialValues}>\n                {({\n        handleSubmit,\n        pristine\n      }) => <form onSubmit={handleSubmit} className={styles.inputStrip}>\n                        <Field name=\"status\" component={SingleSelectFieldFF} options={STATUS_FILTER_OPTIONS} label={i18n.t('Filter by status')} inputWidth=\"200px\" />\n                        <Field name=\"phoneNumber\" component={InputFieldFF} label={i18n.t('Filter by phone number')} className={styles.phoneNumberField} inputWidth=\"300px\" />\n                        <Button large type=\"submit\" disabled={loading || pristine}>\n                            {i18n.t('Filter')}\n                        </Button>\n                    </form>}\n            </Form>\n        </div>;\n};\n\nFilter.propTypes = {\n  loading: PropTypes.bool\n};\nexport { Filter };","import { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport moment from 'moment';\nimport styles from './Date.module.css';\nexport const Date = ({\n  date\n}) => {\n  const momentDate = moment(date);\n  const formatted = momentDate.format('DD MMM YYYY');\n  return <span className={styles.date}>{formatted}</span>;\n};\nDate.propTypes = {\n  date: PropTypes.string.isRequired\n};","import { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport moment from 'moment';\nimport styles from './Time.module.css';\nexport const Time = ({\n  time\n}) => {\n  const momentDate = moment(time);\n  const formatted = momentDate.format('HH:mm:ss');\n  return <span className={styles.time}>{formatted}</span>;\n};\nTime.propTypes = {\n  time: PropTypes.string.isRequired\n};","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport i18n from '@dhis2/d2-i18n';\nimport { useHistory } from 'react-router-dom';\nimport { Button, SingleSelect, SingleSelectOption } from '@dhis2/ui';\nimport { useQueryParams } from './useQueryParams';\nimport { createSearchString } from './createSearchString';\nimport styles from './Pagination.module.css';\nconst PAGE_LENGTHS = ['1', '2', '10', '20', '30', '40', '50', '100'];\n\nconst Pagination = ({\n  page,\n  pageCount,\n  pageSize,\n  total\n}) => {\n  const firstItem = Math.min((page - 1) * pageSize + 1, total);\n  const lastItem = Math.min(firstItem + pageSize - 1, total);\n  const availablePages = Array.from({\n    length: pageCount\n  }, (_x, i) => (i + 1).toString());\n  const {\n    status,\n    phoneNumber\n  } = useQueryParams();\n  const history = useHistory();\n\n  const navigateToPage = newPage => {\n    history.push({\n      search: createSearchString({\n        status,\n        phoneNumber,\n        pageSize,\n        page: newPage\n      })\n    });\n  };\n\n  const navigateToNewPageSize = ({\n    selected\n  }) => {\n    history.push({\n      search: createSearchString({\n        status,\n        phoneNumber,\n        pageSize: selected,\n        page: 1\n      })\n    });\n  };\n\n  return <div className={styles.container}>\n            <div className={styles.verticalAlign}>\n                {i18n.t('Show')}\n                <SingleSelect dense selected={pageSize.toString()} onChange={navigateToNewPageSize} className={styles.select}>\n                    {PAGE_LENGTHS.map(length => <SingleSelectOption key={length} value={length} label={length} />)}\n                </SingleSelect>\n                {i18n.t('per page')}\n            </div>\n\n            <div className={styles.verticalAlign}>\n                <span className={styles.summary}>\n                    {i18n.t('Viewing {{firstItem}}-{{lastItem}} of {{total}}', {\n          firstItem,\n          lastItem,\n          total\n        })}\n                </span>\n                <Button className={styles.buttonPrevious} small disabled={page === 1} onClick={() => navigateToPage(page - 1)}>\n                    {i18n.t('Previous')}\n                </Button>\n                <span>{i18n.t('Page')}</span>\n                <SingleSelect dense inputWidth=\"600px\" selected={page.toString()} onChange={({\n        selected\n      }) => navigateToPage(selected)} className={styles.select}>\n                    {availablePages.map(availablePage => <SingleSelectOption key={availablePage} value={availablePage} label={availablePage} />)}\n                </SingleSelect>\n                <span>{i18n.t('of {{pageCount}}', {\n          pageCount\n        })}</span>\n                <Button className={styles.buttonNext} small disabled={page === pageCount} onClick={() => navigateToPage(page + 1)}>\n                    {i18n.t('Next')}\n                </Button>\n            </div>\n        </div>;\n};\n\nPagination.propTypes = {\n  page: PropTypes.number,\n  pageCount: PropTypes.number,\n  pageSize: PropTypes.number,\n  total: PropTypes.number\n};\nexport { Pagination };","import { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport i18n from '@dhis2/d2-i18n';\nimport { Checkbox, Table, TableBody, TableCell, TableCellHead, TableFoot, TableHead, TableRow, TableRowHead } from '@dhis2/ui';\nimport { Date, Time } from '../../time';\nimport { Pagination } from './Pagination';\nimport styles from './SmsTable.module.css';\n\nconst SmsTable = ({\n  messages,\n  pager,\n  selectedIds,\n  setSelectedIds\n}) => {\n  const selectedIdSet = new Set(selectedIds);\n  const allSelected = messages.length > 0 && selectedIds.length === messages.length;\n\n  const toggle = id => {\n    if (selectedIdSet.has(id)) {\n      selectedIdSet.delete(id);\n    } else {\n      selectedIdSet.add(id);\n    }\n\n    setSelectedIds(Array.from(selectedIdSet));\n  };\n\n  const toggleAll = () => {\n    if (allSelected) {\n      setSelectedIds([]);\n    } else {\n      setSelectedIds(messages.map(({\n        id\n      }) => id));\n    }\n  };\n\n  return <Table>\n            <TableHead>\n                <TableRowHead>\n                    <TableCellHead>\n                        <Checkbox checked={allSelected} onChange={toggleAll} />\n                    </TableCellHead>\n                    <TableCellHead>{i18n.t('Message')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Phone number')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Status')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Sender')}</TableCellHead>\n                    <TableCellHead>{i18n.t('Received')}</TableCellHead>\n                </TableRowHead>\n            </TableHead>\n            <TableBody>\n                {messages.length === 0 ? <TableRow>\n                        <TableCell colSpan=\"7\" className={styles.noResults}>\n                            {i18n.t('No SMSes to display')}\n                        </TableCell>\n                    </TableRow> : messages.map(message => <TableRow key={message.id}>\n                            <TableCell>\n                                <Checkbox checked={selectedIdSet.has(message.id)} onChange={toggle.bind(null, message.id)} />\n                            </TableCell>\n                            <TableCell>{message.text}</TableCell>\n                            <TableCell>\n                                <span className={styles.originator}>\n                                    {message.originator}\n                                </span>\n                            </TableCell>\n                            <TableCell>{message.smsstatus}</TableCell>\n                            <TableCell>\n                                {message.user?.userCredentials?.username || i18n.t('Unknown')}\n                            </TableCell>\n                            <TableCell>\n                                <Date date={message.receiveddate} />\n                                {', '}\n                                <br />\n                                <Time time={message.receiveddate} />\n                            </TableCell>\n                        </TableRow>)}\n            </TableBody>\n            <TableFoot>\n                <TableRow>\n                    <TableCell colSpan=\"7\">\n                        <Pagination {...pager} />\n                    </TableCell>\n                </TableRow>\n            </TableFoot>\n        </Table>;\n};\n\nSmsTable.propTypes = {\n  messages: PropTypes.arrayOf(PropTypes.object).isRequired,\n  pager: PropTypes.PropTypes.object.isRequired,\n  selectedIds: PropTypes.arrayOf(PropTypes.string).isRequired,\n  setSelectedIds: PropTypes.func.isRequired\n};\nexport { SmsTable };","import { useDataQuery } from '@dhis2/app-service-data';\nimport { NoticeBox, CenteredContent, CircularLoader } from '@dhis2/ui';\nimport React, { useState, useEffect } from 'react';\nimport { RECEIVED_SMS_LIST_LABEL, RECEIVED_SMS_LIST_PATH, STATUS_ALL } from './config';\nimport { DeleteSelectedButton } from './DeleteSelectedButton';\nimport { Filter } from './Filter';\nimport { PageHeadline } from '../../headline';\nimport { SmsTable } from './SmsTable';\nimport { dataTest } from '../../dataTest';\nimport { useQueryParams } from './useQueryParams';\nimport i18n from '../../locales';\nimport styles from './ReceivedSmsList.module.css';\nconst query = {\n  inboundSms: {\n    resource: 'sms/inbound',\n    params: ({\n      page,\n      pageSize,\n      phoneNumber,\n      status\n    }) => {\n      const params = {\n        page,\n        pageSize,\n        fields: ['id', 'text', 'originator', 'smsstatus', 'user[userCredentials[username]]', // sender\n        'receiveddate'],\n        order: 'receiveddate:desc'\n      };\n      const filters = [];\n\n      if (phoneNumber) {\n        filters.push(`originator:ilike:${phoneNumber}`);\n      }\n\n      if (status && status !== STATUS_ALL) {\n        filters.push(`smsstatus:eq:${status}`);\n      }\n\n      const filterParams = filters.join('&');\n\n      if (filterParams) {\n        params.filter = filterParams;\n      }\n\n      return params;\n    }\n  }\n};\n\nconst ReceivedSmsList = () => {\n  const [selectedIds, setSelectedIds] = useState([]);\n  const {\n    page,\n    pageSize,\n    phoneNumber,\n    status\n  } = useQueryParams();\n  const {\n    called,\n    loading,\n    error,\n    data,\n    refetch\n  } = useDataQuery(query, {\n    lazy: true\n  });\n\n  const refetchAndClear = () => {\n    refetch();\n    setSelectedIds([]);\n  };\n\n  useEffect(() => {\n    refetch({\n      page,\n      pageSize,\n      phoneNumber,\n      status\n    });\n  }, [page, pageSize, phoneNumber, status]);\n\n  if (loading || !called) {\n    return <>\n                <PageHeadline>{RECEIVED_SMS_LIST_LABEL}</PageHeadline>\n                <CenteredContent>\n                    <CircularLoader />\n                </CenteredContent>\n            </>;\n  }\n\n  if (error) {\n    const msg = i18n.t('Something went wrong whilst loading received SMSes');\n    return <>\n                <PageHeadline>{RECEIVED_SMS_LIST_LABEL}</PageHeadline>\n                <NoticeBox error title={msg}>\n                    {error.message}\n                </NoticeBox>\n            </>;\n  }\n\n  const messages = data?.inboundSms?.inboundsmss || [];\n  return <div data-test={dataTest('views-receivedsmslist')} className={styles.container}>\n            <PageHeadline>{RECEIVED_SMS_LIST_LABEL}</PageHeadline>\n\n            <div className={styles.topBar}>\n                <Filter loading={loading} />\n                <DeleteSelectedButton onComplete={refetchAndClear} selectedIds={selectedIds} />\n            </div>\n\n            <div>\n                {<SmsTable messages={messages} pager={data.inboundSms.pager} selectedIds={selectedIds} setSelectedIds={setSelectedIds} />}\n            </div>\n        </div>;\n};\n\nexport { ReceivedSmsList, RECEIVED_SMS_LIST_LABEL, RECEIVED_SMS_LIST_PATH };","export const FIELD_COMMAND_COMPLETENESS_METHOD_NAME = 'completenessMethod';\nexport const FIELD_COMMAND_DEFAULT_MESSAGE_NAME = 'defaultMessage';\nexport const FIELD_COMMAND_ID_NAME = 'id';\nexport const FIELD_COMMAND_MORE_THAN_ONE_ORG_UNIT_MESSAGE_NAME = 'moreThanOneOrgUnitMessage';\nexport const FIELD_COMMAND_NAME_NAME = 'name';\nexport const FIELD_COMMAND_NO_USER_MESSAGE_NAME = 'noUserMessage';\nexport const FIELD_COMMAND_PARSER_NAME = 'parserType';\nexport const FIELD_COMMAND_PROGAM_NAME = 'program';\nexport const FIELD_COMMAND_PROGAM_STAGE_NAME = 'programStage';\nexport const FIELD_COMMAND_SEPARATOR_NAME = 'separator';\nexport const FIELD_COMMAND_SMS_CODES_NAME = 'smsCodes';\nexport const FIELD_COMMAND_SPECIAL_CHARS_NAME = 'specialCharacters';\nexport const FIELD_COMMAND_SUCCESS_MESSAGE_NAME = 'successMessage';\nexport const FIELD_COMMAND_USE_CURRENT_PERIOD_FOR_REPORTING_NAME = 'currentPeriodUsedForReporting';\nexport const FIELD_COMMAND_WRONG_FORMAT_MESSAGE_NAME = 'wrongFormatMessage';\nexport const FIELD_COMMAND_CONFIRM_MESSAGE_NAME = 'receivedMessage';","import { Button, ReactFinalForm } from '@dhis2/ui';\nimport React from 'react';\nimport { FIELD_COMMAND_SPECIAL_CHARS_NAME } from './fieldNames';\nimport { FormRow } from '../forms';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  useForm\n} = ReactFinalForm;\nexport const CommandsAddSpecialCharacters = () => {\n  const {\n    change,\n    getState\n  } = useForm();\n\n  const addSpecialKeyFieldsToFormState = () => {\n    const specialChars = getState().values[FIELD_COMMAND_SPECIAL_CHARS_NAME];\n    const newSpecialChars = [...specialChars, {\n      name: '',\n      value: ''\n    }];\n    change(FIELD_COMMAND_SPECIAL_CHARS_NAME, newSpecialChars);\n  };\n\n  return <FormRow>\n            <Button onClick={addSpecialKeyFieldsToFormState} dataTest={dataTest('forms-commandsaddspecialcharacters')}>\n                {i18n.t('Add special character')}\n            </Button>\n        </FormRow>;\n};","import i18n from '../locales/index';\nexport const ALL_DATAVALUE = {\n  value: 'ALL_DATAVALUE',\n  label: i18n.t('Receive all data values')\n};\nexport const AT_LEAST_ONE_DATAVALUE = {\n  value: 'AT_LEAST_ONE_DATAVALUE',\n  label: i18n.t('Receive at least one data value')\n};\nexport const DO_NOT_MARK_COMPLETE = {\n  value: 'DO_NOT_MARK_COMPLETE',\n  label: i18n.t('Do not mark as complete')\n};","import { Button, CircularLoader, ReactFinalForm } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport i18n from '../locales';\nconst {\n  useFormState\n} = ReactFinalForm;\nconst subscription = {\n  submitting: true,\n  pristine: true\n};\nexport const SaveCommandButton = ({\n  enabled\n}) => {\n  const {\n    submitting,\n    pristine\n  } = useFormState({\n    subscription\n  });\n  const disabled = pristine || submitting;\n  return <Button primary type=\"submit\" disabled={!enabled && disabled} icon={submitting ? <CircularLoader small /> : null}>\n            {i18n.t('Save command')}\n        </Button>;\n};\nSaveCommandButton.defaultProps = {\n  enabled: false\n};\nSaveCommandButton.propTypes = {\n  /*\n   * This prop is used when fields, stored as array entries\n   * in the form state, are being removed while the form\n   * is still pristine.\n   *\n   * Form some reasons, RFF doesn't recognize this as a change\n   * and keeps the form state's pristine value `true`\n   */\n  enabled: PropTypes.bool\n};","import { NoticeBox, ReactFinalForm } from '@dhis2/ui';\nimport React from 'react';\nimport { FormRow } from '../forms';\nimport i18n from '../locales';\nconst {\n  useFormState\n} = ReactFinalForm;\nconst subscription = {\n  submitError: true,\n  hasSubmitErrors: true\n};\nexport const SubmitErrors = () => {\n  const {\n    submitError,\n    hasSubmitErrors\n  } = useFormState({\n    subscription\n  });\n  if (!hasSubmitErrors) return null;\n  return <FormRow>\n            <NoticeBox error title={i18n.t('Something went wrong whilst submitting the form')}>\n                {submitError}\n            </NoticeBox>\n        </FormRow>;\n};","import { Button, ButtonStrip } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { SaveCommandButton } from './SaveCommandButton';\nimport { SubmitErrors } from './SubmitErrors';\nimport i18n from '../locales';\nimport styles from './CommandFormActions.module.css';\nexport const CommandFormActions = ({\n  enableSubmit,\n  onCancel\n}) => <div className={styles.container}>\n        <SubmitErrors />\n\n        <ButtonStrip>\n            <SaveCommandButton enabled={enableSubmit} />\n            <Button onClick={onCancel}>{i18n.t('Cancel')}</Button>\n        </ButtonStrip>\n    </div>;\nCommandFormActions.propTypes = {\n  onCancel: PropTypes.func.isRequired,\n  enableSubmit: PropTypes.bool\n};","import { Button, ButtonStrip, Modal, ModalActions, ModalContent, ModalTitle } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nexport const DeleteCommandsConfirmationDialog = ({\n  onCancelClick,\n  onDeleteClick\n}) => {\n  return <Modal dataTest={dataTest('commands-deleteconfirmationdialog')}>\n            <ModalTitle>{i18n.t('Confirm deletion')}</ModalTitle>\n            <ModalContent>\n                {i18n.t('Are you sure you want to delete the selected commands?')}\n            </ModalContent>\n            <ModalActions>\n                <ButtonStrip>\n                    <Button secondary onClick={onCancelClick} dataTest={dataTest('commands-deleteconfirmationdialog-cancel')}>\n                        {i18n.t('Cancel')}\n                    </Button>\n\n                    <Button primary onClick={onDeleteClick} dataTest={dataTest('commands-deleteconfirmationdialog-confirm')}>\n                        {i18n.t('Delete')}\n                    </Button>\n                </ButtonStrip>\n            </ModalActions>\n        </Modal>;\n};\nDeleteCommandsConfirmationDialog.propTypes = {\n  onCancelClick: PropTypes.func.isRequired,\n  onDeleteClick: PropTypes.func.isRequired\n};","/**\n * @param {string} parserType\n * @param {Object} parser\n * @param {string} parser.value\n * @returns {bool}\n */\nexport const isParserType = (parserType, parser) => parserType === parser.value;","import { useDataMutation } from '@dhis2/app-runtime';\nimport { ALERT_PARSER, EVENT_REGISTRATION_PARSER, J2ME_PARSER, KEY_VALUE_PARSER, PROGRAM_STAGE_DATAENTRY_PARSER, TRACKED_ENTITY_REGISTRATION_PARSER, UNREGISTERED_PARSER } from '../smsCommandFields';\nexport const CREATE_SMS_COMMAND_MUTATION = {\n  resource: 'smsCommands',\n  type: 'create',\n\n  /*\n   * @param {Object} args\n   * @param {string} args.parserType\n   * @param {string} args.name\n   * @param {string} args.dataset (id)\n   * @param {string} args.userGroup (id)\n   * @param {string} args.program (id)\n   * @param {string} args.programStage (id)\n   * @returns {Object}\n   */\n  data: ({\n    parserType,\n    name,\n    dataset,\n    userGroup,\n    program,\n    programStage\n  }) => {\n    if (parserType === KEY_VALUE_PARSER.value || parserType === J2ME_PARSER.value) {\n      return {\n        parserType,\n        name,\n        dataset\n      };\n    }\n\n    if (parserType === ALERT_PARSER.value || parserType === UNREGISTERED_PARSER.value) {\n      return {\n        parserType,\n        name,\n        userGroup: {\n          id: userGroup\n        }\n      };\n    }\n\n    if (parserType === TRACKED_ENTITY_REGISTRATION_PARSER.value) {\n      return {\n        parserType,\n        name,\n        program\n      };\n    }\n\n    if (parserType === PROGRAM_STAGE_DATAENTRY_PARSER.value || parserType === EVENT_REGISTRATION_PARSER.value) {\n      return {\n        parserType,\n        name,\n        program,\n        programStage\n      };\n    }\n\n    throw new Error(`You provided an unrecognized parserType \"${parserType}\"`);\n  }\n};\nexport const useCreateSmsCommandMutation = ({\n  onComplete,\n  onError\n}) => useDataMutation(CREATE_SMS_COMMAND_MUTATION, {\n  onComplete,\n  onError\n});","import { useState } from 'react';\nimport { useDataEngine } from '@dhis2/app-runtime';\nexport const DELETE_SMS_COMMAND_MUTATION = {\n  resource: 'smsCommands',\n  type: 'delete',\n  id: ({\n    id\n  }) => id\n};\n\nconst idToMutationRequestFactory = engine => id => {\n  const variables = {\n    id\n  };\n  return engine.mutate(DELETE_SMS_COMMAND_MUTATION, {\n    variables\n  });\n};\n\nexport const useDeleteSmsCommandMutation = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const engine = useDataEngine();\n  const idToMutationRequest = idToMutationRequestFactory(engine);\n\n  const onStart = () => setLoading(true);\n\n  const onDone = response => {\n    setLoading(false);\n    return response;\n  };\n\n  const onError = error => {\n    setError(error);\n    setLoading(false);\n  };\n\n  const mutate = ({\n    ids\n  }) => {\n    onStart();\n    return Promise.all(ids.map(idToMutationRequest)).then(onDone).catch(onError);\n  };\n\n  return [mutate, {\n    loading,\n    error\n  }];\n};","import { useDataQuery } from '@dhis2/app-runtime';\nexport const READ_SMS_COMMAND_PARSER_TYPE_QUERY = {\n  smsCommand: {\n    resource: 'smsCommands',\n    id: ({\n      id\n    }) => id,\n    params: {\n      fields: 'parserType',\n      paging: 'false'\n    }\n  }\n};\nexport const useReadSmsCommandParserTypeQuery = id => useDataQuery(READ_SMS_COMMAND_PARSER_TYPE_QUERY, {\n  variables: {\n    id\n  }\n});","import { useDataQuery } from '@dhis2/app-runtime';\nexport const SMS_COMMANDS_QUERY = {\n  smsCommands: {\n    resource: 'smsCommands',\n    pager: false,\n    params: ({\n      ids\n    } = {}) => ({\n      // @TODO: Why is `paging: false` not working?\n      paging: 'false',\n      fields: '*',\n      filter: ids ? `ids:in:[${ids.join(',')}]` : undefined\n    })\n  }\n};\nexport const useReadSmsCommandsQuery = () => useDataQuery(SMS_COMMANDS_QUERY);","import { FinalForm } from '@dhis2/ui';\nimport { useContext } from 'react';\nimport { useDataEngine } from '@dhis2/app-runtime';\nimport { AlertContext } from '../notifications';\nimport i18n from '../locales';\nconst {\n  FORM_ERROR\n} = FinalForm;\n\nconst identity = input => input;\n\nexport const REPLACE_SMS_COMMAND_MUTATION = {\n  resource: 'smsCommands',\n  type: 'update',\n  id: ({\n    commandId\n  }) => commandId,\n  // @TODO(non-critical):\n  //   Make this produce static object structures\n  // eslint-disable-next-line no-unused-vars\n  data: ({\n    commandId,\n    ...params\n  }) => params\n};\nexport const UPDATE_SMS_COMMAND_MUTATION = { ...REPLACE_SMS_COMMAND_MUTATION,\n  partial: true\n};\nexport const useUpdateCommand = ({\n  onAfterChange,\n  commandId,\n  formatCommand = identity,\n  replace = false\n}) => {\n  const {\n    addAlert\n  } = useContext(AlertContext);\n  const engine = useDataEngine();\n  return variables => {\n    const allVariables = {\n      variables: { ...formatCommand(variables),\n        commandId\n      }\n    };\n    const mutation = replace ? UPDATE_SMS_COMMAND_MUTATION : REPLACE_SMS_COMMAND_MUTATION;\n    return engine.mutate(mutation, allVariables).then(onAfterChange).catch(error => {\n      const isValidationError = error.type === 'access'; // Potential validation error, return it in a format final-form can handle\n\n      if (isValidationError) {\n        const fallback = 'No error message was provided';\n        const message = error.message || i18n.t(fallback);\n        return {\n          [FORM_ERROR]: message\n        };\n      } // Notify on unexpected errors\n\n\n      addAlert({\n        type: 'critical',\n        message: error.message\n      });\n    });\n  };\n};","import { SingleSelectFieldFF, ReactFinalForm, hasValue } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm; // The \"s\" from \"set\" is not capitalized\n// as the property on the java-model\n// does not have a capitalized \"s\" either\n//\n// @TODO: Create issue to make it consistent\n\nexport const FIELD_DATA_SET_NAME = 'dataset';\nexport const FieldDataSet = ({\n  dataSets,\n  loading,\n  required,\n  disabled,\n  errorText\n}) => <Field disabled={disabled} error={!!errorText} validationText={errorText} required={required} loading={loading} dataTest={dataTest('forms-fielddataset')} name={FIELD_DATA_SET_NAME} label={i18n.t('Dataset')} component={SingleSelectFieldFF} options={dataSets} validate={hasValue} format={value => value?.id || null} parse={id => ({\n  id\n})} />;\nFieldDataSet.defaultProps = {\n  disabled: false,\n  loading: false,\n  required: false,\n  errorText: ''\n};\nFieldDataSet.propTypes = {\n  dataSets: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired\n  })).isRequired,\n  disabled: PropTypes.bool,\n  errorText: PropTypes.string,\n  loading: PropTypes.bool,\n  required: PropTypes.bool\n};","import { useDataQuery } from '@dhis2/app-runtime';\nexport const DATA_SETS_QUERY = {\n  dataSets: {\n    resource: 'dataSets',\n    params: {\n      fields: ['id', 'displayName'],\n      paging: 'false'\n    }\n  }\n};\nexport const useReadDataSetsQuery = () => useDataQuery(DATA_SETS_QUERY);","import { hasValue } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { FieldDataSet } from './FieldDataSet';\nimport { useReadDataSetsQuery } from './useReadDataSetsQuery';\nexport const FieldDataSetWithAutoLoad = ({\n  required\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useReadDataSetsQuery();\n  const validate = required ? hasValue : undefined;\n\n  if (loading) {\n    return <FieldDataSet loading showLoadingStatus required={required} dataSets={[]} validate={validate} />;\n  }\n\n  if (error) {\n    return <FieldDataSet required={required} disabled programs={[]} errorText={error.message} validate={validate} />;\n  }\n\n  const {\n    dataSets\n  } = data.dataSets;\n  const options = dataSets.map(({\n    id,\n    displayName\n  }) => ({\n    label: displayName,\n    value: id\n  }));\n  return <FieldDataSet required={required} dataSets={options} validate={validate} />;\n};\nFieldDataSetWithAutoLoad.defaultProps = {\n  required: false\n};\nFieldDataSetWithAutoLoad.propTypes = {\n  required: PropTypes.bool\n};","import { useDataQuery } from '@dhis2/app-runtime';\nexport const DATA_SET_QUERY = {\n  dataSet: {\n    resource: 'dataSets',\n    id: ({\n      id\n    }) => id,\n    params: ({\n      fields = ['id', 'displayName']\n    } = {}) => ({\n      fields\n    })\n  }\n};\nexport const queryDataSet = (engine, variables) => engine.query(DATA_SET_QUERY, {\n  variables\n});\nexport const useReadDataSetQuery = id => useDataQuery(DATA_SET_QUERY, {\n  variables: {\n    id\n  }\n});","import { useDataEngine } from '@dhis2/app-runtime';\nimport { useEffect, useState } from 'react';\nexport const DATA_ELEMENTS_QUERY = {\n  dataSet: {\n    resource: 'dataSets',\n    id: ({\n      id\n    }) => id,\n    params: ({\n      filter\n    }) => ({\n      filter,\n      fields: 'dataSetElements[dataElement[id,code,displayName]]'\n    })\n  }\n};\nexport const queryDataElementsOfDataSet = (engine, variables) => engine.query(DATA_ELEMENTS_QUERY, {\n  variables\n}).then(data => {\n  const {\n    dataSet\n  } = data;\n  const {\n    dataSetElements\n  } = dataSet;\n  const formatted = dataSetElements.map(({\n    dataElement\n  }) => dataElement);\n  return formatted;\n});\nexport const useReadDataElementsOfDataSetQuery = (dataSetId, filter) => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [data, setData] = useState(null);\n  const engine = useDataEngine();\n\n  const refetch = variables => {\n    setLoading(true);\n    setError(null);\n    return queryDataElementsOfDataSet(engine, variables).then(setData).catch(setError).finally(() => setLoading(false));\n  }; // initial request\n\n\n  useEffect(() => {\n    refetch({\n      id: dataSetId,\n      filter\n    });\n  }, []);\n  return {\n    loading,\n    error,\n    data,\n    refetch\n  };\n};","import { Button, ButtonStrip, CircularLoader, Modal, ModalActions, ModalContent, ModalTitle, NoticeBox, ReactFinalForm, SingleSelectFieldFF, hasValue } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React, { useMemo } from 'react';\nimport { FIELD_DATA_SET_NAME } from '../dataSet';\nimport { FormRow } from '../forms';\nimport { useReadDataElementsOfDataSetQuery } from '../dataElement';\nimport i18n from '../locales';\nconst {\n  Field,\n  Form,\n  useForm,\n  useField\n} = ReactFinalForm;\nexport const FieldDataElementWithCategoryOptionComboFormula = ({\n  baseName,\n  combo,\n  targetFieldName,\n  onClose\n}) => {\n  const form = useForm();\n  const smsCode = useField(baseName, {\n    subscription: {\n      value: true\n    }\n  }).input.value;\n  const dataSetId = useField(FIELD_DATA_SET_NAME, {\n    subscription: {\n      value: true\n    }\n  }).input.value.id;\n  const {\n    loading,\n    error,\n    data\n  } = useReadDataElementsOfDataSetQuery(dataSetId); // Using memo so changing the form does not change the \"initialValues\"\n  // which would cause the form to update unnecessarily\n\n  const initialFormula = smsCode.formula;\n  const initialOperator = useMemo(() => initialFormula ? initialFormula[0] : '+', []);\n  const initialDataElementCode = useMemo(() => initialFormula ? initialFormula.slice(1) : '', []);\n  const initialValues = {\n    operator: initialOperator,\n    dataElementCode: initialDataElementCode\n  };\n\n  if (loading) {\n    return <Modal>\n                <CircularLoader />\n            </Modal>;\n  }\n\n  const options = data.map(dataElement => {\n    const {\n      code,\n      displayName\n    } = dataElement;\n    return {\n      value: code,\n      label: displayName\n    };\n  });\n\n  const onSubmit = values => {\n    const newFormula = `${values.operator}${values.dataElementCode}`;\n    form.change(targetFieldName, newFormula);\n    onClose();\n  };\n\n  const onRemove = () => {\n    form.change(targetFieldName, null);\n    onClose();\n  };\n\n  return <Form onSubmit={onSubmit} initialValues={initialValues}>\n            {({\n      handleSubmit\n    }) => <Modal>\n                    <form onSubmit={event => {\n        event.stopPropagation();\n        handleSubmit(event);\n      }}>\n                        <ModalTitle>\n                            {i18n.t('Formula for {{combo}}', {\n            combo\n          })}\n                        </ModalTitle>\n                        <ModalContent>\n                            <FormRow>\n                                <Field required name=\"dataElementCode\" label={i18n.t('Data element')} component={SingleSelectFieldFF} options={options} validate={hasValue} />\n                            </FormRow>\n\n                            <FormRow>\n                                <Field required name=\"operator\" label={i18n.t('formula operator')} component={SingleSelectFieldFF} initialValue=\"+\" options={[{\n              value: '+',\n              label: '+'\n            }, {\n              value: '-',\n              label: '-'\n            }]} />\n                            </FormRow>\n\n                            {error && <FormRow>\n                                    <NoticeBox error title={i18n.t('Something went wrong whilst saving')}>\n                                        {error.message}\n                                    </NoticeBox>\n                                </FormRow>}\n                        </ModalContent>\n                        <ModalActions>\n                            <ButtonStrip>\n                                <Button onClick={onRemove}>\n                                    {i18n.t('Remove')}\n                                </Button>\n\n                                <Button onClick={onClose}>\n                                    {i18n.t('Cancel')}\n                                </Button>\n\n                                <Button type=\"submit\" primary>\n                                    {i18n.t('Save')}\n                                </Button>\n                            </ButtonStrip>\n                        </ModalActions>\n                    </form>\n                </Modal>}\n        </Form>;\n};\nFieldDataElementWithCategoryOptionComboFormula.propTypes = {\n  baseName: PropTypes.string.isRequired,\n  combo: PropTypes.string.isRequired,\n  targetFieldName: PropTypes.string.isRequired,\n  onClose: PropTypes.func.isRequired\n};","import { Button, ReactFinalForm } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { useDataEngine } from '@dhis2/app-runtime';\nimport React, { useEffect, useState } from 'react';\nimport i18n from '../locales';\nimport styles from './FieldDataElementWithCategoryOptionComboAddFormulaButton.module.css';\nconst {\n  useField\n} = ReactFinalForm;\nconst DATA_ELEMENTS_QUERY = {\n  dataElement: {\n    resource: 'dataElements',\n    params: ({\n      code\n    }) => ({\n      filter: `code:eq:${code}`,\n      fields: 'displayName',\n      paging: 'false'\n    })\n  }\n};\nexport const FieldDataElementWithCategoryOptionComboAddFormulaButton = ({\n  baseName,\n  onClick,\n  disabled\n}) => {\n  const engine = useDataEngine();\n  const [called, setCalled] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [formulaDataElementName, setFormulaDataElementName] = useState('');\n  const smsCode = useField(baseName, {\n    subscription: {\n      value: true\n    }\n  }).input.value;\n  const {\n    formula,\n    code\n  } = smsCode;\n  const operator = formula && formula[0];\n  const dataElementCode = formula && formula.slice(1);\n  useEffect(() => {\n    if (!called && dataElementCode) {\n      setLoading(true);\n      setCalled(true);\n      engine.query(DATA_ELEMENTS_QUERY, {\n        variables: {\n          code: dataElementCode\n        }\n      }).then(response => {\n        const [{\n          displayName\n        }] = response.dataElement.dataElements;\n        setFormulaDataElementName(displayName);\n      }).finally(() => setLoading(false));\n    }\n  }, [dataElementCode, called]);\n  return <>\n            {loading && i18n.t('Loading formula')}\n            {code && formulaDataElementName && <span className={styles.formulaInWords}>\n                    <span className={styles.formulaInWordsLabel}>\n                        {i18n.t('Formula')}:\n                    </span>\n\n                    {code}\n                    {` ${operator} `}\n                    {formulaDataElementName}\n                </span>}\n\n            <Button small onClick={onClick} disabled={disabled}>\n                {formula ? i18n.t('Edit formula') : i18n.t('Add formula')}\n            </Button>\n        </>;\n};\nFieldDataElementWithCategoryOptionComboAddFormulaButton.propTypes = {\n  baseName: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n  disabled: PropTypes.bool\n};","import { InputFieldFF, ReactFinalForm } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React, { useState } from 'react';\nimport { DE_COC_toFormName } from '../smsCommand';\nimport { FieldDataElementWithCategoryOptionComboFormula } from './FieldDataElementWithCategoryOptionComboFormula';\nimport { FieldDataElementWithCategoryOptionComboAddFormulaButton } from './FieldDataElementWithCategoryOptionComboAddFormulaButton';\nimport i18n from '../locales';\nimport styles from './FieldDataElementWithCategoryOptionCombo.module.css';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FieldDataElementWithCategoryOptionCombo = ({\n  dataElement,\n  categoryOptionCombo\n}) => {\n  const [showFormula, setShowFormula] = useState(false);\n  const label = categoryOptionCombo ? `${dataElement.displayName} ${categoryOptionCombo.displayName}` : `${dataElement.displayName} ${i18n.t('default')}`;\n  const baseName = DE_COC_toFormName(dataElement, categoryOptionCombo);\n  const name = `${baseName}.code`;\n  const formulaName = `${baseName}.formula`;\n  return <div className={styles.container}>\n            <Field className={styles.field} label={label} name={name} subscription={{\n      value: true,\n      error: true,\n      invalid: true,\n      touched: true\n    }}>\n                {({\n        input,\n        meta,\n        ...rest\n      }) => {\n        const code = input.value;\n        return <>\n                            <InputFieldFF {...rest} className={styles.codeField} input={input} meta={meta} error={!!meta.error} />\n\n                            <FieldDataElementWithCategoryOptionComboAddFormulaButton disabled={!code} baseName={baseName} formulaFieldName={formulaName} onClick={() => setShowFormula(true)} />\n\n                            {showFormula && <FieldDataElementWithCategoryOptionComboFormula baseName={baseName} combo={label} targetFieldName={formulaName} onClose={() => setShowFormula(false)} />}\n                        </>;\n      }}\n            </Field>\n        </div>;\n};\nFieldDataElementWithCategoryOptionCombo.defaultProps = {\n  categoryOptionCombo: null,\n  formula: ''\n};\nFieldDataElementWithCategoryOptionCombo.propTypes = {\n  dataElement: PropTypes.shape({\n    displayName: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired\n  }).isRequired,\n  categoryOptionCombo: PropTypes.shape({\n    code: PropTypes.string.isRequired,\n    displayName: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired\n  })\n};","import { FIELD_COMMAND_SMS_CODES_NAME } from '../smsCommandFields';\nexport const DE_COC_toFormName = (dataElement, categoryOptionCombo) => {\n  const dataElementId = dataElement.id;\n  const cocCode = categoryOptionCombo?.code;\n  const isDefault = cocCode === 'default';\n\n  if (!cocCode || isDefault) {\n    return `${FIELD_COMMAND_SMS_CODES_NAME}.${dataElementId}`;\n  }\n\n  return `${FIELD_COMMAND_SMS_CODES_NAME}.${dataElementId}-${cocCode}`;\n};","import { NoticeBox, ReactFinalForm } from '@dhis2/ui';\nimport React from 'react';\nimport { ALL_DATAVALUE, AT_LEAST_ONE_DATAVALUE, FIELD_COMMAND_COMPLETENESS_METHOD_NAME } from '../smsCommandFields';\nimport { FormRow } from '../forms';\nimport i18n from '../locales';\nconst {\n  useField\n} = ReactFinalForm;\nexport const DataElementTimesCategoryOptionCombosCompletenessMessage = () => {\n  const {\n    input\n  } = useField(FIELD_COMMAND_COMPLETENESS_METHOD_NAME, {\n    subscription: {\n      value: true\n    }\n  });\n  const completenessMethod = input.value;\n  const title = i18n.t('Required values notice');\n\n  if (completenessMethod === ALL_DATAVALUE.value) {\n    return <FormRow>\n                <NoticeBox warning title={title}>\n                    {i18n.t(`Make sure all SMS short codes are provided when completeness method \"${ALL_DATAVALUE.label}\" is chosen, otherwise received messages will not be processed.`)}\n                </NoticeBox>\n            </FormRow>;\n  }\n\n  if (completenessMethod === AT_LEAST_ONE_DATAVALUE.value) {\n    return <FormRow>\n                <NoticeBox warning title={title}>\n                    {i18n.t(`Make sure at least one SMS short code is provided when completeness method \"${AT_LEAST_ONE_DATAVALUE.label}\" is chosen, otherwise received messages will not be processed.`)}\n                </NoticeBox>\n            </FormRow>;\n  }\n\n  return null;\n};","import { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { FieldDataElementWithCategoryOptionCombo } from './FieldDataElementWithCategoryOptionCombo';\nimport { DataElementTimesCategoryOptionCombosCompletenessMessage } from './DataElementTimesCategoryOptionCombosCompletenessMessage';\nimport { FormRow } from '../forms';\nimport { PageSubHeadline } from '../headline';\nimport i18n from '../locales';\nimport styles from './DataElementTimesCategoryOptionCombos.module.css';\nexport const DataElementTimesCategoryOptionCombos = ({\n  DE_COC_combinations\n}) => <div>\n        <PageSubHeadline>{i18n.t('SMS short codes')}</PageSubHeadline>\n\n        <DataElementTimesCategoryOptionCombosCompletenessMessage />\n\n        <div>\n            {DE_COC_combinations.map(({\n      dataElement,\n      categoryOptionCombo\n    }) => {\n      return <FormRow className={styles.formRow} key={dataElement.id + categoryOptionCombo?.id}>\n                        <FieldDataElementWithCategoryOptionCombo dataElement={dataElement} categoryOptionCombo={categoryOptionCombo} />\n                    </FormRow>;\n    })}\n        </div>\n    </div>;\nDataElementTimesCategoryOptionCombos.defaultProps = {\n  allRequired: false\n};\nDataElementTimesCategoryOptionCombos.propTypes = {\n  DE_COC_combinations: PropTypes.arrayOf(PropTypes.shape({\n    dataElement: PropTypes.shape({\n      displayName: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired\n    }).isRequired,\n    categoryOptionCombo: PropTypes.shape({\n      code: PropTypes.string.isRequired,\n      displayName: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired\n    })\n  })).isRequired\n};","import { SingleSelectFieldFF, ReactFinalForm } from '@dhis2/ui';\nimport React from 'react';\nimport { FIELD_COMMAND_COMPLETENESS_METHOD_NAME } from './fieldNames';\nimport * as completenessMethods from './completenessMethods';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nconst options = Object.values(completenessMethods);\nexport const FieldCommandCompletenessMethod = () => <Field dataTest={dataTest('forms-fielddataset')} name={FIELD_COMMAND_COMPLETENESS_METHOD_NAME} label={i18n.t('Completeness method')} component={SingleSelectFieldFF} options={options} />;","import { TextAreaFieldFF, ReactFinalForm } from '@dhis2/ui';\nimport React from 'react';\nimport { FIELD_COMMAND_CONFIRM_MESSAGE_NAME } from './fieldNames';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FieldCommandConfirmMessage = () => <Field dataTest={dataTest('commands-fieldcommandconfirmmessage')} name={FIELD_COMMAND_CONFIRM_MESSAGE_NAME} label={i18n.t('Confirm message')} component={TextAreaFieldFF} />;","import { TextAreaFieldFF, ReactFinalForm } from '@dhis2/ui';\nimport React from 'react';\nimport { FIELD_COMMAND_DEFAULT_MESSAGE_NAME } from './fieldNames';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FieldCommandDefaultMessage = () => <Field dataTest={dataTest('forms-fieldcommanddefaultmessage')} name={FIELD_COMMAND_DEFAULT_MESSAGE_NAME} label={i18n.t('Reply message if no codes are sent (only the command)')} component={TextAreaFieldFF} />;","import { TextAreaFieldFF, ReactFinalForm } from '@dhis2/ui';\nimport React from 'react';\nimport { FIELD_COMMAND_MORE_THAN_ONE_ORG_UNIT_MESSAGE_NAME } from './fieldNames';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FieldCommandMoreThanOneOrgUnitMessage = () => <Field dataTest={dataTest('forms-fieldcommandmorethanoneorgunitmessage')} name={FIELD_COMMAND_MORE_THAN_ONE_ORG_UNIT_MESSAGE_NAME} label={i18n.t('More than one orgunit message')} component={TextAreaFieldFF} />;","import { InputFieldFF, ReactFinalForm, composeValidators, hasValue, string } from '@dhis2/ui';\nimport React from 'react';\nimport { FIELD_COMMAND_NAME_NAME } from './fieldNames';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FieldCommandName = () => <Field required dataTest={dataTest('commands-fieldcommandname')} name={FIELD_COMMAND_NAME_NAME} label={i18n.t('Name')} component={InputFieldFF} validate={composeValidators(string, hasValue)} />;","import { TextAreaFieldFF, ReactFinalForm } from '@dhis2/ui';\nimport React from 'react';\nimport { FIELD_COMMAND_NO_USER_MESSAGE_NAME } from './fieldNames';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FieldCommandNoUserMessage = () => <Field dataTest={dataTest('forms-fieldcommandnousermessage')} name={FIELD_COMMAND_NO_USER_MESSAGE_NAME} label={i18n.t('No user message')} component={TextAreaFieldFF} />;","import i18n from '../locales/index';\nexport const KEY_VALUE_PARSER = {\n  value: 'KEY_VALUE_PARSER',\n  label: i18n.t('Key value parser')\n}; // @TODO: This parser is not listed in the docs,\n//        but it's listed in the original source code\n//   -> docs: https://docs.dhis2.org/master/en/dhis2_developer_manual/web-api.html#sms-command-values\n//   -> code: https://github.com/dhis2/dhis2-core/blob/79bd77ecf52051b00e3ba96eb1aca4d0a6063ed1/dhis-2/dhis-web/dhis-web-maintenance/dhis-web-maintenance-mobile/src/main/webapp/dhis-web-maintenance-mobile/smscommand/edit-sms-command.vm#L188\n\nexport const J2ME_PARSER = {\n  value: 'J2ME_PARSER',\n  label: i18n.t('J2ME parser')\n};\nexport const ALERT_PARSER = {\n  value: 'ALERT_PARSER',\n  label: i18n.t('Alert parser')\n};\nexport const UNREGISTERED_PARSER = {\n  value: 'UNREGISTERED_PARSER',\n  label: i18n.t('Unregistered parser')\n};\nexport const TRACKED_ENTITY_REGISTRATION_PARSER = {\n  value: 'TRACKED_ENTITY_REGISTRATION_PARSER',\n  label: i18n.t('Tracked entity registration parser')\n};\nexport const PROGRAM_STAGE_DATAENTRY_PARSER = {\n  value: 'PROGRAM_STAGE_DATAENTRY_PARSER',\n  label: i18n.t('Program stage data entry parser')\n};\nexport const EVENT_REGISTRATION_PARSER = {\n  value: 'EVENT_REGISTRATION_PARSER',\n  label: i18n.t('Event registration parser')\n};","import { hasValue } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { SingleSelectFieldFF, ReactFinalForm } from '@dhis2/ui';\nimport React from 'react';\nimport { FIELD_COMMAND_PARSER_NAME } from './fieldNames';\nimport * as commandTypes from './parserTypes';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nconst options = Object.values(commandTypes).sort((a, b) => {\n  if (a.label < b.label) {\n    return -1;\n  }\n\n  if (a.label > b.label) {\n    return 1;\n  }\n\n  return 0;\n});\nexport const FieldCommandParser = ({\n  disabled\n}) => <Field required disabled={disabled} dataTest={dataTest('forms-fieldcommandparser')} name={FIELD_COMMAND_PARSER_NAME} label={i18n.t('Parser')} component={SingleSelectFieldFF} options={options} validate={hasValue} />;\nFieldCommandParser.defaultProps = {\n  disabled: false\n};\nFieldCommandParser.propTypes = {\n  disabled: PropTypes.bool\n};","import { InputFieldFF, ReactFinalForm } from '@dhis2/ui';\nimport React from 'react';\nimport { FIELD_COMMAND_SEPARATOR_NAME } from './fieldNames';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FieldCommandSeparator = () => <Field dataTest={dataTest('forms-fieldcommandseparator')} name={FIELD_COMMAND_SEPARATOR_NAME} label={i18n.t('Field separator')} component={InputFieldFF} />;","import { InputFieldFF, ReactFinalForm } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { FIELD_COMMAND_SMS_CODES_NAME } from './fieldNames';\nconst {\n  Field,\n  useFormState\n} = ReactFinalForm;\nconst subscription = {\n  values: true\n};\nexport const FieldCommandSmsCode = ({\n  id,\n  displayName,\n  valueType\n}) => {\n  const {\n    values\n  } = useFormState({\n    subscription\n  });\n  const smsCode = values[FIELD_COMMAND_SMS_CODES_NAME][id];\n  /**\n   * This uses a dynamic, nested name for storing the field value in the\n   * form state. You can't submit the data as is though, since the backend\n   * expects a different shape. So I was thinking of dealing with that\n   * in the submit handler. Since you have the ids and the field value\n   * you should be able to transform it into any shape you need.\n   */\n\n  return <Field required name={`${FIELD_COMMAND_SMS_CODES_NAME}.${id}`} label={displayName} component={InputFieldFF} format={code => code?.code || ''} parse={nextCode => !smsCode ? {\n    code: nextCode,\n    trackedEntityAttribute: {\n      id,\n      displayName,\n      valueType\n    }\n  } : { ...smsCode,\n    code: nextCode\n  }} />;\n};\nFieldCommandSmsCode.propTypes = {\n  displayName: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  valueType: PropTypes.string.isRequired\n};","import { Button, Field as UiField, InputFieldFF, ReactFinalForm, hasValue } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { FIELD_COMMAND_SPECIAL_CHARS_NAME } from './fieldNames';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nimport styles from './FieldCommandSpecialCharacter.module.css';\nconst {\n  Field,\n  useForm\n} = ReactFinalForm;\nexport const FieldCommandSpecialCharacter = ({\n  index,\n  onSpecialKeyRemoved\n}) => {\n  const {\n    change,\n    getState\n  } = useForm();\n\n  const removeSpecialKeyFieldsFromFormState = () => {\n    const specialChars = getState().values[FIELD_COMMAND_SPECIAL_CHARS_NAME];\n    const newSpecialChars = [...specialChars.slice(0, index), ...specialChars.slice(index + 1)];\n    change(FIELD_COMMAND_SPECIAL_CHARS_NAME, newSpecialChars);\n    onSpecialKeyRemoved();\n  };\n\n  return <div key={index} className={styles.container}>\n            <Field required className={styles.field} dataTest={dataTest('@TODO')} label={i18n.t('Special character name')} name={`${FIELD_COMMAND_SPECIAL_CHARS_NAME}[${index}].name`} component={InputFieldFF} validate={hasValue} />\n\n            <Field required className={styles.field} dataTest={dataTest('@TODO')} label={i18n.t('Special character value')} name={`${FIELD_COMMAND_SPECIAL_CHARS_NAME}[${index}].value`} component={InputFieldFF} validate={hasValue} />\n\n            <UiField label=\"&nbsp;\">\n                <Button className={styles.button} onClick={removeSpecialKeyFieldsFromFormState}>\n                    {i18n.t('Remove')}\n                </Button>\n            </UiField>\n        </div>;\n};\nFieldCommandSpecialCharacter.propTypes = {\n  index: PropTypes.number.isRequired,\n  onSpecialKeyRemoved: PropTypes.func.isRequired\n};","import { TextAreaFieldFF, ReactFinalForm } from '@dhis2/ui';\nimport React from 'react';\nimport { FIELD_COMMAND_SUCCESS_MESSAGE_NAME } from './fieldNames';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FieldCommandSuccessMessage = () => <Field dataTest={dataTest('forms-fieldcommandsuccessmessage')} name={FIELD_COMMAND_SUCCESS_MESSAGE_NAME} label={i18n.t('Success message')} component={TextAreaFieldFF} />;","import { CheckboxFieldFF, ReactFinalForm } from '@dhis2/ui';\nimport React from 'react';\nimport { FIELD_COMMAND_USE_CURRENT_PERIOD_FOR_REPORTING_NAME } from './fieldNames';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FieldCommandUseCurrentPeriodForReporting = () => <Field type=\"checkbox\" dataTest={dataTest('forms-fieldusecurrentperiodforreporting')} name={FIELD_COMMAND_USE_CURRENT_PERIOD_FOR_REPORTING_NAME} label={i18n.t('Use current period for reporting')} component={CheckboxFieldFF} />;","import { TextAreaFieldFF, ReactFinalForm } from '@dhis2/ui';\nimport React from 'react';\nimport { FIELD_COMMAND_WRONG_FORMAT_MESSAGE_NAME } from './fieldNames';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FieldCommandWrongFormatMessage = () => <Field dataTest={dataTest('forms-fieldcommandwrongformatmessage')} name={FIELD_COMMAND_WRONG_FORMAT_MESSAGE_NAME} label={i18n.t('Wrong format message')} component={TextAreaFieldFF} />;","import { InputFieldFF, ReactFinalForm } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { FIELD_COMMAND_SMS_CODES_NAME } from './fieldNames';\nconst {\n  Field\n} = ReactFinalForm;\nexport const ProgramStageDataElements = ({\n  programStageDataElements,\n  smsCodes\n}) => {\n  return <>\n            {programStageDataElements.map(({\n      dataElement\n    }) => <Field key={dataElement.id} name={`${FIELD_COMMAND_SMS_CODES_NAME}.${dataElement.id}`} label={dataElement.displayName} component={InputFieldFF} format={value => value?.code || null} parse={code => {\n      const currentValue = smsCodes[dataElement.id];\n      const newValue = { ...currentValue,\n        code: code || '',\n        dataElement\n      };\n      return newValue;\n    }} />)}\n        </>;\n};\nProgramStageDataElements.propTypes = {\n  programStageDataElements: PropTypes.arrayOf(PropTypes.shape({\n    dataElement: PropTypes.shape({\n      displayName: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired\n    })\n  })).isRequired,\n  smsCodes: PropTypes.objectOf(PropTypes.shape({\n    dataElement: PropTypes.shape({\n      id: PropTypes.string.isRequired\n    }).isRequired,\n    code: PropTypes.string,\n    compulsory: PropTypes.bool,\n    optionId: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n  }))\n};","import { SingleSelectFieldFF, ReactFinalForm, hasValue } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FIELD_USER_GROUP_NAME = 'userGroup';\nexport const FieldUserGroup = ({\n  userGroups,\n  loading,\n  required,\n  disabled,\n  errorText\n}) => <Field disabled={disabled} error={!!errorText} validationText={errorText} required={required} loading={loading} dataTest={dataTest('forms-fielduserGroup')} name={FIELD_USER_GROUP_NAME} label={i18n.t('Usergroup')} component={SingleSelectFieldFF} options={userGroups} validate={required && hasValue} />;\nFieldUserGroup.defaultProps = {\n  disabled: false,\n  loading: false,\n  required: false,\n  errorText: ''\n};\nFieldUserGroup.propTypes = {\n  userGroups: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired\n  })).isRequired,\n  disabled: PropTypes.bool,\n  errorText: PropTypes.string,\n  loading: PropTypes.bool,\n  required: PropTypes.bool\n};","import { useDataQuery } from '@dhis2/app-runtime';\nexport const USER_GROUPS_QUERY = {\n  userGroups: {\n    resource: 'userGroups',\n    params: {\n      paging: 'false'\n    }\n  }\n};\nexport const useReadUserGroupsQuery = () => useDataQuery(USER_GROUPS_QUERY);","import { hasValue } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { FieldUserGroup } from './FieldUserGroup';\nimport { useReadUserGroupsQuery } from './useReadUserGroupsQuery';\nexport const FieldUserGroupWithAutoLoad = ({\n  required\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useReadUserGroupsQuery();\n  const validate = required ? hasValue : undefined;\n\n  if (loading) {\n    return <FieldUserGroup required={required} loading showLoadingStatus userGroups={[]} validate={validate} />;\n  }\n\n  if (error) {\n    return <FieldUserGroup required={required} disabled userGroups={[]} errorText={error.message} validate={validate} />;\n  }\n\n  const {\n    userGroups\n  } = data.userGroups;\n  const options = userGroups.map(({\n    id,\n    displayName\n  }) => ({\n    label: displayName,\n    value: id\n  }));\n  return <FieldUserGroup required={required} userGroups={options} validate={validate} />;\n};\nFieldUserGroupWithAutoLoad.defaultProps = {\n  required: false\n};\nFieldUserGroupWithAutoLoad.propTypes = {\n  required: PropTypes.bool\n};","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { ReactFinalForm, NoticeBox, CenteredContent, CircularLoader } from '@dhis2/ui';\nimport { useDataQuery } from '@dhis2/app-runtime';\nimport { FieldCommandConfirmMessage, FieldCommandName, FieldCommandParser } from '../smsCommandFields';\nimport { CommandFormActions, useUpdateCommand } from '../smsCommand';\nimport { FieldUserGroup } from '../userGroup';\nimport { FormRow } from '../forms';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Form\n} = ReactFinalForm;\nconst query = {\n  smsCommand: {\n    resource: 'smsCommands',\n    id: ({\n      commandId\n    }) => commandId,\n    params: {\n      fields: ['name', 'parserType', 'receivedMessage', 'userGroup[name,id]']\n    }\n  }\n};\nexport const CommandEditUnregisteredParserForm = ({\n  commandId,\n  onAfterChange,\n  onCancel\n}) => {\n  const updateCommand = useUpdateCommand({\n    commandId,\n    onAfterChange,\n    replace: true\n  });\n  const {\n    loading,\n    error,\n    data\n  } = useDataQuery(query, {\n    variables: {\n      commandId\n    }\n  });\n\n  if (loading) {\n    return <CenteredContent>\n                <CircularLoader />\n            </CenteredContent>;\n  }\n\n  if (error) {\n    const msg = i18n.t('Something went wrong whilst loading the sms command');\n    return <NoticeBox error title={msg}>\n                {error.message}\n            </NoticeBox>;\n  }\n\n  const {\n    name,\n    parserType,\n    receivedMessage,\n    userGroup\n  } = data.smsCommand;\n  const initialValues = {\n    name,\n    parserType,\n    receivedMessage,\n    userGroup: userGroup.id\n  };\n  const userGroups = [{\n    value: userGroup.id,\n    label: userGroup.name\n  }];\n  return <Form keepDirtyOnReinitialize onSubmit={updateCommand} initialValues={initialValues}>\n            {({\n      handleSubmit,\n      pristine\n    }) => <form onSubmit={handleSubmit} data-test={dataTest('commands-commandunregisteredparserform')}>\n                    <FormRow>\n                        <FieldCommandName />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandParser disabled />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldUserGroup disabled userGroups={userGroups} />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandConfirmMessage />\n                    </FormRow>\n\n                    <CommandFormActions onCancel={() => onCancel(pristine)} />\n                </form>}\n        </Form>;\n};\nCommandEditUnregisteredParserForm.propTypes = {\n  commandId: PropTypes.string.isRequired,\n  onAfterChange: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired\n};","import { SingleSelectFieldFF, ReactFinalForm, hasValue } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FIELD_PROGRAM_NAME = 'program';\nexport const FieldProgram = ({\n  programs,\n  loading,\n  required,\n  disabled,\n  errorText\n}) => <Field error={!!errorText} validationText={errorText} disabled={disabled} required={required} loading={loading} dataTest={dataTest('forms-fieldprogram')} name={FIELD_PROGRAM_NAME} label={i18n.t('Program')} component={SingleSelectFieldFF} options={programs} validate={required && hasValue} format={value => value?.id || null} parse={id => ({\n  id\n})} />;\nFieldProgram.defaultProps = {\n  disabled: false,\n  errorText: '',\n  loading: false,\n  required: false\n};\nFieldProgram.propTypes = {\n  programs: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired\n  })).isRequired,\n  disabled: PropTypes.bool,\n  errorText: PropTypes.string,\n  loading: PropTypes.bool,\n  required: PropTypes.bool\n};","import { useDataQuery } from '@dhis2/app-runtime';\nexport const PROGRAMS_WITH_REGISTRATION = 'PROGRAMS_WITH_REGISTRATION';\nexport const PROGRAMS_WITHOUT_REGISTRATION = 'PROGRAMS_WITHOUT_REGISTRATION';\nexport const ALL_PROGRAMS = 'ALL_PROGRAMS';\nexport const PROGRAMS_QUERY = {\n  programs: {\n    resource: 'programs',\n    params: ({\n      registration\n    }) => {\n      const params = {\n        paging: 'false'\n      };\n\n      if (registration === PROGRAMS_WITH_REGISTRATION) {\n        params.filter = 'programType:eq:WITH_REGISTRATION';\n      } else if (registration === PROGRAMS_WITHOUT_REGISTRATION) {\n        params.filter = 'programType:eq:WITHOUT_REGISTRATION';\n      }\n\n      return params;\n    }\n  }\n};\nexport const useReadProgramsQuery = registration => useDataQuery(PROGRAMS_QUERY, {\n  variables: {\n    registration\n  }\n});","import { hasValue, ReactFinalForm } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React, { useEffect } from 'react';\nimport { FIELD_PROGRAM_NAME, FieldProgram } from './FieldProgram';\nimport { ALL_PROGRAMS, useReadProgramsQuery } from './useReadProgramsQuery';\nconst {\n  useForm\n} = ReactFinalForm;\nexport const FieldProgramWithAutoLoad = ({\n  required,\n  registration\n}) => {\n  const form = useForm();\n  const validate = required ? hasValue : undefined;\n  const {\n    loading,\n    error,\n    data,\n    refetch\n  } = useReadProgramsQuery({\n    lazy: true\n  });\n  useEffect(() => {\n    const variables = {\n      registration\n    };\n    form.change(FIELD_PROGRAM_NAME, null);\n    refetch(variables);\n  }, [registration]);\n\n  if (loading) {\n    return <FieldProgram required={required} loading showLoadingStatus programs={[]} validate={validate} />;\n  }\n\n  if (error) {\n    return <FieldProgram required={required} disabled programs={[]} errorText={error.message} validate={validate} />;\n  }\n\n  const {\n    programs\n  } = data.programs;\n  const options = programs.map(({\n    id,\n    displayName\n  }) => ({\n    label: displayName,\n    value: id\n  }));\n  return <FieldProgram required={required} programs={options} validate={validate} />;\n};\nFieldProgramWithAutoLoad.defaultProps = {\n  required: false,\n  registration: ALL_PROGRAMS\n};\nFieldProgramWithAutoLoad.propTypes = {\n  registration: PropTypes.string,\n  required: PropTypes.bool\n};","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { ReactFinalForm, NoticeBox, CenteredContent, CircularLoader } from '@dhis2/ui';\nimport { useDataQuery } from '@dhis2/app-runtime';\nimport { FIELD_COMMAND_SMS_CODES_NAME, FieldCommandName, FieldCommandSeparator, FieldCommandParser, FieldCommandDefaultMessage, FieldCommandWrongFormatMessage, FieldCommandNoUserMessage, FieldCommandMoreThanOneOrgUnitMessage, FieldCommandSuccessMessage, FieldCommandSmsCode } from '../smsCommandFields';\nimport { CommandFormActions, useUpdateCommand } from '../smsCommand';\nimport { FormRow } from '../forms';\nimport { FieldProgram } from '../program';\nimport { PageSubHeadline } from '../headline';\nimport i18n from '../locales';\nconst {\n  Form\n} = ReactFinalForm;\n\nconst formatSmsCodes = updates => ({ ...updates,\n  [FIELD_COMMAND_SMS_CODES_NAME]: Object.values(updates[FIELD_COMMAND_SMS_CODES_NAME])\n});\n\nconst query = {\n  smsCommand: {\n    resource: 'smsCommands',\n    id: ({\n      commandId\n    }) => commandId,\n    params: {\n      fields: ['name', 'parserType', 'separator', 'defaultMessage', 'wrongFormatMessage', 'noUserMessage', 'moreThanOneOrgUnitMessage', 'successMessage', // The queries below should be reduced to only the data we need\n      'program[id,displayName,programTrackedEntityAttributes[trackedEntityAttribute[:all,id,displayName]]]', 'smsCodes[:all,trackedEntityAttribute[id,displayName,valueType]]']\n    }\n  }\n};\nexport const CommandEditTrackedEntityRegistrationParserForm = ({\n  commandId,\n  onAfterChange,\n  onCancel\n}) => {\n  const updateCommand = useUpdateCommand({\n    commandId,\n    onAfterChange,\n    formatCommand: formatSmsCodes //partial: true,\n\n  });\n  const {\n    loading,\n    error,\n    data\n  } = useDataQuery(query, {\n    variables: {\n      commandId\n    }\n  });\n\n  if (loading) {\n    return <CenteredContent>\n                <CircularLoader />\n            </CenteredContent>;\n  }\n\n  if (error) {\n    const msg = i18n.t('Something went wrong whilst loading the sms command');\n    return <NoticeBox error title={msg}>\n                {error.message}\n            </NoticeBox>;\n  }\n\n  const {\n    name,\n    parserType,\n    program,\n    separator,\n    defaultMessage,\n    wrongFormatMessage,\n    noUserMessage,\n    moreThanOneOrgUnitMessage,\n    successMessage,\n    smsCodes: smsCodesOriginal\n  } = data.smsCommand;\n  const smsCodes = smsCodesOriginal.reduce((curSmsCodes, smsCode) => ({ ...curSmsCodes,\n    [smsCode.trackedEntityAttribute.id]: smsCode\n  }), {});\n  const initialValues = {\n    name,\n    parserType,\n    program,\n    separator,\n    defaultMessage,\n    wrongFormatMessage,\n    noUserMessage,\n    moreThanOneOrgUnitMessage,\n    successMessage,\n    smsCodes\n  };\n  const selectedProgramOption = {\n    value: program.id,\n    label: program.displayName\n  };\n  /**\n   * Create usable data for the dynamic fields\n   */\n  // The tracked entity attributes here have the right order for the fields\n\n  const trackedEntityAttributes = program.programTrackedEntityAttributes.map(({\n    trackedEntityAttribute\n  }) => trackedEntityAttribute); // Creating an array with only the data we need to render our dynamic form fields\n\n  const dynamicFields = trackedEntityAttributes.map(trackedEntityAttribute => {\n    const {\n      id,\n      displayName,\n      valueType\n    } = trackedEntityAttribute;\n    const merged = {\n      id,\n      displayName,\n      valueType\n    };\n    const smsCode = smsCodes[id];\n\n    if (smsCode) {\n      // This contains the actual value of the field\n      merged.initialValue = smsCode.code;\n    }\n\n    return merged;\n  });\n  return <Form keepDirtyOnReinitialize onSubmit={updateCommand} initialValues={initialValues}>\n            {({\n      handleSubmit,\n      pristine\n    }) => <form onSubmit={handleSubmit}>\n                    <FormRow>\n                        <FieldCommandName />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandParser disabled />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldProgram disabled programs={[selectedProgramOption]} />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandSeparator />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandDefaultMessage />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandWrongFormatMessage />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandNoUserMessage />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandMoreThanOneOrgUnitMessage />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandSuccessMessage />\n                    </FormRow>\n\n                    <PageSubHeadline>\n                        {i18n.t('SMS short codes')}\n                    </PageSubHeadline>\n\n                    {dynamicFields.map(dynamicField => {\n        // I assume this should switch field types based on `valueType`\n        // which can be 'TEXT', 'NUMBER', etc. Currently this renders\n        // a regular input for everything.\n        return <FormRow key={dynamicField.id}>\n                                <FieldCommandSmsCode id={dynamicField.id} displayName={dynamicField.displayName} valueType={dynamicField.valueType} />\n                            </FormRow>;\n      })}\n\n                    <CommandFormActions onCancel={() => onCancel(pristine)} />\n                </form>}\n        </Form>;\n};\nCommandEditTrackedEntityRegistrationParserForm.propTypes = {\n  commandId: PropTypes.string.isRequired,\n  onAfterChange: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired\n};","import { SingleSelectFieldFF, ReactFinalForm, hasValue } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Field\n} = ReactFinalForm;\nexport const FIELD_PROGRAM_STAGE_NAME = 'programStage';\nexport const FieldProgramStage = ({\n  programStages,\n  disabled,\n  loading,\n  initialValue,\n  required,\n  errorText\n}) => <Field component={SingleSelectFieldFF} dataTest={dataTest('forms-fieldprogramStage')} disabled={disabled} error={!!errorText} format={value => value?.id || null} iinitialValue={initialValue} label={i18n.t('Program stage')} loading={loading} name={FIELD_PROGRAM_STAGE_NAME} options={programStages} parse={id => ({\n  id\n})} required={required} validate={required && hasValue} validationText={errorText} />;\nFieldProgramStage.defaultProps = {\n  disabled: false,\n  loading: false,\n  required: false,\n  errorText: ''\n};\nFieldProgramStage.propTypes = {\n  programStages: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired\n  })).isRequired,\n  disabled: PropTypes.bool,\n  errorText: PropTypes.string,\n  initialValue: PropTypes.string,\n  loading: PropTypes.bool,\n  required: PropTypes.bool\n};","import { useDataQuery } from '@dhis2/app-runtime';\nexport const PROGRAM_STAGES_QUERY = {\n  programStages: {\n    resource: 'programStages',\n    params: ({\n      programId\n    }) => ({\n      paging: 'false',\n      filter: programId ? `program.id:eq:${programId}` : undefined\n    })\n  }\n};\nexport const useReadProgramStagesQuery = ({\n  programId,\n  lazy\n}) => useDataQuery(PROGRAM_STAGES_QUERY, {\n  variables: {\n    programId\n  },\n  lazy\n});","import { hasValue, ReactFinalForm } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React, { useEffect } from 'react';\nimport { EVENT_REGISTRATION_PARSER } from '../smsCommandFields';\nimport { FIELD_PROGRAM_STAGE_NAME, FieldProgramStage } from './FieldProgramStage';\nimport { useReadProgramStagesQuery } from './useReadProgramStagesQuery';\nconst {\n  useForm\n} = ReactFinalForm;\nexport const FieldProgramStageWithLoadingStates = ({\n  parserType,\n  programId,\n  disabled,\n  required\n}) => {\n  const form = useForm();\n  const {\n    loading,\n    error,\n    data,\n    refetch\n  } = useReadProgramStagesQuery({\n    lazy: true\n  });\n  const validate = required ? hasValue : undefined;\n  useEffect(() => {\n    if (programId) refetch({\n      programId\n    });\n  }, [programId]);\n  useEffect(() => {\n    const isEventRegistrationParser = parserType === EVENT_REGISTRATION_PARSER.value;\n    const programStageValueForEventRegistration = {\n      id: data?.programStages?.programStages[0]?.id\n    };\n    const initialValue = isEventRegistrationParser ? programStageValueForEventRegistration : undefined;\n    form.change(FIELD_PROGRAM_STAGE_NAME, initialValue);\n  }, [parserType, data?.programStages?.programStages]);\n\n  if (loading) {\n    return <FieldProgramStage loading disabled={disabled} required={required} programStages={[]} validate={validate} />;\n  }\n\n  if (error) {\n    return <FieldProgramStage disabled errorText={error.message} required={required} programStages={[]} validate={validate} />;\n  }\n\n  if (!programId || !data) {\n    return <FieldProgramStage disabled required={required} programStages={[]} validate={validate} />;\n  }\n\n  const programStages = data?.programStages?.programStages || [];\n  const options = programStages.map(({\n    id,\n    displayName\n  }) => ({\n    label: displayName,\n    value: id\n  }));\n  return <FieldProgramStage disabled={disabled} required={required} programStages={options} />;\n};\nFieldProgramStageWithLoadingStates.defaultProps = {\n  disabled: false,\n  required: false\n};\nFieldProgramStageWithLoadingStates.propTypes = {\n  parserType: PropTypes.string.isRequired,\n  programId: PropTypes.string.isRequired,\n  disabled: PropTypes.bool,\n  required: PropTypes.bool\n};","import { useDataQuery } from '@dhis2/app-runtime';\nconst READ_SMS_COMMAND_PROGRAM_STAGE_DATA_ENTRY_PARSER_QUERY = {\n  smsCommand: {\n    resource: 'smsCommands',\n    id: ({\n      id\n    }) => id,\n    params: {\n      fields: ['*', 'program[id,displayName]', 'programStage[id,displayName,programStageDataElements[dataElement[id,displayName]]]'],\n      paging: 'false'\n    }\n  }\n};\nexport const useReadSmsCommandProgramStageDataEntryParserQuery = programStageId => useDataQuery(READ_SMS_COMMAND_PROGRAM_STAGE_DATA_ENTRY_PARSER_QUERY, {\n  variables: {\n    id: programStageId\n  }\n});","import { CenteredContent, CircularLoader, NoticeBox, ReactFinalForm } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { FIELD_COMMAND_DEFAULT_MESSAGE_NAME, FIELD_COMMAND_MORE_THAN_ONE_ORG_UNIT_MESSAGE_NAME, FIELD_COMMAND_NAME_NAME, FIELD_COMMAND_NO_USER_MESSAGE_NAME, FIELD_COMMAND_PARSER_NAME, FIELD_COMMAND_PROGAM_NAME, FIELD_COMMAND_PROGAM_STAGE_NAME, FIELD_COMMAND_SEPARATOR_NAME, FIELD_COMMAND_SMS_CODES_NAME, FIELD_COMMAND_SUCCESS_MESSAGE_NAME, FIELD_COMMAND_WRONG_FORMAT_MESSAGE_NAME, FieldCommandDefaultMessage, FieldCommandMoreThanOneOrgUnitMessage, FieldCommandName, FieldCommandNoUserMessage, FieldCommandParser, FieldCommandSeparator, FieldCommandSuccessMessage, FieldCommandWrongFormatMessage, PROGRAM_STAGE_DATAENTRY_PARSER, ProgramStageDataElements } from '../smsCommandFields';\nimport { CommandFormActions, useUpdateCommand } from '../smsCommand';\nimport { FieldProgram } from '../program';\nimport { FieldProgramStage } from '../programStage';\nimport { FormRow } from '../forms';\nimport { PageSubHeadline } from '../headline';\nimport { dataTest } from '../dataTest';\nimport { useReadSmsCommandProgramStageDataEntryParserQuery } from './useReadSmsCommandProgramStageDataEntryParserQuery';\nimport i18n from '../locales';\nconst {\n  Form\n} = ReactFinalForm;\n\nconst getInitialFormState = command => {\n  const name = command[FIELD_COMMAND_NAME_NAME];\n  const program = command[FIELD_COMMAND_PROGAM_NAME];\n  const programStage = command[FIELD_COMMAND_PROGAM_STAGE_NAME];\n  const separator = command[FIELD_COMMAND_SEPARATOR_NAME];\n  const defaultMessage = command[FIELD_COMMAND_DEFAULT_MESSAGE_NAME];\n  const wrongFormatMessage = command[FIELD_COMMAND_WRONG_FORMAT_MESSAGE_NAME];\n  const noUserMessage = command[FIELD_COMMAND_NO_USER_MESSAGE_NAME];\n  const moreThanOneOrgUnitMessage = command[FIELD_COMMAND_MORE_THAN_ONE_ORG_UNIT_MESSAGE_NAME];\n  const successMessage = command[FIELD_COMMAND_SUCCESS_MESSAGE_NAME];\n  const smsCodes = command[FIELD_COMMAND_SMS_CODES_NAME].reduce((curSmsCodes, smsCode) => ({ ...curSmsCodes,\n    [smsCode.dataElement.id]: smsCode\n  }), {});\n  return {\n    [FIELD_COMMAND_NAME_NAME]: name,\n    [FIELD_COMMAND_PARSER_NAME]: PROGRAM_STAGE_DATAENTRY_PARSER.value,\n    [FIELD_COMMAND_PROGAM_NAME]: program,\n    [FIELD_COMMAND_PROGAM_STAGE_NAME]: programStage,\n    [FIELD_COMMAND_SEPARATOR_NAME]: separator,\n    [FIELD_COMMAND_DEFAULT_MESSAGE_NAME]: defaultMessage,\n    [FIELD_COMMAND_WRONG_FORMAT_MESSAGE_NAME]: wrongFormatMessage,\n    [FIELD_COMMAND_NO_USER_MESSAGE_NAME]: noUserMessage,\n    [FIELD_COMMAND_MORE_THAN_ONE_ORG_UNIT_MESSAGE_NAME]: moreThanOneOrgUnitMessage,\n    [FIELD_COMMAND_SUCCESS_MESSAGE_NAME]: successMessage,\n    [FIELD_COMMAND_SMS_CODES_NAME]: smsCodes\n  };\n};\n\nconst formatSmsCodes = updates => ({ ...updates,\n  [FIELD_COMMAND_SMS_CODES_NAME]: Object.values(updates[FIELD_COMMAND_SMS_CODES_NAME])\n});\n\nexport const CommandEditProgramStageDataEntryParserForm = ({\n  commandId,\n  onAfterChange,\n  onCancel\n}) => {\n  const {\n    error: loadingCommandError,\n    data: commandData\n  } = useReadSmsCommandProgramStageDataEntryParserQuery(commandId);\n  const command = commandData?.smsCommand;\n  const programStageDataElements = command?.programStage.programStageDataElements;\n  const updateCommand = useUpdateCommand({\n    commandId,\n    onAfterChange,\n    formatCommand: formatSmsCodes\n  });\n\n  if (loadingCommandError) {\n    const msg = i18n.t(\"Something went wrong whilst loading the command's details\");\n    return <NoticeBox error title={msg}>\n                {loadingCommandError.message}\n            </NoticeBox>;\n  }\n\n  if (!command) {\n    return <CenteredContent>\n                <CircularLoader />\n            </CenteredContent>;\n  }\n\n  const initialValues = getInitialFormState(command);\n  const selectedProgramOption = {\n    value: command.program.id,\n    label: command.program.displayName\n  };\n  const selectedProgramStageOption = {\n    value: command.programStage.id,\n    label: command.programStage.displayName\n  };\n  return <Form keepDirtyOnReinitialize onSubmit={updateCommand} initialValues={initialValues}>\n            {({\n      handleSubmit,\n      values,\n      pristine\n    }) => <form onSubmit={handleSubmit} data-test={dataTest('commands-commandeditprogramstagedataentryparserform')}>\n                    <FormRow>\n                        <FieldCommandName />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandParser disabled />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldProgram disabled programs={[selectedProgramOption]} />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldProgramStage disabled programStages={[selectedProgramStageOption]} />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandSeparator />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandDefaultMessage />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandWrongFormatMessage />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandNoUserMessage />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandMoreThanOneOrgUnitMessage />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandSuccessMessage />\n                    </FormRow>\n\n                    <PageSubHeadline>\n                        {i18n.t('SMS short codes')}\n                    </PageSubHeadline>\n\n                    {programStageDataElements && <FormRow>\n                            <ProgramStageDataElements programStageDataElements={programStageDataElements} smsCodes={values[FIELD_COMMAND_SMS_CODES_NAME]} />\n                        </FormRow>}\n\n                    <CommandFormActions onCancel={() => onCancel(pristine)} />\n                </form>}\n        </Form>;\n};\nCommandEditProgramStageDataEntryParserForm.propTypes = {\n  commandId: PropTypes.string.isRequired,\n  onAfterChange: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired\n};","import { useDataQuery } from '@dhis2/app-runtime'; // @TODO(non-critical):\n//   The response for key value parser\n//   does contain the information for \"Data element category combination\".\n//   But it does not contain the id of the category option combo,\n//   only the data element and a code.\n\nexport const READ_SMS_COMMAND_KEY_VALUE_PARSER_QUERY = {\n  smsCommand: {\n    resource: 'smsCommands',\n    id: ({\n      id\n    }) => id,\n    params: {\n      fields: ['*', 'dataset[id,displayName,dataSetElements[dataElement[id,displayName,categoryCombo[categoryOptionCombos[id,displayName,code]]]]'],\n      paging: 'false'\n    }\n  }\n};\nexport const useReadSmsCommandWithDataSetQuery = id => useDataQuery(READ_SMS_COMMAND_KEY_VALUE_PARSER_QUERY, {\n  variables: {\n    id\n  }\n});","import { CenteredContent, CircularLoader, NoticeBox, ReactFinalForm } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React, { useState } from 'react';\nimport { ALL_DATAVALUE, CommandsAddSpecialCharacters, DataElementTimesCategoryOptionCombos, FIELD_COMMAND_COMPLETENESS_METHOD_NAME, FIELD_COMMAND_DEFAULT_MESSAGE_NAME, FIELD_COMMAND_MORE_THAN_ONE_ORG_UNIT_MESSAGE_NAME, FIELD_COMMAND_NAME_NAME, FIELD_COMMAND_NO_USER_MESSAGE_NAME, FIELD_COMMAND_PARSER_NAME, FIELD_COMMAND_SEPARATOR_NAME, FIELD_COMMAND_SMS_CODES_NAME, FIELD_COMMAND_SPECIAL_CHARS_NAME, FIELD_COMMAND_SUCCESS_MESSAGE_NAME, FIELD_COMMAND_USE_CURRENT_PERIOD_FOR_REPORTING_NAME, FIELD_COMMAND_WRONG_FORMAT_MESSAGE_NAME, FieldCommandCompletenessMethod, FieldCommandDefaultMessage, FieldCommandMoreThanOneOrgUnitMessage, FieldCommandName, FieldCommandNoUserMessage, FieldCommandParser, FieldCommandSeparator, FieldCommandSpecialCharacter, FieldCommandSuccessMessage, FieldCommandUseCurrentPeriodForReporting, FieldCommandWrongFormatMessage, KEY_VALUE_PARSER } from '../smsCommandFields';\nimport { CommandFormActions, getSmsCodeDuplicates, useUpdateCommand } from '../smsCommand';\nimport { FIELD_DATA_SET_NAME, FieldDataSet } from '../dataSet';\nimport { FormRow } from '../forms';\nimport { PageSubHeadline } from '../headline';\nimport { useReadSmsCommandWithDataSetQuery } from './useReadSmsCommandWithDataSetQuery';\nimport i18n from '../locales';\nconst {\n  Form,\n  FormSpy\n} = ReactFinalForm;\n\nconst getInitialFormState = (command, initialCompletenessMethod) => {\n  const name = command[FIELD_COMMAND_NAME_NAME];\n  const parserType = KEY_VALUE_PARSER.value;\n  const dataSetId = {\n    id: command[FIELD_DATA_SET_NAME].id\n  };\n  const separator = command[FIELD_COMMAND_SEPARATOR_NAME];\n  const completenessMethod = initialCompletenessMethod || command[FIELD_COMMAND_COMPLETENESS_METHOD_NAME] || ALL_DATAVALUE.value;\n  const useCurrentPeriodForReporting = command[FIELD_COMMAND_USE_CURRENT_PERIOD_FOR_REPORTING_NAME];\n  const defaultMessage = command[FIELD_COMMAND_DEFAULT_MESSAGE_NAME];\n  const wrongFormatMessage = command[FIELD_COMMAND_WRONG_FORMAT_MESSAGE_NAME];\n  const noUserMessage = command[FIELD_COMMAND_NO_USER_MESSAGE_NAME];\n  const moreThanOneOrgUnitMessage = command[FIELD_COMMAND_MORE_THAN_ONE_ORG_UNIT_MESSAGE_NAME];\n  const successMessage = command[FIELD_COMMAND_SUCCESS_MESSAGE_NAME];\n  const smsCodes = command[FIELD_COMMAND_SMS_CODES_NAME].reduce((acc, {\n    code,\n    compulsory,\n    formula,\n    optionId,\n    dataElement\n  }) => {\n    const key = optionId < 10 ? dataElement.id : `${dataElement.id}-${optionId}`;\n    const smsCode = {\n      code,\n      compulsory,\n      optionId\n    };\n\n    if (formula) {\n      smsCode.formula = formula;\n    }\n\n    return { ...acc,\n      [key]: smsCode\n    };\n  }, {});\n  const specialCharacters = command[FIELD_COMMAND_SPECIAL_CHARS_NAME] || [];\n  return {\n    [FIELD_COMMAND_NAME_NAME]: name,\n    [FIELD_COMMAND_PARSER_NAME]: parserType,\n    [FIELD_DATA_SET_NAME]: dataSetId,\n    [FIELD_COMMAND_SEPARATOR_NAME]: separator,\n    [FIELD_COMMAND_COMPLETENESS_METHOD_NAME]: completenessMethod,\n    [FIELD_COMMAND_USE_CURRENT_PERIOD_FOR_REPORTING_NAME]: useCurrentPeriodForReporting,\n    [FIELD_COMMAND_DEFAULT_MESSAGE_NAME]: defaultMessage,\n    [FIELD_COMMAND_WRONG_FORMAT_MESSAGE_NAME]: wrongFormatMessage,\n    [FIELD_COMMAND_NO_USER_MESSAGE_NAME]: noUserMessage,\n    [FIELD_COMMAND_MORE_THAN_ONE_ORG_UNIT_MESSAGE_NAME]: moreThanOneOrgUnitMessage,\n    [FIELD_COMMAND_SUCCESS_MESSAGE_NAME]: successMessage,\n    smsCodes,\n    specialCharacters\n  };\n};\n\nconst globalValidate = values => {\n  let hasErrors = false;\n  const errors = {};\n  const smsCodesFormState = values[FIELD_COMMAND_SMS_CODES_NAME];\n  const smsCodes = smsCodesFormState ? Object.entries(smsCodesFormState) : [];\n  const smsCodesWithValue = smsCodes.filter(([_, {\n    code\n  }]) => code); //eslint-disable-line no-unused-vars\n\n  if (smsCodesWithValue.length) {\n    const duplicates = getSmsCodeDuplicates(smsCodesWithValue);\n\n    if (duplicates.length) {\n      hasErrors = true;\n      const duplicateErrors = {};\n      duplicates.forEach(duplicate => {\n        duplicateErrors[duplicate] = {\n          code: i18n.t('Duplicate value!')\n        };\n      });\n      errors[FIELD_COMMAND_SMS_CODES_NAME] = errors[FIELD_COMMAND_SMS_CODES_NAME] || {};\n      Object.assign(errors[FIELD_COMMAND_SMS_CODES_NAME], duplicateErrors);\n    }\n  }\n\n  return hasErrors ? errors : undefined;\n};\n\nconst formatSmsCodes = updates => {\n  const smsCodes = updates[FIELD_COMMAND_SMS_CODES_NAME];\n  const formattedSmsCodes = Object.entries(smsCodes).map(([id, {\n    code,\n    formula,\n    compulsory,\n    optionId\n  }]) => {\n    const [dataElementId] = id.split('-');\n    const formattedSmsCode = {\n      code,\n      compulsory,\n      dataElement: {\n        id: dataElementId\n      }\n    };\n\n    if (formula) {\n      formattedSmsCode.formula = formula;\n    }\n\n    if (optionId) {\n      formattedSmsCode.optionId = optionId;\n    }\n\n    return formattedSmsCode;\n  });\n  return { ...updates,\n    [FIELD_COMMAND_SMS_CODES_NAME]: formattedSmsCodes\n  };\n};\n\nconst FormComponent = ({\n  DE_COC_combination_data,\n  dataTest,\n  handleSubmit,\n  hasSpecialChars,\n  onCancel,\n  pristine,\n  selectedDataSetOption\n}) => {\n  const [specialKeyRemoved, setSpecialKeyRemoved] = useState(false);\n\n  const onSpecialKeyRemoved = () => setSpecialKeyRemoved(true);\n\n  const enableSubmit = specialKeyRemoved && hasSpecialChars;\n  return <form onSubmit={handleSubmit} data-test={dataTest}>\n            <FormRow>\n                <FieldCommandName />\n            </FormRow>\n\n            <FormRow>\n                <FieldCommandParser disabled />\n            </FormRow>\n\n            <FormRow>\n                <FieldDataSet disabled dataSets={[selectedDataSetOption]} />\n            </FormRow>\n\n            <FormRow>\n                <FieldCommandCompletenessMethod />\n            </FormRow>\n\n            <FormRow>\n                <FieldCommandUseCurrentPeriodForReporting />\n            </FormRow>\n\n            <FormRow>\n                <FieldCommandSeparator />\n            </FormRow>\n\n            <FormRow>\n                <FieldCommandDefaultMessage />\n            </FormRow>\n\n            <FormRow>\n                <FieldCommandWrongFormatMessage />\n            </FormRow>\n\n            <FormRow>\n                <FieldCommandNoUserMessage />\n            </FormRow>\n\n            <FormRow>\n                <FieldCommandMoreThanOneOrgUnitMessage />\n            </FormRow>\n\n            <FormRow>\n                <FieldCommandSuccessMessage />\n            </FormRow>\n\n            {DE_COC_combination_data && <DataElementTimesCategoryOptionCombos DE_COC_combinations={DE_COC_combination_data} />}\n\n            <PageSubHeadline>{i18n.t('Special characters')}</PageSubHeadline>\n\n            <FormSpy subscription={{\n      values: true\n    }}>\n                {({\n        values\n      }) => <>\n                        {values[FIELD_COMMAND_SPECIAL_CHARS_NAME].map((_, index) => <FormRow key={index}>\n                                    <FieldCommandSpecialCharacter index={index} onSpecialKeyRemoved={onSpecialKeyRemoved} />\n                                </FormRow>)}\n                    </>}\n            </FormSpy>\n\n            <CommandsAddSpecialCharacters />\n\n            <CommandFormActions enableSubmit={enableSubmit} onCancel={() => onCancel(pristine)} />\n        </form>;\n};\n\nFormComponent.propTypes = {\n  dataTest: PropTypes.string.isRequired,\n  handleSubmit: PropTypes.func.isRequired,\n  hasSpecialChars: PropTypes.bool.isRequired,\n  pristine: PropTypes.bool.isRequired,\n  onCancel: PropTypes.func.isRequired,\n  DE_COC_combination_data: PropTypes.arrayOf(PropTypes.shape({\n    dataElement: PropTypes.shape({\n      displayName: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired\n    }).isRequired,\n    categoryOptionCombo: PropTypes.shape({\n      code: PropTypes.string.isRequired,\n      displayName: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired\n    })\n  })),\n  selectedDataSetOption: PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired\n  })\n};\nexport const CommandEditWithDataSetForm = ({\n  commandId,\n  onAfterChange,\n  dataTest,\n  initialCompletenessMethod,\n  onCancel\n}) => {\n  const {\n    error: loadingCommandError,\n    data: commandData\n  } = useReadSmsCommandWithDataSetQuery(commandId);\n  const command = commandData?.smsCommand;\n  const updateCommand = useUpdateCommand({\n    commandId,\n    onAfterChange,\n    formatCommand: formatSmsCodes\n  });\n\n  if (loadingCommandError) {\n    const msg = i18n.t(\"Something went wrong whilst loading the command's details\");\n    return <NoticeBox error title={msg}>\n                {loadingCommandError.message}\n            </NoticeBox>;\n  }\n\n  if (!command) {\n    return <CenteredContent>\n                <CircularLoader />\n            </CenteredContent>;\n  }\n\n  const selectedDataSetOption = {\n    value: command[FIELD_DATA_SET_NAME].id,\n    label: command[FIELD_DATA_SET_NAME].displayName\n  };\n  const initialValues = getInitialFormState(command, initialCompletenessMethod);\n  const DE_COC_combination_data = command.dataset.dataSetElements.reduce((curCombinations, {\n    dataElement\n  }) => {\n    const categoryOptionCombo = dataElement.categoryCombo?.categoryOptionCombo;\n\n    if (!categoryOptionCombo) {\n      return [...curCombinations, {\n        dataElement\n      }];\n    }\n\n    const combos = categoryOptionCombo.map(COC => ({\n      dataElement,\n      categoryOptionCombo: COC\n    }));\n    return [...curCombinations, ...combos];\n  }, []);\n  const specialChars = initialValues[FIELD_COMMAND_SPECIAL_CHARS_NAME];\n  const hasSpecialChars = !!specialChars?.length;\n  return <Form keepDirtyOnReinitialize onSubmit={updateCommand} initialValues={initialValues} validate={globalValidate} subscription={{\n    pristine: true\n  }}>\n            {({\n      handleSubmit,\n      pristine,\n      dirty\n    }) => <FormComponent DE_COC_combination_data={DE_COC_combination_data} dataTest={dataTest} dirty={dirty} handleSubmit={handleSubmit} pristine={pristine} hasSpecialChars={hasSpecialChars} selectedDataSetOption={selectedDataSetOption} onCancel={onCancel} />}\n        </Form>;\n};\nCommandEditWithDataSetForm.propTypes = {\n  commandId: PropTypes.string.isRequired,\n  onAfterChange: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired,\n  dataTest: PropTypes.string,\n  initialCompletenessMethod: PropTypes.string\n};","export const getSmsCodeDuplicates = smsCodes => {\n  const duplicates = smsCodes.reduce((curDuplicates, smsCode, index) => {\n    const [name, code] = smsCode;\n    const errorAlreadyPresent = curDuplicates.includes(name);\n\n    if (errorAlreadyPresent) {\n      return curDuplicates;\n    }\n\n    const potentialDuplicates = smsCodes.filter( // eslint-disable-next-line no-unused-vars\n    ([_, curCode], curIndex) => {\n      return curCode.code === code.code && curIndex !== index;\n    });\n    const noDuplicates = !potentialDuplicates.length;\n\n    if (noDuplicates) {\n      return curDuplicates;\n    }\n\n    const newlyFoundDuplicates = potentialDuplicates.reduce((curWithCodeDuplicates, [curName]) => {\n      return [...curWithCodeDuplicates, curName];\n    }, [name]);\n    return [...curDuplicates, ...newlyFoundDuplicates];\n  }, []);\n  return duplicates;\n};","import { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { CommandEditWithDataSetForm } from '../smsCommandWithDataSet';\nimport { dataTest } from '../dataTest';\nexport const CommandEditKeyValueParserForm = ({\n  commandId,\n  onAfterChange,\n  onCancel\n}) => <CommandEditWithDataSetForm dataTest={dataTest('smscommandkeyvalueparser-commandeditkeyvalueparserform')} commandId={commandId} onAfterChange={onAfterChange} onCancel={onCancel} />;\nCommandEditKeyValueParserForm.propTypes = {\n  commandId: PropTypes.string.isRequired,\n  onAfterChange: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired\n};","import { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { CommandEditWithDataSetForm } from '../smsCommandWithDataSet';\nimport { AT_LEAST_ONE_DATAVALUE } from '../smsCommandFields';\nimport { dataTest } from '../dataTest';\nexport const CommandEditJ2MEParserForm = ({\n  commandId,\n  onAfterChange,\n  onCancel\n}) => <CommandEditWithDataSetForm dataTest={dataTest('smscommandkeyvalueparser-commandeditj2meparserform')} commandId={commandId} onAfterChange={onAfterChange} onCancel={onCancel} initialCompletenessMethod={AT_LEAST_ONE_DATAVALUE.value} />;\nCommandEditJ2MEParserForm.propTypes = {\n  commandId: PropTypes.string.isRequired,\n  onAfterChange: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired\n};","import { useDataQuery } from '@dhis2/app-runtime';\nexport const READ_SMS_COMMAND_EVENT_REGISTRATION_PARSER_QUERY = {\n  smsCommand: {\n    resource: 'smsCommands',\n    id: ({\n      id\n    }) => id,\n    params: {\n      fields: ['*', 'program[id,displayName]', 'programStage[id,displayName,programStageDataElements[id,dataElement[id,displayName]]'],\n      paging: 'false'\n    }\n  }\n};\nexport const useReadSmsCommandEventRegistrationParserQuery = id => useDataQuery(READ_SMS_COMMAND_EVENT_REGISTRATION_PARSER_QUERY, {\n  variables: {\n    id\n  }\n});","import { CenteredContent, CircularLoader, NoticeBox, ReactFinalForm } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { EVENT_REGISTRATION_PARSER, FIELD_COMMAND_DEFAULT_MESSAGE_NAME, FIELD_COMMAND_MORE_THAN_ONE_ORG_UNIT_MESSAGE_NAME, FIELD_COMMAND_NAME_NAME, FIELD_COMMAND_NO_USER_MESSAGE_NAME, FIELD_COMMAND_PARSER_NAME, FIELD_COMMAND_PROGAM_NAME, FIELD_COMMAND_PROGAM_STAGE_NAME, FIELD_COMMAND_SEPARATOR_NAME, FIELD_COMMAND_SMS_CODES_NAME, FIELD_COMMAND_SUCCESS_MESSAGE_NAME, FIELD_COMMAND_WRONG_FORMAT_MESSAGE_NAME, FieldCommandDefaultMessage, FieldCommandMoreThanOneOrgUnitMessage, FieldCommandName, FieldCommandNoUserMessage, FieldCommandParser, FieldCommandSeparator, FieldCommandSuccessMessage, FieldCommandWrongFormatMessage, ProgramStageDataElements } from '../smsCommandFields';\nimport { CommandFormActions, useUpdateCommand } from '../smsCommand';\nimport { FormRow } from '../forms';\nimport { FieldProgram } from '../program';\nimport { FieldProgramStage } from '../programStage';\nimport { PageSubHeadline } from '../headline';\nimport { useReadSmsCommandEventRegistrationParserQuery } from './useReadSmsCommandEventRegistrationParserQuery';\nimport i18n from '../locales';\nconst {\n  Form\n} = ReactFinalForm;\n\nconst getInitialFormState = command => {\n  const name = command[FIELD_COMMAND_NAME_NAME];\n  const program = command[FIELD_COMMAND_PROGAM_NAME];\n  const programStage = command[FIELD_COMMAND_PROGAM_STAGE_NAME];\n  const separator = command[FIELD_COMMAND_SEPARATOR_NAME];\n  const defaultMessage = command[FIELD_COMMAND_DEFAULT_MESSAGE_NAME];\n  const wrongFormatMessage = command[FIELD_COMMAND_WRONG_FORMAT_MESSAGE_NAME];\n  const noUserMessage = command[FIELD_COMMAND_NO_USER_MESSAGE_NAME];\n  const moreThanOneOrgUnitMessage = command[FIELD_COMMAND_MORE_THAN_ONE_ORG_UNIT_MESSAGE_NAME];\n  const successMessage = command[FIELD_COMMAND_SUCCESS_MESSAGE_NAME];\n  const smsCodes = command[FIELD_COMMAND_SMS_CODES_NAME].reduce((curSmsCodes, smsCode) => ({ ...curSmsCodes,\n    [smsCode.dataElement.id]: smsCode\n  }), {});\n  return {\n    [FIELD_COMMAND_NAME_NAME]: name,\n    [FIELD_COMMAND_PARSER_NAME]: EVENT_REGISTRATION_PARSER.value,\n    [FIELD_COMMAND_PROGAM_NAME]: program,\n    [FIELD_COMMAND_PROGAM_STAGE_NAME]: programStage,\n    [FIELD_COMMAND_SEPARATOR_NAME]: separator,\n    [FIELD_COMMAND_DEFAULT_MESSAGE_NAME]: defaultMessage,\n    [FIELD_COMMAND_WRONG_FORMAT_MESSAGE_NAME]: wrongFormatMessage,\n    [FIELD_COMMAND_NO_USER_MESSAGE_NAME]: noUserMessage,\n    [FIELD_COMMAND_MORE_THAN_ONE_ORG_UNIT_MESSAGE_NAME]: moreThanOneOrgUnitMessage,\n    [FIELD_COMMAND_SUCCESS_MESSAGE_NAME]: successMessage,\n    [FIELD_COMMAND_SMS_CODES_NAME]: smsCodes\n  };\n};\n\nconst formatSmsCodes = updates => ({ ...updates,\n  [FIELD_COMMAND_SMS_CODES_NAME]: Object.values(updates[FIELD_COMMAND_SMS_CODES_NAME])\n});\n\nexport const CommandEditEventRegistrationParserForm = ({\n  commandId,\n  onAfterChange,\n  onCancel\n}) => {\n  const {\n    error,\n    data: {\n      smsCommand: command\n    } = {}\n  } = useReadSmsCommandEventRegistrationParserQuery(commandId);\n  const updateCommand = useUpdateCommand({\n    commandId,\n    onAfterChange,\n    formatCommand: formatSmsCodes\n  });\n\n  if (error) {\n    const msg = i18n.t(\"Something went wrong whilst loading the command's details\");\n    return <NoticeBox error title={msg}>\n                {error.message}\n            </NoticeBox>;\n  }\n\n  if (!command) {\n    return <CenteredContent>\n                <CircularLoader />\n            </CenteredContent>;\n  }\n\n  const selectedProgramOption = {\n    value: command.program.id,\n    label: command.program.displayName\n  };\n  const selectedProgramStageOption = {\n    value: command.programStage.id,\n    label: command.programStage.displayName\n  };\n  const programStageDataElements = command.programStage.programStageDataElements;\n  const initialValues = getInitialFormState(command);\n  return <Form keepDirtyOnReinitialize initialValues={initialValues} onSubmit={updateCommand}>\n            {({\n      handleSubmit,\n      values,\n      pristine\n    }) => {\n      return <form onSubmit={handleSubmit}>\n                        <FormRow>\n                            <FieldCommandName />\n                        </FormRow>\n\n                        <FormRow>\n                            <FieldCommandParser disabled />\n                        </FormRow>\n\n                        <FormRow>\n                            <FieldProgram disabled programs={[selectedProgramOption]} />\n                        </FormRow>\n\n                        <FormRow>\n                            <FieldProgramStage disabled programStages={[selectedProgramStageOption]} />\n                        </FormRow>\n\n                        <FormRow>\n                            <FieldCommandSeparator />\n                        </FormRow>\n\n                        <FormRow>\n                            <FieldCommandDefaultMessage />\n                        </FormRow>\n\n                        <FormRow>\n                            <FieldCommandWrongFormatMessage />\n                        </FormRow>\n\n                        <FormRow>\n                            <FieldCommandNoUserMessage />\n                        </FormRow>\n\n                        <FormRow>\n                            <FieldCommandMoreThanOneOrgUnitMessage />\n                        </FormRow>\n\n                        <FormRow>\n                            <FieldCommandSuccessMessage />\n                        </FormRow>\n\n                        <PageSubHeadline>\n                            {i18n.t('SMS short codes')}\n                        </PageSubHeadline>\n\n                        {programStageDataElements && <FormRow>\n                                <ProgramStageDataElements programStageDataElements={programStageDataElements} smsCodes={values[FIELD_COMMAND_SMS_CODES_NAME]} />\n                            </FormRow>}\n\n                        <CommandFormActions onCancel={() => onCancel(pristine)} />\n                    </form>;\n    }}\n        </Form>;\n};\nCommandEditEventRegistrationParserForm.propTypes = {\n  commandId: PropTypes.string.isRequired,\n  onAfterChange: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired\n};","import React from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { ReactFinalForm, NoticeBox, CenteredContent, CircularLoader } from '@dhis2/ui';\nimport { useDataQuery } from '@dhis2/app-runtime';\nimport { FieldCommandName, FieldCommandParser, FieldCommandConfirmMessage } from '../smsCommandFields';\nimport { CommandFormActions, useUpdateCommand } from '../smsCommand';\nimport { FieldUserGroup } from '../userGroup';\nimport { FormRow } from '../forms';\nimport { dataTest } from '../dataTest';\nimport i18n from '../locales';\nconst {\n  Form\n} = ReactFinalForm;\nconst query = {\n  smsCommand: {\n    resource: 'smsCommands',\n    id: ({\n      commandId\n    }) => commandId,\n    params: {\n      fields: ['name', 'parserType', 'receivedMessage', 'userGroup[name,id]']\n    }\n  }\n};\nexport const CommandEditAlertParserForm = ({\n  commandId,\n  onAfterChange,\n  onCancel\n}) => {\n  const updateCommand = useUpdateCommand({\n    commandId,\n    onAfterChange,\n    replace: true\n  });\n  const {\n    loading,\n    error,\n    data\n  } = useDataQuery(query, {\n    variables: {\n      commandId\n    }\n  });\n\n  if (loading) {\n    return <CenteredContent>\n                <CircularLoader />\n            </CenteredContent>;\n  }\n\n  if (error) {\n    const msg = i18n.t('Something went wrong whilst loading the sms command');\n    return <NoticeBox error title={msg}>\n                {error.message}\n            </NoticeBox>;\n  }\n\n  const {\n    name,\n    parserType,\n    receivedMessage,\n    userGroup\n  } = data.smsCommand;\n  const initialValues = {\n    name,\n    parserType,\n    receivedMessage,\n    userGroup: userGroup.id\n  };\n  const userGroups = [{\n    value: userGroup.id,\n    label: userGroup.name\n  }];\n  return <Form keepDirtyOnReinitialize onSubmit={updateCommand} initialValues={initialValues}>\n            {({\n      handleSubmit,\n      pristine\n    }) => <form onSubmit={handleSubmit} data-test={dataTest('commands-commandeditalertparserform')}>\n                    <FormRow>\n                        <FieldCommandName />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandParser disabled />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldUserGroup disabled userGroups={userGroups} />\n                    </FormRow>\n\n                    <FormRow>\n                        <FieldCommandConfirmMessage />\n                    </FormRow>\n\n                    <CommandFormActions onCancel={() => onCancel(pristine)} />\n                </form>}\n        </Form>;\n};\nCommandEditAlertParserForm.propTypes = {\n  commandId: PropTypes.string.isRequired,\n  onAfterChange: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired\n};","import { NoticeBox, CenteredContent, CircularLoader } from '@dhis2/ui';\nimport { useHistory, useParams } from 'react-router-dom';\nimport React, { useState } from 'react';\nimport { ALERT_PARSER, EVENT_REGISTRATION_PARSER, J2ME_PARSER, KEY_VALUE_PARSER, PROGRAM_STAGE_DATAENTRY_PARSER, TRACKED_ENTITY_REGISTRATION_PARSER, UNREGISTERED_PARSER, FIELD_COMMAND_PARSER_NAME } from '../../smsCommandFields';\nimport { SMS_COMMAND_LIST_PATH } from './SmsCommandList';\nimport { CancelDialog } from '../../cancelDialog';\nimport { CommandEditUnregisteredParserForm } from '../../smsCommandUnregisteredParser';\nimport { CommandEditTrackedEntityRegistrationParserForm } from '../../smsCommandTrackedEntityRegistrationParser';\nimport { CommandEditProgramStageDataEntryParserForm } from '../../smsCommandProgramStageDataEntryParser';\nimport { CommandEditKeyValueParserForm } from '../../smsCommandKeyValueParser';\nimport { CommandEditJ2MEParserForm } from '../../smsCommandJ2MEParser';\nimport { CommandEditEventRegistrationParserForm } from '../../smsCommandEventRegistrationParser';\nimport { CommandEditAlertParserForm } from '../../smsCommandAlertParser';\nimport { PageHeadline } from '../../headline';\nimport { isParserType, useReadSmsCommandParserTypeQuery } from '../../smsCommand';\nimport i18n from '../../locales';\nimport styles from './SmsCommandFormEdit.module.css';\nexport const SMS_COMMAND_FORM_EDIT_PATH_STATIC = '/sms-config/edit';\nexport const SMS_COMMAND_FORM_EDIT_PATH = `${SMS_COMMAND_FORM_EDIT_PATH_STATIC}/:id`;\n\nconst getSmsCommandEditFormComponent = parserType => {\n  const isParser = isParserType.bind(null, parserType);\n\n  if (parserType && isParser(KEY_VALUE_PARSER)) {\n    return CommandEditKeyValueParserForm;\n  }\n\n  if (parserType && isParser(J2ME_PARSER)) {\n    return CommandEditJ2MEParserForm;\n  }\n\n  if (parserType && isParser(ALERT_PARSER)) {\n    return CommandEditAlertParserForm;\n  }\n\n  if (parserType && isParser(PROGRAM_STAGE_DATAENTRY_PARSER)) {\n    return CommandEditProgramStageDataEntryParserForm;\n  }\n\n  if (parserType && isParser(UNREGISTERED_PARSER)) {\n    return CommandEditUnregisteredParserForm;\n  }\n\n  if (parserType && isParser(EVENT_REGISTRATION_PARSER)) {\n    return CommandEditEventRegistrationParserForm;\n  }\n\n  if (parserType && isParser(TRACKED_ENTITY_REGISTRATION_PARSER)) {\n    return CommandEditTrackedEntityRegistrationParserForm;\n  }\n\n  return null;\n};\n\nexport const SmsCommandFormEdit = () => {\n  const history = useHistory();\n  const {\n    id\n  } = useParams();\n  const {\n    loading,\n    error,\n    data\n  } = useReadSmsCommandParserTypeQuery(id);\n  const [showCancelDialog, setShowCancelDialog] = useState(false);\n\n  const onAfterChange = () => history.push(SMS_COMMAND_LIST_PATH);\n\n  const onCancel = pristine => pristine ? history.goBack() : setShowCancelDialog(true);\n\n  if (loading) {\n    return <CenteredContent>\n                <CircularLoader />\n            </CenteredContent>;\n  }\n\n  if (error) {\n    const msg = i18n.t('Something went wrong whilst loading commands');\n    return <NoticeBox error title={msg}>\n                {error.message}\n            </NoticeBox>;\n  }\n\n  const parserType = data?.smsCommand[FIELD_COMMAND_PARSER_NAME];\n  const FormComponent = getSmsCommandEditFormComponent(parserType);\n  return <div className={styles.container}>\n            <PageHeadline>{i18n.t('Edit command')}</PageHeadline>\n\n            {FormComponent && <FormComponent commandId={id} onCancel={onCancel} onAfterChange={onAfterChange} />}\n\n            {showCancelDialog && <CancelDialog onConfirmCancel={() => history.push(SMS_COMMAND_LIST_PATH)} onAbortCancel={() => setShowCancelDialog(false)} />}\n\n            {!parserType && <NoticeBox error title={i18n.t('Unrecognised parser type')}>\n                    {i18n.t('Could not find the requested parser type')}\n                </NoticeBox>}\n        </div>;\n};","import { Button, ButtonStrip, ReactFinalForm, CircularLoader } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { useHistory } from 'react-router-dom';\nimport React, { useEffect, useState } from 'react';\nimport { ALERT_PARSER, EVENT_REGISTRATION_PARSER, FIELD_COMMAND_PARSER_NAME, J2ME_PARSER, KEY_VALUE_PARSER, PROGRAM_STAGE_DATAENTRY_PARSER, TRACKED_ENTITY_REGISTRATION_PARSER, UNREGISTERED_PARSER, FieldCommandName, FieldCommandParser } from '../../smsCommandFields';\nimport { useCreateSmsCommandMutation } from '../../smsCommand';\nimport { FieldDataSetWithAutoLoad } from '../../dataSet';\nimport { ALL_PROGRAMS, FIELD_PROGRAM_NAME, PROGRAMS_WITH_REGISTRATION, PROGRAMS_WITHOUT_REGISTRATION, FieldProgramWithAutoLoad } from '../../program';\nimport { FIELD_PROGRAM_STAGE_NAME, FieldProgramStageWithLoadingStates } from '../../programStage';\nimport { FieldUserGroupWithAutoLoad } from '../../userGroup';\nimport { FormRow } from '../../forms';\nimport { PageHeadline } from '../../headline';\nimport i18n from '../../locales';\nimport { SMS_COMMAND_LIST_PATH } from './SmsCommandList';\nimport styles from './SmsCommandFormNew.module.css';\nconst {\n  Form,\n  useForm\n} = ReactFinalForm;\nexport const SMS_COMMAND_FORM_NEW_PATH = '/sms-config/new';\n\nconst useResetFormFields = () => {\n  const form = useForm();\n  const [prevValues, setPrevValues] = useState(form.getState().values);\n  useEffect(() => form.subscribe(({\n    values\n  }) => {\n    form.batch(() => {\n      const parserType = values[FIELD_COMMAND_PARSER_NAME];\n      const program = values[FIELD_PROGRAM_NAME];\n      const programStage = values[FIELD_PROGRAM_STAGE_NAME];\n      const prevProgram = prevValues[FIELD_PROGRAM_NAME];\n      const prevParserType = prevValues[FIELD_COMMAND_PARSER_NAME];\n      const programChanged = prevProgram && program !== prevProgram;\n      const parserTypeChanged = prevParserType && parserType !== prevParserType;\n\n      if ( // only unset program stage if one exists already\n      programStage && (programChanged || parserTypeChanged)) {\n        form.change(FIELD_PROGRAM_STAGE_NAME, null);\n      }\n    });\n    setPrevValues(values);\n  }, {\n    values: true\n  }), [prevValues]);\n}; // undefined = all, false = program.programType --> WITHOUT_REGISTRATION\n\n\nconst shouldProgramsBeWithRegistration = parserType => {\n  // EVENT_REGISTRATION uses event programs\n  if (parserType === EVENT_REGISTRATION_PARSER.value) {\n    return PROGRAMS_WITHOUT_REGISTRATION;\n  } // This is for programs of type tracker,\n  // which can have multiple program stages\n\n\n  if (parserType === PROGRAM_STAGE_DATAENTRY_PARSER.value) {\n    return PROGRAMS_WITH_REGISTRATION;\n  } // Unrelated yet, but in case all program stages are need in the future\n\n\n  return ALL_PROGRAMS;\n};\n\nconst ActualForm = ({\n  handleSubmit,\n  submitting\n}) => {\n  // This is required to unset form fields that depend\n  // on the selected value of a previous field\n  useResetFormFields();\n  const history = useHistory();\n  const form = useForm();\n  const {\n    values\n  } = form.getState();\n  const parserType = values[FIELD_COMMAND_PARSER_NAME];\n  const program = values[FIELD_PROGRAM_NAME];\n  const showDataSetField = parserType === KEY_VALUE_PARSER.value || parserType === J2ME_PARSER.value;\n  const showUserGroupField = parserType === ALERT_PARSER.value || parserType === UNREGISTERED_PARSER.value;\n  const showProgramField = parserType === TRACKED_ENTITY_REGISTRATION_PARSER.value || parserType === PROGRAM_STAGE_DATAENTRY_PARSER.value || parserType === EVENT_REGISTRATION_PARSER.value;\n  const showProgramStageField = parserType === EVENT_REGISTRATION_PARSER.value || parserType === PROGRAM_STAGE_DATAENTRY_PARSER.value;\n  const registration = shouldProgramsBeWithRegistration(parserType);\n  const disableProgramStage = parserType === EVENT_REGISTRATION_PARSER.value;\n  return <div className={styles.container}>\n            <PageHeadline>{i18n.t('Add command')}</PageHeadline>\n            <form onSubmit={handleSubmit}>\n                <FormRow>\n                    <FieldCommandName />\n                </FormRow>\n\n                <FormRow>\n                    <FieldCommandParser />\n                </FormRow>\n\n                {showDataSetField && <FormRow>\n                        <FieldDataSetWithAutoLoad required />\n                    </FormRow>}\n\n                {showUserGroupField && <FormRow>\n                        <FieldUserGroupWithAutoLoad required />\n                    </FormRow>}\n\n                {showProgramField && <FormRow>\n                        <FieldProgramWithAutoLoad required registration={registration} />\n                    </FormRow>}\n\n                {showProgramStageField && <FormRow>\n                        <FieldProgramStageWithLoadingStates disabled={disableProgramStage} required programId={program?.id || ''} parserType={parserType} helpText={disableProgramStage ? i18n.t('Automatically selected by selecting a program') : undefined} />\n                    </FormRow>}\n\n                <ButtonStrip>\n                    <Button primary type=\"submit\" icon={submitting ? <CircularLoader small /> : null} disabled={submitting}>\n                        {i18n.t('Add command')}\n                    </Button>\n\n                    <Button onClick={() => history.goBack()}>\n                        {i18n.t('Cancel')}\n                    </Button>\n                </ButtonStrip>\n            </form>\n        </div>;\n};\n\nActualForm.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n  submitting: PropTypes.bool.isRequired\n};\nexport const SmsCommandFormNew = () => {\n  const history = useHistory();\n  const [createSmsCommand] = useCreateSmsCommandMutation({\n    onComplete: () => history.push(SMS_COMMAND_LIST_PATH)\n  });\n\n  const onSubmit = values => createSmsCommand(values);\n\n  return <Form destroyOnUnregister onSubmit={onSubmit}>\n            {({\n      handleSubmit,\n      submitting\n    }) => <ActualForm handleSubmit={handleSubmit} submitting={submitting} />}\n        </Form>;\n};","import { Button, Checkbox, Table, TableHead, TableBody, TableRow, TableRowHead, TableCell, TableCellHead, NoticeBox, CenteredContent, CircularLoader } from '@dhis2/ui';\nimport { useHistory } from 'react-router-dom';\nimport React, { useState } from 'react';\nimport { SMS_COMMAND_FORM_EDIT_PATH_STATIC } from './SmsCommandFormEdit';\nimport { SMS_COMMAND_FORM_NEW_PATH } from './SmsCommandFormNew';\nimport { ListActions } from '../../dataList';\nimport { PageHeadline } from '../../headline';\nimport { Paragraph } from '../../text';\nimport { DeleteCommandsConfirmationDialog, getLabelByParserTypes, useDeleteSmsCommandMutation, useReadSmsCommandsQuery } from '../../smsCommand';\nimport { dataTest } from '../../dataTest';\nimport i18n from '../../locales';\nimport styles from './SmsCommandList.module.css';\nexport const SMS_COMMAND_LIST_LABEL = i18n.t('Commands');\nexport const SMS_COMMAND_LIST_PATH = '/sms-config';\nexport const SmsCommandList = () => {\n  const history = useHistory();\n\n  const onAddCommandClick = () => history.push(SMS_COMMAND_FORM_NEW_PATH);\n\n  const [checkedSmsCommands, setCheckedSmsCommands] = useState([]);\n  const [showDeleteConfirmationDialog, setShowDeleteConfirmationDialog] = useState(false);\n  const {\n    loading: loadingReadSmsCommands,\n    error: errorReadSmsCommands,\n    data,\n    refetch\n  } = useReadSmsCommandsQuery();\n  const [deleteSmsCommands, {\n    loading: loadingDelete,\n    error: errorDelete\n  }] = useDeleteSmsCommandMutation();\n\n  if (loadingReadSmsCommands) {\n    return <div data-test={dataTest('views-smscommandlist')}>\n                <PageHeadline>{SMS_COMMAND_LIST_LABEL}</PageHeadline>\n                <CenteredContent>\n                    <CircularLoader />\n                </CenteredContent>\n            </div>;\n  }\n\n  const error = errorReadSmsCommands || errorDelete;\n\n  if (error) {\n    const msg = i18n.t('Something went wrong whilst performing the requested operation');\n    return <div data-test={dataTest('views-smscommandlist')}>\n                <PageHeadline>{SMS_COMMAND_LIST_LABEL}</PageHeadline>\n                <NoticeBox error title={msg}>\n                    {error.message}\n                </NoticeBox>\n            </div>;\n  }\n\n  const onToggleCallChange = () => {\n    const smsCommands = data?.smsCommands?.smsCommands;\n\n    if (!smsCommands) {\n      return;\n    }\n\n    if (checkedSmsCommands.length === smsCommands.length) {\n      setCheckedSmsCommands([]);\n    } else {\n      setCheckedSmsCommands(smsCommands.map(({\n        id,\n        displayName\n      }) => ({\n        id,\n        displayName\n      })));\n    }\n  };\n\n  const toggleSmsCommand = smsCommand => {\n    const {\n      id\n    } = smsCommand;\n\n    if (checkedSmsCommands.find(({\n      id: checkedId\n    }) => id === checkedId)) {\n      const index = checkedSmsCommands.findIndex(({\n        id: checkedId\n      }) => id === checkedId);\n      return setCheckedSmsCommands([...checkedSmsCommands.slice(0, index), ...checkedSmsCommands.slice(index + 1)]);\n    }\n\n    return setCheckedSmsCommands([...checkedSmsCommands, smsCommand]);\n  };\n\n  const onDeleteClick = async () => {\n    const ids = checkedSmsCommands.map(({\n      id\n    }) => id);\n    await deleteSmsCommands({\n      ids\n    });\n    setCheckedSmsCommands([]);\n    setShowDeleteConfirmationDialog(false);\n    refetch();\n  };\n\n  const allChecked = checkedSmsCommands.length === data?.smsCommands?.smsCommands?.length;\n  const hasCommands = data?.smsCommands?.smsCommands?.length > 0;\n  return <div data-test={dataTest('views-smscommandlist')} className={styles.container}>\n            <PageHeadline>{SMS_COMMAND_LIST_LABEL}</PageHeadline>\n\n            <Paragraph>\n                {i18n.t('SMS commands process SMS messages received by a DHIS2 instance, taking certain actions depending on the command and message content. Multiple SMS commands can be set up to process and handle data in multiple ways. Add and configure SMS commands below. Read about SMS commands in the DHIS2 documentation.')}\n            </Paragraph>\n\n            <ListActions addLabel={i18n.t('Add command')} deleteLabel={i18n.t('Delete selected')} dataTest=\"views-smscommandlist\" onAddClick={onAddCommandClick} onDeleteClick={() => setShowDeleteConfirmationDialog(true)} disableAdd={loadingDelete} disableDelete={!checkedSmsCommands.length || loadingDelete} />\n\n            {showDeleteConfirmationDialog && <DeleteCommandsConfirmationDialog onCancelClick={() => setShowDeleteConfirmationDialog(false)} onDeleteClick={onDeleteClick} />}\n\n            <Table>\n                <TableHead>\n                    <TableRowHead>\n                        <TableCellHead>\n                            <Checkbox checked={allChecked} onChange={onToggleCallChange} />\n                        </TableCellHead>\n                        <TableCellHead>{i18n.t('Sms command')}</TableCellHead>\n                        <TableCellHead>{i18n.t('Parser')}</TableCellHead>\n                        <TableCellHead />\n                    </TableRowHead>\n                </TableHead>\n                <TableBody>\n                    {hasCommands ? data?.smsCommands?.smsCommands?.map(({\n          id,\n          displayName,\n          parserType\n        }) => <TableRow key={id}>\n                                    <TableCell className={styles.checkbox}>\n                                        <Checkbox checked={!!checkedSmsCommands.find(({\n              id: checkedId\n            }) => id === checkedId)} onChange={() => toggleSmsCommand({\n              id,\n              displayName\n            })} />\n                                    </TableCell>\n\n                                    <TableCell>{displayName}</TableCell>\n\n                                    <TableCell>\n                                        {getLabelByParserTypes(parserType)}\n                                    </TableCell>\n\n                                    <TableCell className={styles.editButtonCell}>\n                                        <Button onClick={() => history.push(`${SMS_COMMAND_FORM_EDIT_PATH_STATIC}/${id}`)}>\n                                            {i18n.t('Edit')}\n                                        </Button>\n                                    </TableCell>\n                                </TableRow>) : <TableRow>\n                            <TableCell colSpan=\"4\" className={styles.noResults}>\n                                {i18n.t('No commands to display')}\n                            </TableCell>\n                        </TableRow>}\n                </TableBody>\n            </Table>\n        </div>;\n};","import * as parserTypes from '../smsCommandFields';\nexport const getLabelByParserTypes = parserType => {\n  const type = Object.values(parserTypes).find(({\n    value\n  }) => value === parserType);\n  return type?.label || parserType;\n};","import i18n from '@dhis2/d2-i18n';\nexport const statusMap = {\n  DELIVERED: i18n.t('Delivered'),\n  ERROR: i18n.t('Error'),\n  FAILED: i18n.t('Failed'),\n  OUTBOUND: i18n.t('Outbound'),\n  PENDING: i18n.t('Pending'),\n  SCHEDULED: i18n.t('Scheduled'),\n  SENT: i18n.t('Sent')\n};","import { TableRow, TableCell, Checkbox } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { Date, Time } from '../../time';\nimport { statusMap } from './translations';\nimport styles from './SmsTableItem.module.css';\n\nconst SmsTableItem = ({\n  sms,\n  toggleSelected,\n  isSelected\n}) => {\n  const {\n    message,\n    status,\n    date,\n    id\n  } = sms;\n  /**\n   *FIXME: after a deletion, for a short while the backend returns null for\n   * recipients. We can't catch that with a default value since it's not\n   * undefined, so we're doing it this way.\n   */\n\n  const recipients = sms.recipients === null ? [] : sms.recipients;\n  return <TableRow>\n            <TableCell>\n                <Checkbox onChange={() => toggleSelected(id)} checked={isSelected} />\n            </TableCell>\n            <TableCell>{message}</TableCell>\n            <TableCell>\n                {recipients.map((recipient, index, all) => <span key={recipient + index} className={styles.recipient}>\n                        {recipient}\n                        {index !== all.length - 1 && ', '}\n                    </span>)}\n            </TableCell>\n            <TableCell>{statusMap[status]}</TableCell>\n            <TableCell>\n                <Date date={date} />\n                {', '}\n                <Time time={date} />\n            </TableCell>\n        </TableRow>;\n};\n\nSmsTableItem.propTypes = {\n  isSelected: PropTypes.bool.isRequired,\n  sms: PropTypes.shape({\n    date: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    message: PropTypes.string.isRequired,\n    status: PropTypes.string.isRequired,\n    recipients: PropTypes.arrayOf(PropTypes.string)\n  }).isRequired,\n  toggleSelected: PropTypes.func.isRequired\n};\nexport default SmsTableItem;","import { createContext } from 'react';\nconst message = 'RefetchSms consumer needs to have a valid Provider as parent';\n\nconst throwError = () => {\n  throw new Error(message);\n}; // Throws an error if the consumer is not nested in a provider\n\n\nconst RefetchSms = createContext({\n  refetch: throwError,\n  refetchAndClear: throwError\n});\nexport default RefetchSms;","import React, { useContext } from 'react';\nimport { Button, SingleSelect, SingleSelectOption } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport i18n from '../../locales';\nimport RefetchSms from './RefetchSms';\nimport s from './Pagination.module.css';\nconst pageSizes = ['10', '20', '30', '40', '50', '100'];\n\nconst Pagination = ({\n  pager\n}) => {\n  const {\n    refetchAndClear\n  } = useContext(RefetchSms);\n\n  const changePage = newPage => {\n    refetchAndClear({\n      page: newPage\n    });\n  };\n\n  const changePageSize = newSize => {\n    refetchAndClear({\n      pageSize: newSize,\n      page: 1\n    });\n  };\n\n  const {\n    page,\n    pageCount,\n    pageSize,\n    total\n  } = pager;\n  const firstItem = Math.min((page - 1) * pageSize + 1, total);\n  const lastItem = Math.min(firstItem + pageSize - 1, total);\n  const availablePages = Array.from({\n    length: pageCount\n  }, (_x, i) => (i + 1).toString());\n  return <div className={s.container}>\n            <div className={s.left}>\n                <span>{i18n.t('Show')}</span>\n                <SingleSelect dense selected={pageSize.toString()} onChange={({\n        selected\n      }) => changePageSize(selected)}>\n                    {pageSizes.map(size => <SingleSelectOption key={size} value={size} label={size} />)}\n                </SingleSelect>\n                <span>{i18n.t('per page')}</span>\n            </div>\n            <div className={s.right}>\n                <div className={s.amount}>\n                    {i18n.t('Viewing {{firstItem}}-{{lastItem}} of {{total}}', {\n          firstItem,\n          lastItem,\n          total\n        })}\n                </div>\n                <Button small disabled={page === 1} onClick={() => changePage(page - 1)}>\n                    {i18n.t('Previous')}\n                </Button>\n                <div className={s.pageselection}>\n                    <div>{i18n.t('Page')}</div>\n                    <SingleSelect dense selected={page.toString()} onChange={({\n          selected\n        }) => {\n          changePage(selected);\n        }}>\n                        {availablePages.map(page => <SingleSelectOption key={page} value={page} label={page} />)}\n                    </SingleSelect>\n                    <div>{i18n.t('of {{pageCount}}', {\n            pageCount\n          })}</div>\n                </div>\n                <Button small disabled={page === pageCount} onClick={() => changePage(page + 1)}>\n                    {i18n.t('Next')}\n                </Button>\n            </div>\n        </div>;\n};\n\nPagination.propTypes = {\n  pager: PropTypes.shape({\n    page: PropTypes.number.isRequired,\n    pageCount: PropTypes.number.isRequired,\n    pageSize: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired\n  }).isRequired\n};\nexport default Pagination;","import React from 'react';\nimport { Checkbox } from '@dhis2/ui';\nimport i18n from '../../locales';\nimport { Table, TableHead, TableRowHead, TableRow, TableCell, TableCellHead, TableBody, TableFoot } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport SmsTableItem from './SmsTableItem';\nimport Pagination from './Pagination';\nimport s from './SmsTable.module.css';\n\nconst SmsTable = ({\n  smses,\n  toggleSelected,\n  toggleAll,\n  allSelected,\n  selected,\n  pager\n}) => <Table>\n        <TableHead>\n            <TableRowHead>\n                <TableCellHead>\n                    <Checkbox disabled={smses.length === 0} onChange={toggleAll} checked={allSelected} />\n                </TableCellHead>\n                <TableCellHead>{i18n.t('Message')}</TableCellHead>\n                <TableCellHead>{i18n.t('Recipients')}</TableCellHead>\n                <TableCellHead>{i18n.t('Status')}</TableCellHead>\n                <TableCellHead>{i18n.t('Sent')}</TableCellHead>\n            </TableRowHead>\n        </TableHead>\n        <TableBody>\n            {smses.length === 0 ? <TableRow>\n                    <TableCell colSpan=\"7\" className={s.noResults}>\n                        {i18n.t('No SMSes to display')}\n                    </TableCell>\n                </TableRow> : smses.map(sms => <SmsTableItem key={sms.id} sms={sms} isSelected={selected.includes(sms.id)} toggleSelected={toggleSelected} />)}\n        </TableBody>\n        <TableFoot>\n            <TableRow>\n                <TableCell colSpan=\"7\">\n                    <Pagination pager={pager} />\n                </TableCell>\n            </TableRow>\n        </TableFoot>\n    </Table>;\n\nSmsTable.propTypes = {\n  allSelected: PropTypes.bool.isRequired,\n  pager: PropTypes.object.isRequired,\n  selected: PropTypes.arrayOf(PropTypes.string).isRequired,\n  smses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  toggleAll: PropTypes.func.isRequired,\n  toggleSelected: PropTypes.func.isRequired\n};\nexport default SmsTable;","import React, { useContext } from 'react';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { SingleSelectField, SingleSelectOption } from '@dhis2/ui';\nimport i18n from '../../locales';\nimport RefetchSms from './RefetchSms';\nimport { statusMap } from './translations';\n/**\n * Using ALL instead of a more sensible empty string due to a bug in the Select,\n * which means the select doesn't allow empty strings as values.\n * https://github.com/dhis2/ui/issues/245\n */\n\nexport const parseStatus = status => {\n  if (status === 'ALL') {\n    return '';\n  }\n\n  return status;\n}; // From https://github.com/dhis2/dhis2-core/blob/master/dhis-2/dhis-api/src/main/java/org/hisp/dhis/sms/outbound/OutboundSmsStatus.java\n\nconst statuses = ['DELIVERED', 'ERROR', 'FAILED', 'OUTBOUND', 'PENDING', 'SCHEDULED', 'SENT'];\nconst filterOptions = [{\n  label: i18n.t('All'),\n  value: 'ALL'\n}, // Using the translations from statusmap as labels\n...statuses.map(status => ({\n  label: statusMap[status],\n  value: status\n}))];\n\nconst StatusFilter = ({\n  status,\n  setStatus\n}) => {\n  const {\n    refetchAndClear\n  } = useContext(RefetchSms);\n\n  const onChange = ({\n    selected\n  }) => {\n    setStatus(selected);\n    refetchAndClear({\n      status: parseStatus(selected),\n      // Reset to the first page after filtering\n      page: 1\n    });\n  };\n\n  return <SingleSelectField label={i18n.t('Filter by status')} inputWidth=\"200px\" onChange={onChange} selected={status}>\n            {filterOptions.map(({\n      label,\n      value\n    }) => <SingleSelectOption key={label} label={label} value={value} />)}\n        </SingleSelectField>;\n};\n\nStatusFilter.propTypes = {\n  setStatus: PropTypes.func.isRequired,\n  status: PropTypes.string.isRequired\n};\nexport default StatusFilter;","// Returns an array of all the ids\nexport const getAllIds = smses => smses.map(sms => sms.id); // Returns true if all smses are selected, false if not\n\nexport const getAllSelected = (allIds, selected) => {\n  // If there are no ids there's nothing to select\n  const noIds = allIds.length === 0; // If the lengths don't match we're assuming that they're not all selected (assuming no duplicate ids)\n\n  const noLengthMatch = allIds.length !== selected.length;\n\n  if (noIds || noLengthMatch) {\n    return false;\n  }\n\n  return allIds.every(id => selected.includes(id));\n};","import React, { useContext } from 'react';\nimport { Button } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport { useDataMutation } from '@dhis2/app-runtime';\nimport i18n from '../../locales';\nimport { AlertContext } from '../../notifications';\nimport RefetchSms from './RefetchSms';\nconst mutation = {\n  resource: 'sms/outbound',\n  params: ({\n    ids\n  }) => ({\n    ids\n  }),\n  type: 'delete'\n};\n\nconst DeleteSelectedButton = ({\n  selected\n}) => {\n  const disabled = selected.length === 0;\n  const ids = selected.join(',');\n  const {\n    addAlert\n  } = useContext(AlertContext);\n  const {\n    refetchAndClear\n  } = useContext(RefetchSms);\n  const [mutate, {\n    loading\n  }] = useDataMutation(mutation, {\n    onComplete: () => {\n      refetchAndClear();\n    },\n    onError: error => {\n      addAlert({\n        type: 'critical',\n        message: error.message\n      });\n    }\n  });\n  return <Button destructive disabled={disabled || loading} onClick={() => mutate({\n    ids\n  })}>\n            {i18n.t('Delete selected')}\n        </Button>;\n};\n\nDeleteSelectedButton.propTypes = {\n  selected: PropTypes.arrayOf(PropTypes.string).isRequired\n};\nexport default DeleteSelectedButton;","import { NoticeBox, CenteredContent, CircularLoader } from '@dhis2/ui';\nimport { useDataQuery } from '@dhis2/app-runtime';\nimport React, { useState } from 'react';\nimport { PageHeadline } from '../../headline';\nimport SmsTable from './SmsTable';\nimport StatusFilter, { parseStatus } from './StatusFilter';\nimport { getAllIds, getAllSelected } from './selectors';\nimport { createToggleAllHandler, createToggleHandler, createCleanSelectedHandler } from './handlers';\nimport DeleteSelectedButton from './DeleteSelectedButton';\nimport RefetchSms from './RefetchSms';\nimport i18n from '../../locales';\nimport styles from './SentSmsList.module.css';\nexport const SENT_SMS_LIST_LABEL = i18n.t('Sent');\nexport const SENT_SMS_LIST_PATH = '/sent';\n\nconst parseParams = ({\n  status,\n  page,\n  pageSize\n}) => {\n  const base = {\n    pageSize,\n    page,\n    fields: ['id', 'message', 'status', 'date', 'recipients'],\n    order: 'date:desc'\n  };\n\n  if (!status) {\n    return base;\n  }\n\n  return { ...base,\n    filter: `status:eq:${status}`\n  };\n};\n\nconst query = {\n  sms: {\n    resource: 'sms/outbound',\n    params: parseParams\n  }\n};\nexport const SentSmsList = () => {\n  const [selected, setSelected] = useState([]);\n  const [status, setStatus] = useState('ALL');\n  const {\n    loading,\n    error,\n    data,\n    refetch\n  } = useDataQuery(query, {\n    variables: {\n      status: parseStatus(status),\n      pageSize: 10,\n      page: 1\n    }\n  });\n\n  if (loading) {\n    return <>\n                <PageHeadline>{SENT_SMS_LIST_LABEL}</PageHeadline>\n                <CenteredContent>\n                    <CircularLoader />\n                </CenteredContent>\n            </>;\n  }\n\n  if (error) {\n    const msg = i18n.t('Something went wrong whilst loading sent SMSes');\n    return <>\n                <PageHeadline>{SENT_SMS_LIST_LABEL}</PageHeadline>\n                <NoticeBox error title={msg}>\n                    {error.message}\n                </NoticeBox>\n            </>;\n  } // Selectors\n\n\n  const allIds = getAllIds(data.sms.outboundsmss);\n  const allSelected = getAllSelected(allIds, selected); // Handlers\n\n  const cleanSelected = createCleanSelectedHandler({\n    selected,\n    setSelected\n  });\n  const toggleAll = createToggleAllHandler({\n    allSelected,\n    setSelected,\n    allIds\n  });\n  const toggleSelected = createToggleHandler({\n    selected,\n    setSelected\n  }); // Context\n\n  const context = {\n    refetch,\n    refetchAndClear: params => {\n      setSelected([]);\n      refetch(params);\n    }\n  };\n  const smses = data?.sms?.outboundsmss || [];\n  return <div className={styles.container}>\n            <RefetchSms.Provider value={context}>\n                <PageHeadline>{SENT_SMS_LIST_LABEL}</PageHeadline>\n                <div className={styles.header}>\n                    <StatusFilter status={status} setStatus={setStatus} />\n                    <div className={styles.headerRight}>\n                        <DeleteSelectedButton selected={selected} />\n                    </div>\n                </div>\n                <SmsTable smses={smses} cleanSelected={cleanSelected} allSelected={allSelected} selected={selected} toggleSelected={toggleSelected} toggleAll={toggleAll} pager={data.sms.pager} />\n            </RefetchSms.Provider>\n        </div>;\n};","// Creates a handler for toggling a single checkbox\nexport const createToggleHandler = ({\n  selected,\n  setSelected\n}) => id => {\n  const isSelected = selected.includes(id);\n\n  if (isSelected) {\n    const filtered = selected.filter(currentId => currentId !== id);\n    return setSelected(filtered);\n  }\n\n  return setSelected([...selected, id]);\n}; // Create a handler for toggling all checkboxes\n\nexport const createToggleAllHandler = ({\n  allSelected,\n  setSelected,\n  allIds\n}) => () => {\n  if (allSelected) {\n    return setSelected([]);\n  }\n\n  return setSelected(allIds);\n}; // Create a handler to remove an id from selected, for after deletion\n\nexport const createCleanSelectedHandler = ({\n  selected,\n  setSelected\n}) => id => {\n  if (selected.includes(id)) {\n    const filtered = selected.filter(current => current != id);\n    setSelected(filtered);\n  }\n};","import { useHistory, useRouteMatch } from 'react-router-dom';\nimport { MenuItem } from '@dhis2/ui';\nimport { PropTypes } from '@dhis2/prop-types';\nimport React from 'react';\nimport { dataTest } from '../dataTest';\nimport styles from './NavigationItem.module.css';\n\nconst useIsItemActive = (path, exactMatch) => {\n  const routeMatch = useRouteMatch(path);\n  if (!routeMatch) return false;\n  if (exactMatch) return routeMatch.isExact;\n  return true;\n};\n\nexport const NavigationItem = ({\n  label,\n  path,\n  exactMatch\n}) => {\n  const history = useHistory();\n  const active = useIsItemActive(path, exactMatch);\n\n  const navigateToPath = () => history.push(path);\n\n  return <MenuItem className={styles.item} onClick={navigateToPath} active={active} label={label} dataTest={dataTest('navigation-navigationitem')} />;\n};\nNavigationItem.defualtProps = {\n  exactMatch: false\n};\nNavigationItem.propTypes = {\n  label: PropTypes.string.isRequired,\n  path: PropTypes.string.isRequired,\n  exactMatch: PropTypes.bool\n};","import { Menu } from '@dhis2/ui';\nimport React from 'react';\nimport { GATEWAY_CONFIG_LIST_LABEL, GATEWAY_CONFIG_LIST_PATH, SMS_COMMAND_LIST_LABEL, SMS_COMMAND_LIST_PATH, SENT_SMS_LIST_LABEL, SENT_SMS_LIST_PATH, HOME_PATH, HOME_LABEL, RECEIVED_SMS_LIST_PATH, RECEIVED_SMS_LIST_LABEL } from '../views';\nimport { NavigationItem } from './NavigationItem';\nimport { dataTest } from '../dataTest';\nexport const Navigation = () => <Menu dataTest={dataTest('navigation-navigation')}>\n        <NavigationItem path={HOME_PATH} label={HOME_LABEL} exactMatch={true} />\n\n        <NavigationItem path={GATEWAY_CONFIG_LIST_PATH} label={GATEWAY_CONFIG_LIST_LABEL} />\n\n        <NavigationItem path={SMS_COMMAND_LIST_PATH} label={SMS_COMMAND_LIST_LABEL} />\n\n        <NavigationItem path={SENT_SMS_LIST_PATH} label={SENT_SMS_LIST_LABEL} />\n\n        <NavigationItem path={RECEIVED_SMS_LIST_PATH} label={RECEIVED_SMS_LIST_LABEL} />\n    </Menu>;","import { HashRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport { CssVariables } from '@dhis2/ui';\nimport React from 'react';\nimport styles from './App.module.css';\nimport { AlertHandler } from './notifications';\nimport { Navigation } from './navigation';\nimport { GATEWAY_CONFIG_FORM_EDIT_PATH, GATEWAY_CONFIG_FORM_NEW_PATH, GATEWAY_CONFIG_LIST_PATH, RECEIVED_SMS_LIST_PATH, SMS_COMMAND_LIST_PATH, SMS_COMMAND_FORM_EDIT_PATH, SMS_COMMAND_FORM_NEW_PATH, SENT_SMS_LIST_PATH, GatewayConfigFormEdit, GatewayConfigFormNew, GatewayConfigList, ReceivedSmsList, SmsCommandList, SmsCommandFormEdit, SmsCommandFormNew, SentSmsList, HOME_PATH, Home } from './views';\nimport { dataTest } from './dataTest';\n\nconst App = () => <AlertHandler>\n        <CssVariables spacers colors />\n        <HashRouter>\n            <div className={styles.container} data-test={dataTest('app')}>\n                <div className={styles.sidebar}>\n                    <Navigation />\n                </div>\n\n                <main className={styles.content}>\n                    <Switch>\n                        <Route exact path={HOME_PATH} component={Home} />\n\n                        {\n          /* Gateway configuration */\n          ''}\n                        <Route exact path={GATEWAY_CONFIG_LIST_PATH} component={GatewayConfigList} />\n\n                        <Route exact path={GATEWAY_CONFIG_FORM_EDIT_PATH} component={GatewayConfigFormEdit} />\n\n                        <Route exact path={GATEWAY_CONFIG_FORM_NEW_PATH} component={GatewayConfigFormNew} />\n\n                        {\n          /* Sms command */\n          ''}\n                        <Route exact path={SMS_COMMAND_LIST_PATH} component={SmsCommandList} />\n\n                        <Route exact path={SMS_COMMAND_FORM_EDIT_PATH} component={SmsCommandFormEdit} />\n\n                        <Route exact path={SMS_COMMAND_FORM_NEW_PATH} component={SmsCommandFormNew} />\n\n                        {\n          /* View sent sms */\n          ''}\n                        <Route exact path={SENT_SMS_LIST_PATH} component={SentSmsList} />\n\n                        {\n          /* View received sms */\n          ''}\n                        <Route exact path={RECEIVED_SMS_LIST_PATH} component={ReceivedSmsList} />\n\n                        <Redirect from=\"*\" to={HOME_PATH} />\n                    </Switch>\n                </main>\n            </div>\n        </HashRouter>\n    </AlertHandler>;\n\nexport default App;"],"sourceRoot":""}